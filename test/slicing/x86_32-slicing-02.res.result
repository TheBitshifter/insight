*** Test of slicing algorithm ***

max number of steps: 10
targeted address: 6
lvalue: %eax

================================================================================
Running backward arrow < (0x4,0) %ecx{8;8} := %eax{8;8} --> (0x6,0) >
New context at pp (0x4,0) :
	(EQ {elt}{0;32} %eax{0;32}){0;1}
Maximum dependencies at pp (0x4,0) : { %eax{0;32}  }
================================================================================
Running backward arrow < (0x2,0) %ebx{8;8} := %eax{8;8} --> (0x4,0) >
New context at pp (0x2,0) :
	(EQ {elt}{0;32} %eax{0;32}){0;1}
Maximum dependencies at pp (0x2,0) : { %eax{0;32}  }
================================================================================
Running backward arrow < (0x0,0) %eax{8;8} := 0x8{0;8} --> (0x2,0) >
New context at pp (0x0,0) :
	(EQ {elt}{0;32} %eax{0;32}){0;1}
Maximum dependencies at pp (0x0,0) : { %eax{0;32}  }
DataDependency: Fixpoint Reached!
================================================================================
Dependencies:
(0x0,0) <== DataDependency: Fixpoint Reached!
{ %eax{0;32}  }
DataDependency: Fixpoint Reached!
(0x0,0) %eax{8;8} := 0x8{0;8} --> (0x2,0)
(0x2,0) <== DataDependency: Fixpoint Reached!
{ %eax{0;32}  }
DataDependency: Fixpoint Reached!
(0x2,0) %ebx{8;8} := %eax{8;8} --> (0x4,0)
(0x4,0) <== DataDependency: Fixpoint Reached!
{ %eax{0;32}  }
DataDependency: Fixpoint Reached!
(0x4,0) %ecx{8;8} := %eax{8;8} --> (0x6,0)
(0x6,0) <== DataDependency: Fixpoint Reached!
{ %eax{0;32}  }
================================================================================

* Useless statements:


