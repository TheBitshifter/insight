[(0x0,0)] @{asm:=btc    %ax,%bx}@ ; %eflags{0;1} := (RSH_U %ebx{0;16} %eax{0;4}){0;1}
[(0x0,1)] ; StaticArrow (0x0,1) Skip << %eflags{0;1} >> --> (0x0,3); StaticArrow (0x0,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x0,2)
[(0x0,2)] ; StaticArrow (0x0,2) %ebx{0;16} := (OR %ebx{0;16} (LSH 0x1{0;16} %eax{0;4}){0;16})  --> (0x4,0)
[(0x0,3)] ; StaticArrow (0x0,3) %ebx{0;16} := (AND %ebx{0;16} (NOT (LSH 0x1{0;16} %eax{0;4}){0;16}){0;16})  --> (0x4,0)
[(0x4,0)] @{asm:=btc    %eax,%ebx}@ ; %eflags{0;1} := (RSH_U %ebx %eax{0;6}){0;1}
[(0x4,1)] ; StaticArrow (0x4,1) Skip << %eflags{0;1} >> --> (0x4,3); StaticArrow (0x4,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x4,2)
[(0x4,2)] ; StaticArrow (0x4,2) %ebx := (OR %ebx (LSH 0x1 %eax{0;6}))  --> (0x7,0)
[(0x4,3)] ; StaticArrow (0x4,3) %ebx := (AND %ebx (NOT (LSH 0x1 %eax{0;6})))  --> (0x7,0)
[(0x7,0)] @{asm:=btc    %ax,0x12345678}@ ; %eflags{0;1} := (RSH_U [0x12345678] %eax{0;6}){0;1}
[(0x7,1)] ; StaticArrow (0x7,1) Skip << %eflags{0;1} >> --> (0x7,3); StaticArrow (0x7,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x7,2)
[(0x7,2)] ; StaticArrow (0x7,2) [0x12345678] := (OR [0x12345678] (LSH 0x1 %eax{0;6}))  --> (0xF,0)
[(0x7,3)] ; StaticArrow (0x7,3) [0x12345678] := (AND [0x12345678] (NOT (LSH 0x1 %eax{0;6})))  --> (0xF,0)
[(0xF,0)] @{asm:=btc    %eax,0x12345678}@ ; %eflags{0;1} := (RSH_U [0x12345678] %eax{0;6}){0;1}
[(0xF,1)] ; StaticArrow (0xF,1) Skip << %eflags{0;1} >> --> (0xF,3); StaticArrow (0xF,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0xF,2)
[(0xF,2)] ; StaticArrow (0xF,2) [0x12345678] := (OR [0x12345678] (LSH 0x1 %eax{0;6}))  --> (0x16,0)
[(0xF,3)] ; StaticArrow (0xF,3) [0x12345678] := (AND [0x12345678] (NOT (LSH 0x1 %eax{0;6})))  --> (0x16,0)
[(0x16,0)] @{asm:=btc    $0x13,%ax}@ ; %eflags{0;1} := (RSH_U %eax{0;16} 0x13{0;4}){0;1}
[(0x16,1)] ; StaticArrow (0x16,1) Skip << %eflags{0;1} >> --> (0x16,3); StaticArrow (0x16,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x16,2)
[(0x16,2)] ; StaticArrow (0x16,2) %eax{0;16} := (OR %eax{0;16} (LSH 0x1{0;16} 0x13{0;4}){0;16})  --> (0x1B,0)
[(0x16,3)] ; StaticArrow (0x16,3) %eax{0;16} := (AND %eax{0;16} (NOT (LSH 0x1{0;16} 0x13{0;4}){0;16}){0;16})  --> (0x1B,0)
[(0x1B,0)] @{asm:=btc    $0x13,%eax}@ ; %eflags{0;1} := (RSH_U %eax 0x13{0;6}){0;1}
[(0x1B,1)] ; StaticArrow (0x1B,1) Skip << %eflags{0;1} >> --> (0x1B,3); StaticArrow (0x1B,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x1B,2)
[(0x1B,2)] ; StaticArrow (0x1B,2) %eax := (OR %eax (LSH 0x1 0x13{0;6}))  --> (0x1F,0)
[(0x1B,3)] ; StaticArrow (0x1B,3) %eax := (AND %eax (NOT (LSH 0x1 0x13{0;6})))  --> (0x1F,0)
[(0x1F,0)] @{asm:=btcw   $0x13,0x12345678}@ ; %eflags{0;1} := (RSH_U [0x12345678] 0x13{0;6}){0;1}
[(0x1F,1)] ; StaticArrow (0x1F,1) Skip << %eflags{0;1} >> --> (0x1F,3); StaticArrow (0x1F,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x1F,2)
[(0x1F,2)] ; StaticArrow (0x1F,2) [0x12345678] := (OR [0x12345678] (LSH 0x1 0x13{0;6}))  --> (0x28,0)
[(0x1F,3)] ; StaticArrow (0x1F,3) [0x12345678] := (AND [0x12345678] (NOT (LSH 0x1 0x13{0;6})))  --> (0x28,0)
[(0x28,0)] @{asm:=btcl   $0x13,0x12345678}@ ; %eflags{0;1} := (RSH_U [0x12345678] 0x13{0;6}){0;1}
[(0x28,1)] ; StaticArrow (0x28,1) Skip << %eflags{0;1} >> --> (0x28,3); StaticArrow (0x28,1) Skip << (NOT %eflags{0;1}){0;1} >> --> (0x28,2)
[(0x28,2)] ; StaticArrow (0x28,2) [0x12345678] := (OR [0x12345678] (LSH 0x1 0x13{0;6}))  --> (0x30,0)
[(0x28,3)] ; StaticArrow (0x28,3) [0x12345678] := (AND [0x12345678] (NOT (LSH 0x1 0x13{0;6})))  --> (0x30,0)
[(0x30,0)] 

