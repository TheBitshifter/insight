**** Decode instruction: imul   %bh
[0x0,0] @{asm:=imul   %bh}@ %rax{0;16} := (MUL_S %rax{0;8} %rbx{8;8}){0;16} --> (0x0,1);
[0x0,1] << (EQ %rax{8;8} 0x0{0;8}){0;1} >> Skip --> (0x0,2); << (NOT (EQ %rax{8;8} 0x0{0;8}){0;1}){0;1} >> Skip --> (0x0,4);
[0x0,2] %cf{0;1} := 0x0{0;1} --> (0x0,3);
[0x0,3] %of{0;1} := 0x0{0;1} --> (0x2,0);
[0x0,4] %cf{0;1} := 0x1{0;1} --> (0x0,5);
[0x0,5] %of{0;1} := 0x1{0;1} --> (0x2,0);
[0x2,0]

**** Decode instruction: imulb  0x12345678
[0x2,0] @{asm:=imulb  0x12345678}@ %rax{0;16} := (MUL_S %rax{0;8} [0x12345678{0;64}]{0;8}){0;16} --> (0x2,1);
[0x2,1] << (EQ %rax{8;8} 0x0{0;8}){0;1} >> Skip --> (0x2,2); << (NOT (EQ %rax{8;8} 0x0{0;8}){0;1}){0;1} >> Skip --> (0x2,4);
[0x2,2] %cf{0;1} := 0x0{0;1} --> (0x2,3);
[0x2,3] %of{0;1} := 0x0{0;1} --> (0x9,0);
[0x2,4] %cf{0;1} := 0x1{0;1} --> (0x2,5);
[0x2,5] %of{0;1} := 0x1{0;1} --> (0x9,0);
[0x9,0]

**** Decode instruction: imul   %bx
[0x9,0] @{asm:=imul   %bx}@ %tmpr0_32{0;32} := (MUL_S %rax{0;16} %rbx{0;16}){0;32} --> (0x9,1);
[0x9,1] %rdx{0;16} := %tmpr0_32{16;16} --> (0x9,2);
[0x9,2] %rax{0;16} := %tmpr0_32{0;16} --> (0x9,3);
[0x9,3] << (EQ (EXTRACT (EXTEND_S %rax{0;16} 0x20{0;64}){0;32} 0x10{0;64} 0x10{0;64}){0;16} %rdx{0;16}){0;1} >> Skip --> (0x9,4); << (NOT (EQ (EXTRACT (EXTEND_S %rax{0;16} 0x20{0;64}){0;32} 0x10{0;64} 0x10{0;64}){0;16} %rdx{0;16}){0;1}){0;1} >> Skip --> (0x9,6);
[0x9,4] %cf{0;1} := 0x0{0;1} --> (0x9,5);
[0x9,5] %of{0;1} := 0x0{0;1} --> (0xc,0);
[0x9,6] %cf{0;1} := 0x1{0;1} --> (0x9,7);
[0x9,7] %of{0;1} := 0x1{0;1} --> (0xc,0);
[0xc,0]

**** Decode instruction: imulw  0x12345678
[0xc,0] @{asm:=imulw  0x12345678}@ %tmpr0_32{0;32} := (MUL_S %rax{0;16} [0x12345678{0;64}]{0;16}){0;32} --> (0xc,1);
[0xc,1] %rdx{0;16} := %tmpr0_32{16;16} --> (0xc,2);
[0xc,2] %rax{0;16} := %tmpr0_32{0;16} --> (0xc,3);
[0xc,3] << (EQ (EXTRACT (EXTEND_S %rax{0;16} 0x20{0;64}){0;32} 0x10{0;64} 0x10{0;64}){0;16} %rdx{0;16}){0;1} >> Skip --> (0xc,4); << (NOT (EQ (EXTRACT (EXTEND_S %rax{0;16} 0x20{0;64}){0;32} 0x10{0;64} 0x10{0;64}){0;16} %rdx{0;16}){0;1}){0;1} >> Skip --> (0xc,6);
[0xc,4] %cf{0;1} := 0x0{0;1} --> (0xc,5);
[0xc,5] %of{0;1} := 0x0{0;1} --> (0x14,0);
[0xc,6] %cf{0;1} := 0x1{0;1} --> (0xc,7);
[0xc,7] %of{0;1} := 0x1{0;1} --> (0x14,0);
[0x14,0]

**** Decode instruction: imul   %ebx
[0x14,0] @{asm:=imul   %ebx}@ %tmpr0_64{0;64} := (MUL_S %rax{0;32} %rbx{0;32}){0;64} --> (0x14,1);
[0x14,1] %rdx{0;32} := %tmpr0_64{32;32} --> (0x14,2);
[0x14,2] %rax{0;32} := %tmpr0_64{0;32} --> (0x14,3);
[0x14,3] << (EQ %rdx{0;32} 0x0{0;32}){0;1} >> Skip --> (0x14,4); << (NOT (EQ %rdx{0;32} 0x0{0;32}){0;1}){0;1} >> Skip --> (0x14,6);
[0x14,4] %cf{0;1} := 0x0{0;1} --> (0x14,5);
[0x14,5] %of{0;1} := 0x0{0;1} --> (0x16,0);
[0x14,6] %cf{0;1} := 0x1{0;1} --> (0x14,7);
[0x14,7] %of{0;1} := 0x1{0;1} --> (0x16,0);
[0x16,0]

**** Decode instruction: imull  0x12345678
[0x16,0] @{asm:=imull  0x12345678}@ %tmpr0_64{0;64} := (MUL_S %rax{0;32} [0x12345678{0;64}]{0;32}){0;64} --> (0x16,1);
[0x16,1] %rdx{0;32} := %tmpr0_64{32;32} --> (0x16,2);
[0x16,2] %rax{0;32} := %tmpr0_64{0;32} --> (0x16,3);
[0x16,3] << (EQ %rdx{0;32} 0x0{0;32}){0;1} >> Skip --> (0x16,4); << (NOT (EQ %rdx{0;32} 0x0{0;32}){0;1}){0;1} >> Skip --> (0x16,6);
[0x16,4] %cf{0;1} := 0x0{0;1} --> (0x16,5);
[0x16,5] %of{0;1} := 0x0{0;1} --> (0x1d,0);
[0x16,6] %cf{0;1} := 0x1{0;1} --> (0x16,7);
[0x16,7] %of{0;1} := 0x1{0;1} --> (0x1d,0);
[0x1d,0]

**** Decode instruction: imul   %bx,%cx
[0x1d,0] @{asm:=imul   %bx,%cx}@ %tmpr0_32{0;32} := (MUL_S %rcx{0;16} %rbx{0;16}){0;32} --> (0x1d,1);
[0x1d,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x1d,2);
[0x1d,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x1d,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x1d,5);
[0x1d,3] %cf{0;1} := 0x1{0;1} --> (0x1d,4);
[0x1d,4] %of{0;1} := 0x1{0;1} --> (0x21,0);
[0x1d,5] %cf{0;1} := 0x0{0;1} --> (0x1d,6);
[0x1d,6] %of{0;1} := 0x0{0;1} --> (0x21,0);
[0x21,0]

**** Decode instruction: imul   0x12345678,%cx
[0x21,0] @{asm:=imul   0x12345678,%cx}@ %tmpr0_32{0;32} := (MUL_S %rcx{0;16} [0x12345678{0;64}]{0;16}){0;32} --> (0x21,1);
[0x21,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x21,2);
[0x21,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x21,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x21,5);
[0x21,3] %cf{0;1} := 0x1{0;1} --> (0x21,4);
[0x21,4] %of{0;1} := 0x1{0;1} --> (0x2a,0);
[0x21,5] %cf{0;1} := 0x0{0;1} --> (0x21,6);
[0x21,6] %of{0;1} := 0x0{0;1} --> (0x2a,0);
[0x2a,0]

**** Decode instruction: imul   %ebx,%ecx
[0x2a,0] @{asm:=imul   %ebx,%ecx}@ %tmpr0_64{0;64} := (MUL_S %rcx{0;32} %rbx{0;32}){0;64} --> (0x2a,1);
[0x2a,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x2a,2);
[0x2a,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x2a,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x2a,5);
[0x2a,3] %cf{0;1} := 0x1{0;1} --> (0x2a,4);
[0x2a,4] %of{0;1} := 0x1{0;1} --> (0x2d,0);
[0x2a,5] %cf{0;1} := 0x0{0;1} --> (0x2a,6);
[0x2a,6] %of{0;1} := 0x0{0;1} --> (0x2d,0);
[0x2d,0]

**** Decode instruction: imul   0x12345678,%ecx
[0x2d,0] @{asm:=imul   0x12345678,%ecx}@ %tmpr0_64{0;64} := (MUL_S %rcx{0;32} [0x12345678{0;64}]{0;32}){0;64} --> (0x2d,1);
[0x2d,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x2d,2);
[0x2d,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x2d,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x2d,5);
[0x2d,3] %cf{0;1} := 0x1{0;1} --> (0x2d,4);
[0x2d,4] %of{0;1} := 0x1{0;1} --> (0x35,0);
[0x2d,5] %cf{0;1} := 0x0{0;1} --> (0x2d,6);
[0x2d,6] %of{0;1} := 0x0{0;1} --> (0x35,0);
[0x35,0]

**** Decode instruction: imul   $0x10,%bx,%cx
[0x35,0] @{asm:=imul   $0x10,%bx,%cx}@ %tmpr0_32{0;32} := (MUL_S %rbx{0;16} 0x10{0;16}){0;32} --> (0x35,1);
[0x35,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x35,2);
[0x35,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x35,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x35,5);
[0x35,3] %cf{0;1} := 0x1{0;1} --> (0x35,4);
[0x35,4] %of{0;1} := 0x1{0;1} --> (0x39,0);
[0x35,5] %cf{0;1} := 0x0{0;1} --> (0x35,6);
[0x35,6] %of{0;1} := 0x0{0;1} --> (0x39,0);
[0x39,0]

**** Decode instruction: imul   $0x10,0x12345678,%cx
[0x39,0] @{asm:=imul   $0x10,0x12345678,%cx}@ %tmpr0_32{0;32} := (MUL_S [0x12345678{0;64}]{0;16} 0x10{0;16}){0;32} --> (0x39,1);
[0x39,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x39,2);
[0x39,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x39,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x39,5);
[0x39,3] %cf{0;1} := 0x1{0;1} --> (0x39,4);
[0x39,4] %of{0;1} := 0x1{0;1} --> (0x42,0);
[0x39,5] %cf{0;1} := 0x0{0;1} --> (0x39,6);
[0x39,6] %of{0;1} := 0x0{0;1} --> (0x42,0);
[0x42,0]

**** Decode instruction: imul   $0x10,%ebx,%ecx
[0x42,0] @{asm:=imul   $0x10,%ebx,%ecx}@ %tmpr0_64{0;64} := (MUL_S %rbx{0;32} 0x10{0;32}){0;64} --> (0x42,1);
[0x42,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x42,2);
[0x42,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x42,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x42,5);
[0x42,3] %cf{0;1} := 0x1{0;1} --> (0x42,4);
[0x42,4] %of{0;1} := 0x1{0;1} --> (0x45,0);
[0x42,5] %cf{0;1} := 0x0{0;1} --> (0x42,6);
[0x42,6] %of{0;1} := 0x0{0;1} --> (0x45,0);
[0x45,0]

**** Decode instruction: imul   $0x10,0x12345678,%ecx
[0x45,0] @{asm:=imul   $0x10,0x12345678,%ecx}@ %tmpr0_64{0;64} := (MUL_S [0x12345678{0;64}]{0;32} 0x10{0;32}){0;64} --> (0x45,1);
[0x45,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x45,2);
[0x45,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x45,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x45,5);
[0x45,3] %cf{0;1} := 0x1{0;1} --> (0x45,4);
[0x45,4] %of{0;1} := 0x1{0;1} --> (0x4d,0);
[0x45,5] %cf{0;1} := 0x0{0;1} --> (0x45,6);
[0x45,6] %of{0;1} := 0x0{0;1} --> (0x4d,0);
[0x4d,0]

**** Decode instruction: imul   $0x1010,%bx,%cx
[0x4d,0] @{asm:=imul   $0x1010,%bx,%cx}@ %tmpr0_32{0;32} := (MUL_S %rbx{0;16} 0x1010{0;16}){0;32} --> (0x4d,1);
[0x4d,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x4d,2);
[0x4d,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x4d,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x4d,5);
[0x4d,3] %cf{0;1} := 0x1{0;1} --> (0x4d,4);
[0x4d,4] %of{0;1} := 0x1{0;1} --> (0x52,0);
[0x4d,5] %cf{0;1} := 0x0{0;1} --> (0x4d,6);
[0x4d,6] %of{0;1} := 0x0{0;1} --> (0x52,0);
[0x52,0]

**** Decode instruction: imul   $0x1010,0x12345678,%cx
[0x52,0] @{asm:=imul   $0x1010,0x12345678,%cx}@ %tmpr0_32{0;32} := (MUL_S [0x12345678{0;64}]{0;16} 0x1010{0;16}){0;32} --> (0x52,1);
[0x52,1] %rcx{0;16} := %tmpr0_32{0;16} --> (0x52,2);
[0x52,2] << (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1} >> Skip --> (0x52,3); << (NOT (NEQ 0x0{0;16} %tmpr0_32{16;16}){0;1}){0;1} >> Skip --> (0x52,5);
[0x52,3] %cf{0;1} := 0x1{0;1} --> (0x52,4);
[0x52,4] %of{0;1} := 0x1{0;1} --> (0x5c,0);
[0x52,5] %cf{0;1} := 0x0{0;1} --> (0x52,6);
[0x52,6] %of{0;1} := 0x0{0;1} --> (0x5c,0);
[0x5c,0]

**** Decode instruction: imul   $0x10101010,%ebx,%ecx
[0x5c,0] @{asm:=imul   $0x10101010,%ebx,%ecx}@ %tmpr0_64{0;64} := (MUL_S %rbx{0;32} 0x10101010{0;32}){0;64} --> (0x5c,1);
[0x5c,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x5c,2);
[0x5c,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x5c,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x5c,5);
[0x5c,3] %cf{0;1} := 0x1{0;1} --> (0x5c,4);
[0x5c,4] %of{0;1} := 0x1{0;1} --> (0x62,0);
[0x5c,5] %cf{0;1} := 0x0{0;1} --> (0x5c,6);
[0x5c,6] %of{0;1} := 0x0{0;1} --> (0x62,0);
[0x62,0]

**** Decode instruction: imul   $0x10101010,0x12345678,%ecx
[0x62,0] @{asm:=imul   $0x10101010,0x12345678,%ecx}@ %tmpr0_64{0;64} := (MUL_S [0x12345678{0;64}]{0;32} 0x10101010{0;32}){0;64} --> (0x62,1);
[0x62,1] %rcx{0;32} := %tmpr0_64{0;32} --> (0x62,2);
[0x62,2] << (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1} >> Skip --> (0x62,3); << (NOT (NEQ 0x0{0;32} %tmpr0_64{32;32}){0;1}){0;1} >> Skip --> (0x62,5);
[0x62,3] %cf{0;1} := 0x1{0;1} --> (0x62,4);
[0x62,4] %of{0;1} := 0x1{0;1} --> (0x6d,0);
[0x62,5] %cf{0;1} := 0x0{0;1} --> (0x62,6);
[0x62,6] %of{0;1} := 0x0{0;1} --> (0x6d,0);
[0x6d,0]

