**** Decode instruction: btc    %ax,%bx
[(0x0,0)] @{asm:=btc    %ax,%bx}@ %cf{0;1} := (RSH_U %rbx{0;16} (EXTEND_U %rax{0;4} 0x10{0;64}){0;16}){0;1}
[(0x0,1)] StaticArrow (0x0,1) Skip << %cf{0;1} >> --> (0x0,3)StaticArrow (0x0,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x0,2)
[(0x0,2)] StaticArrow (0x0,2) %rbx{0;16} := (OR %rbx{0;16} (LSH 0x1{0;16} (EXTEND_U %rax{0;4} 0x10{0;64}){0;16}){0;16}){0;16}  --> (0x4,0)
[(0x0,3)] StaticArrow (0x0,3) %rbx{0;16} := (AND %rbx{0;16} (NOT (LSH 0x1{0;16} (EXTEND_U %rax{0;4} 0x10{0;64}){0;16}){0;16}){0;16}){0;16}  --> (0x4,0)
[(0x4,0)] 

**** Decode instruction: btc    %eax,%ebx
[(0x4,0)] @{asm:=btc    %eax,%ebx}@ %cf{0;1} := (RSH_U %rbx{0;32} (EXTEND_U %rax{0;6} 0x20{0;64}){0;32}){0;1}
[(0x4,1)] StaticArrow (0x4,1) Skip << %cf{0;1} >> --> (0x4,3)StaticArrow (0x4,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x4,2)
[(0x4,2)] StaticArrow (0x4,2) %rbx{0;32} := (OR %rbx{0;32} (LSH 0x1{0;32} (EXTEND_U %rax{0;6} 0x20{0;64}){0;32}){0;32}){0;32}  --> (0x7,0)
[(0x4,3)] StaticArrow (0x4,3) %rbx{0;32} := (AND %rbx{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U %rax{0;6} 0x20{0;64}){0;32}){0;32}){0;32}){0;32}  --> (0x7,0)
[(0x7,0)] 

**** Decode instruction: btc    %ax,0x12345678
[(0x7,0)] @{asm:=btc    %ax,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;64}]{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;1}
[(0x7,1)] StaticArrow (0x7,1) Skip << %cf{0;1} >> --> (0x7,3)StaticArrow (0x7,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x7,2)
[(0x7,2)] StaticArrow (0x7,2) [0x12345678{0;64}]{0;64} := (OR [0x12345678{0;64}]{0;64} (LSH 0x1{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;64}){0;64}  --> (0x10,0)
[(0x7,3)] StaticArrow (0x7,3) [0x12345678{0;64}]{0;64} := (AND [0x12345678{0;64}]{0;64} (NOT (LSH 0x1{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;64}){0;64}){0;64}  --> (0x10,0)
[(0x10,0)] 

**** Decode instruction: btc    %eax,0x12345678
[(0x10,0)] @{asm:=btc    %eax,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;64}]{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;1}
[(0x10,1)] StaticArrow (0x10,1) Skip << %cf{0;1} >> --> (0x10,3)StaticArrow (0x10,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x10,2)
[(0x10,2)] StaticArrow (0x10,2) [0x12345678{0;64}]{0;64} := (OR [0x12345678{0;64}]{0;64} (LSH 0x1{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;64}){0;64}  --> (0x18,0)
[(0x10,3)] StaticArrow (0x10,3) [0x12345678{0;64}]{0;64} := (AND [0x12345678{0;64}]{0;64} (NOT (LSH 0x1{0;64} (EXTEND_U %rax{0;4} 0x40{0;64}){0;64}){0;64}){0;64}){0;64}  --> (0x18,0)
[(0x18,0)] 

**** Decode instruction: btc    $0x13,%ax
[(0x18,0)] @{asm:=btc    $0x13,%ax}@ %cf{0;1} := (RSH_U %rax{0;16} (EXTEND_U 0x3{0;4} 0x10{0;64}){0;16}){0;1}
[(0x18,1)] StaticArrow (0x18,1) Skip << %cf{0;1} >> --> (0x18,3)StaticArrow (0x18,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x18,2)
[(0x18,2)] StaticArrow (0x18,2) %rax{0;16} := (OR %rax{0;16} (LSH 0x1{0;16} (EXTEND_U 0x3{0;4} 0x10{0;64}){0;16}){0;16}){0;16}  --> (0x1d,0)
[(0x18,3)] StaticArrow (0x18,3) %rax{0;16} := (AND %rax{0;16} (NOT (LSH 0x1{0;16} (EXTEND_U 0x3{0;4} 0x10{0;64}){0;16}){0;16}){0;16}){0;16}  --> (0x1d,0)
[(0x1d,0)] 

**** Decode instruction: btc    $0x13,%eax
[(0x1d,0)] @{asm:=btc    $0x13,%eax}@ %cf{0;1} := (RSH_U %rax{0;32} (EXTEND_U 0x13{0;6} 0x20{0;64}){0;32}){0;1}
[(0x1d,1)] StaticArrow (0x1d,1) Skip << %cf{0;1} >> --> (0x1d,3)StaticArrow (0x1d,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x1d,2)
[(0x1d,2)] StaticArrow (0x1d,2) %rax{0;32} := (OR %rax{0;32} (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;64}){0;32}){0;32}){0;32}  --> (0x21,0)
[(0x1d,3)] StaticArrow (0x1d,3) %rax{0;32} := (AND %rax{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;64}){0;32}){0;32}){0;32}){0;32}  --> (0x21,0)
[(0x21,0)] 

**** Decode instruction: btcw   $0x13,0x12345678
[(0x21,0)] @{asm:=btcw   $0x13,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;64}]{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;1}
[(0x21,1)] StaticArrow (0x21,1) Skip << %cf{0;1} >> --> (0x21,3)StaticArrow (0x21,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x21,2)
[(0x21,2)] StaticArrow (0x21,2) [0x12345678{0;64}]{0;64} := (OR [0x12345678{0;64}]{0;64} (LSH 0x1{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;64}){0;64}  --> (0x2b,0)
[(0x21,3)] StaticArrow (0x21,3) [0x12345678{0;64}]{0;64} := (AND [0x12345678{0;64}]{0;64} (NOT (LSH 0x1{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;64}){0;64}){0;64}  --> (0x2b,0)
[(0x2b,0)] 

**** Decode instruction: btcl   $0x13,0x12345678
[(0x2b,0)] @{asm:=btcl   $0x13,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;64}]{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;1}
[(0x2b,1)] StaticArrow (0x2b,1) Skip << %cf{0;1} >> --> (0x2b,3)StaticArrow (0x2b,1) Skip << (NOT %cf{0;1}){0;1} >> --> (0x2b,2)
[(0x2b,2)] StaticArrow (0x2b,2) [0x12345678{0;64}]{0;64} := (OR [0x12345678{0;64}]{0;64} (LSH 0x1{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;64}){0;64}  --> (0x34,0)
[(0x2b,3)] StaticArrow (0x2b,3) [0x12345678{0;64}]{0;64} := (AND [0x12345678{0;64}]{0;64} (NOT (LSH 0x1{0;64} (EXTEND_U 0x3{0;4} 0x40{0;64}){0;64}){0;64}){0;64}){0;64}  --> (0x34,0)
[(0x34,0)] 

