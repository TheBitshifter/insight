**** Decode instruction: mul    %bh
[0x0,0] @{asm:=mul    %bh}@ %tmpr0_16{0;16} := (MUL_U %rax{0;8} %rbx{8;8}){0;16} --> (0x0,1);
[0x0,1] %rax{0;8} := %tmpr0_16{0;8} --> (0x0,2);
[0x0,2] %rax{8;8} := %tmpr0_16{8;8} --> (0x0,3);
[0x0,3] << (EQ %rax{8;8} 0x0{0;8}){0;1} >> Skip --> (0x0,4); << (NOT (EQ %rax{8;8} 0x0{0;8}){0;1}){0;1} >> Skip --> (0x0,6);
[0x0,4] %cf{0;1} := 0x0{0;1} --> (0x0,5);
[0x0,5] %of{0;1} := 0x0{0;1} --> (0x2,0);
[0x0,6] %cf{0;1} := 0x1{0;1} --> (0x0,7);
[0x0,7] %of{0;1} := 0x1{0;1} --> (0x2,0);
[0x2,0]

**** Decode instruction: mulb   0x1234
[0x2,0] @{asm:=mulb   0x1234}@ %tmpr0_16{0;16} := (MUL_U %rax{0;8} [0x1234{0;64}]{0;8}){0;16} --> (0x2,1);
[0x2,1] %rax{0;8} := %tmpr0_16{0;8} --> (0x2,2);
[0x2,2] %rax{8;8} := %tmpr0_16{8;8} --> (0x2,3);
[0x2,3] << (EQ %rax{8;8} 0x0{0;8}){0;1} >> Skip --> (0x2,4); << (NOT (EQ %rax{8;8} 0x0{0;8}){0;1}){0;1} >> Skip --> (0x2,6);
[0x2,4] %cf{0;1} := 0x0{0;1} --> (0x2,5);
[0x2,5] %of{0;1} := 0x0{0;1} --> (0x9,0);
[0x2,6] %cf{0;1} := 0x1{0;1} --> (0x2,7);
[0x2,7] %of{0;1} := 0x1{0;1} --> (0x9,0);
[0x9,0]

**** Decode instruction: mul    %bx
[0x9,0] @{asm:=mul    %bx}@ %tmpr0_32{0;32} := (MUL_U %rax{0;16} %rbx{0;16}){0;32} --> (0x9,1);
[0x9,1] %rax{0;16} := %tmpr0_32{0;16} --> (0x9,2);
[0x9,2] %rdx{0;16} := %tmpr0_32{16;16} --> (0x9,3);
[0x9,3] << (EQ %rdx{0;16} 0x0{0;16}){0;1} >> Skip --> (0x9,4); << (NOT (EQ %rdx{0;16} 0x0{0;16}){0;1}){0;1} >> Skip --> (0x9,6);
[0x9,4] %cf{0;1} := 0x0{0;1} --> (0x9,5);
[0x9,5] %of{0;1} := 0x0{0;1} --> (0xc,0);
[0x9,6] %cf{0;1} := 0x1{0;1} --> (0x9,7);
[0x9,7] %of{0;1} := 0x1{0;1} --> (0xc,0);
[0xc,0]

**** Decode instruction: mulw   0x1234
[0xc,0] @{asm:=mulw   0x1234}@ %tmpr0_32{0;32} := (MUL_U %rax{0;16} [0x1234{0;64}]{0;16}){0;32} --> (0xc,1);
[0xc,1] %rax{0;16} := %tmpr0_32{0;16} --> (0xc,2);
[0xc,2] %rdx{0;16} := %tmpr0_32{16;16} --> (0xc,3);
[0xc,3] << (EQ %rdx{0;16} 0x0{0;16}){0;1} >> Skip --> (0xc,4); << (NOT (EQ %rdx{0;16} 0x0{0;16}){0;1}){0;1} >> Skip --> (0xc,6);
[0xc,4] %cf{0;1} := 0x0{0;1} --> (0xc,5);
[0xc,5] %of{0;1} := 0x0{0;1} --> (0x14,0);
[0xc,6] %cf{0;1} := 0x1{0;1} --> (0xc,7);
[0xc,7] %of{0;1} := 0x1{0;1} --> (0x14,0);
[0x14,0]

**** Decode instruction: mul    %ebx
[0x14,0] @{asm:=mul    %ebx}@ %tmpr0_64{0;64} := (MUL_U %rax{0;32} %rbx{0;32}){0;64} --> (0x14,1);
[0x14,1] %rax{0;32} := %tmpr0_64{0;32} --> (0x14,2);
[0x14,2] %rdx{0;32} := %tmpr0_64{32;32} --> (0x14,3);
[0x14,3] << (EQ %rdx{0;32} 0x0{0;32}){0;1} >> Skip --> (0x14,4); << (NOT (EQ %rdx{0;32} 0x0{0;32}){0;1}){0;1} >> Skip --> (0x14,6);
[0x14,4] %cf{0;1} := 0x0{0;1} --> (0x14,5);
[0x14,5] %of{0;1} := 0x0{0;1} --> (0x16,0);
[0x14,6] %cf{0;1} := 0x1{0;1} --> (0x14,7);
[0x14,7] %of{0;1} := 0x1{0;1} --> (0x16,0);
[0x16,0]

**** Decode instruction: mull   0x1234
[0x16,0] @{asm:=mull   0x1234}@ %tmpr0_64{0;64} := (MUL_U %rax{0;32} [0x1234{0;64}]{0;32}){0;64} --> (0x16,1);
[0x16,1] %rax{0;32} := %tmpr0_64{0;32} --> (0x16,2);
[0x16,2] %rdx{0;32} := %tmpr0_64{32;32} --> (0x16,3);
[0x16,3] << (EQ %rdx{0;32} 0x0{0;32}){0;1} >> Skip --> (0x16,4); << (NOT (EQ %rdx{0;32} 0x0{0;32}){0;1}){0;1} >> Skip --> (0x16,6);
[0x16,4] %cf{0;1} := 0x0{0;1} --> (0x16,5);
[0x16,5] %of{0;1} := 0x0{0;1} --> (0x1d,0);
[0x16,6] %cf{0;1} := 0x1{0;1} --> (0x16,7);
[0x16,7] %of{0;1} := 0x1{0;1} --> (0x1d,0);
[0x1d,0]

