**** Decode instruction: lods   %ds:(%esi),%al
[0x0,0] @{asm:=lods   %ds:(%esi),%al}@ %rax{0;8} := [%rsi{0;64}]{0;8} --> (0x0,1);
[0x0,1] << %df{0;1} >> Skip --> (0x0,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x0,3);
[0x0,2] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0x2,0);
[0x0,3] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0x2,0);
[0x2,0]

**** Decode instruction: lods   %ds:(%esi),%ax
[0x2,0] @{asm:=lods   %ds:(%esi),%ax}@ %rax{0;16} := [%rsi{0;64}]{0;16} --> (0x2,1);
[0x2,1] << %df{0;1} >> Skip --> (0x2,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x2,3);
[0x2,2] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0x5,0);
[0x2,3] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0x5,0);
[0x5,0]

**** Decode instruction: lods   %ds:(%esi),%eax
[0x5,0] @{asm:=lods   %ds:(%esi),%eax}@ %rax{0;32} := [%rsi{0;64}]{0;32} --> (0x5,1);
[0x5,1] << %df{0;1} >> Skip --> (0x5,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x5,3);
[0x5,2] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0x7,0);
[0x5,3] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0x7,0);
[0x7,0]

**** Decode instruction: lods   %ds:(%rsi),%rax
[0x7,0] @{asm:=lods   %ds:(%rsi),%rax}@ %rax{0;64} := [%rsi{0;64}]{0;64} --> (0x7,1);
[0x7,1] << %df{0;1} >> Skip --> (0x7,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x7,3);
[0x7,2] %rsi{0;64} := (SUB %rsi{0;64} 0x8{0;64}){0;64} --> (0x9,0);
[0x7,3] %rsi{0;64} := (ADD %rsi{0;64} 0x8{0;64}){0;64} --> (0x9,0);
[0x9,0]

**** Decode instruction: lods   %ds:(%rsi),%al
[0x9,0] @{asm:=lods   %ds:(%rsi),%al}@ %rax{0;8} := [%rsi{0;64}]{0;8} --> (0x9,1);
[0x9,1] << %df{0;1} >> Skip --> (0x9,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x9,3);
[0x9,2] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0xa,0);
[0x9,3] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0xa,0);
[0xa,0]

**** Decode instruction: lods   %ds:(%rsi),%ax
[0xa,0] @{asm:=lods   %ds:(%rsi),%ax}@ %rax{0;16} := [%rsi{0;64}]{0;16} --> (0xa,1);
[0xa,1] << %df{0;1} >> Skip --> (0xa,2); << (NOT %df{0;1}){0;1} >> Skip --> (0xa,3);
[0xa,2] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0xc,0);
[0xa,3] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0xc,0);
[0xc,0]

**** Decode instruction: lods   %ds:(%rsi),%eax
[0xc,0] @{asm:=lods   %ds:(%rsi),%eax}@ %rax{0;32} := [%rsi{0;64}]{0;32} --> (0xc,1);
[0xc,1] << %df{0;1} >> Skip --> (0xc,2); << (NOT %df{0;1}){0;1} >> Skip --> (0xc,3);
[0xc,2] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0xd,0);
[0xc,3] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0xd,0);
[0xd,0]

**** Decode instruction: lods   %ds:(%rsi),%rax
[0xd,0] @{asm:=lods   %ds:(%rsi),%rax}@ %rax{0;64} := [%rsi{0;64}]{0;64} --> (0xd,1);
[0xd,1] << %df{0;1} >> Skip --> (0xd,2); << (NOT %df{0;1}){0;1} >> Skip --> (0xd,3);
[0xd,2] %rsi{0;64} := (SUB %rsi{0;64} 0x8{0;64}){0;64} --> (0xf,0);
[0xd,3] %rsi{0;64} := (ADD %rsi{0;64} 0x8{0;64}){0;64} --> (0xf,0);
[0xf,0]

**** Decode instruction: lods   %ds:(%esi),%al
[0xf,0] @{asm:=lods   %ds:(%esi),%al}@ %rax{0;8} := [%rsi{0;64}]{0;8} --> (0xf,1);
[0xf,1] << %df{0;1} >> Skip --> (0xf,2); << (NOT %df{0;1}){0;1} >> Skip --> (0xf,3);
[0xf,2] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0x11,0);
[0xf,3] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0x11,0);
[0x11,0]

**** Decode instruction: lods   %ds:(%esi),%ax
[0x11,0] @{asm:=lods   %ds:(%esi),%ax}@ %rax{0;16} := [%rsi{0;64}]{0;16} --> (0x11,1);
[0x11,1] << %df{0;1} >> Skip --> (0x11,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x11,3);
[0x11,2] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0x14,0);
[0x11,3] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0x14,0);
[0x14,0]

**** Decode instruction: lods   %ds:(%esi),%eax
[0x14,0] @{asm:=lods   %ds:(%esi),%eax}@ %rax{0;32} := [%rsi{0;64}]{0;32} --> (0x14,1);
[0x14,1] << %df{0;1} >> Skip --> (0x14,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x14,3);
[0x14,2] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0x16,0);
[0x14,3] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0x16,0);
[0x16,0]

**** Decode instruction: lods   %ds:(%esi),%al
[0x16,0] @{asm:=lods   %ds:(%esi),%al}@ %rax{0;8} := [%rsi{0;64}]{0;8} --> (0x16,1);
[0x16,1] << %df{0;1} >> Skip --> (0x16,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x16,3);
[0x16,2] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0x18,0);
[0x16,3] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0x18,0);
[0x18,0]

**** Decode instruction: lods   %ds:(%esi),%ax
[0x18,0] @{asm:=lods   %ds:(%esi),%ax}@ %rax{0;16} := [%rsi{0;64}]{0;16} --> (0x18,1);
[0x18,1] << %df{0;1} >> Skip --> (0x18,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x18,3);
[0x18,2] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0x1b,0);
[0x18,3] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0x1b,0);
[0x1b,0]

**** Decode instruction: lods   %ds:(%esi),%eax
[0x1b,0] @{asm:=lods   %ds:(%esi),%eax}@ %rax{0;32} := [%rsi{0;64}]{0;32} --> (0x1b,1);
[0x1b,1] << %df{0;1} >> Skip --> (0x1b,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x1b,3);
[0x1b,2] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0x1d,0);
[0x1b,3] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0x1d,0);
[0x1d,0]

**** Decode instruction: stos   %al,%es:(%edi)
[0x1d,0] @{asm:=stos   %al,%es:(%edi)}@ [%rdi{0;64}]{0;8} := %rax{0;8} --> (0x1d,1);
[0x1d,1] << %df{0;1} >> Skip --> (0x1d,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x1d,3);
[0x1d,2] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0x1f,0);
[0x1d,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0x1f,0);
[0x1f,0]

**** Decode instruction: stos   %ax,%es:(%edi)
[0x1f,0] @{asm:=stos   %ax,%es:(%edi)}@ [%rdi{0;64}]{0;16} := %rax{0;16} --> (0x1f,1);
[0x1f,1] << %df{0;1} >> Skip --> (0x1f,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x1f,3);
[0x1f,2] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0x22,0);
[0x1f,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0x22,0);
[0x22,0]

**** Decode instruction: stos   %eax,%es:(%edi)
[0x22,0] @{asm:=stos   %eax,%es:(%edi)}@ [%rdi{0;64}]{0;32} := %rax{0;32} --> (0x22,1);
[0x22,1] << %df{0;1} >> Skip --> (0x22,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x22,3);
[0x22,2] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x24,0);
[0x22,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x24,0);
[0x24,0]

**** Decode instruction: stos   %rax,%es:(%rdi)
[0x24,0] @{asm:=stos   %rax,%es:(%rdi)}@ [%rdi{0;64}]{0;64} := %rax{0;64} --> (0x24,1);
[0x24,1] << %df{0;1} >> Skip --> (0x24,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x24,3);
[0x24,2] %rdi{0;64} := (SUB %rdi{0;64} 0x8{0;64}){0;64} --> (0x26,0);
[0x24,3] %rdi{0;64} := (ADD %rdi{0;64} 0x8{0;64}){0;64} --> (0x26,0);
[0x26,0]

**** Decode instruction: stos   %al,%es:(%rdi)
[0x26,0] @{asm:=stos   %al,%es:(%rdi)}@ [%rdi{0;64}]{0;8} := %rax{0;8} --> (0x26,1);
[0x26,1] << %df{0;1} >> Skip --> (0x26,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x26,3);
[0x26,2] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0x27,0);
[0x26,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0x27,0);
[0x27,0]

**** Decode instruction: stos   %ax,%es:(%rdi)
[0x27,0] @{asm:=stos   %ax,%es:(%rdi)}@ [%rdi{0;64}]{0;16} := %rax{0;16} --> (0x27,1);
[0x27,1] << %df{0;1} >> Skip --> (0x27,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x27,3);
[0x27,2] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0x29,0);
[0x27,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0x29,0);
[0x29,0]

**** Decode instruction: stos   %eax,%es:(%rdi)
[0x29,0] @{asm:=stos   %eax,%es:(%rdi)}@ [%rdi{0;64}]{0;32} := %rax{0;32} --> (0x29,1);
[0x29,1] << %df{0;1} >> Skip --> (0x29,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x29,3);
[0x29,2] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x2a,0);
[0x29,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x2a,0);
[0x2a,0]

**** Decode instruction: stos   %rax,%es:(%rdi)
[0x2a,0] @{asm:=stos   %rax,%es:(%rdi)}@ [%rdi{0;64}]{0;64} := %rax{0;64} --> (0x2a,1);
[0x2a,1] << %df{0;1} >> Skip --> (0x2a,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x2a,3);
[0x2a,2] %rdi{0;64} := (SUB %rdi{0;64} 0x8{0;64}){0;64} --> (0x2c,0);
[0x2a,3] %rdi{0;64} := (ADD %rdi{0;64} 0x8{0;64}){0;64} --> (0x2c,0);
[0x2c,0]

**** Decode instruction: stos   %al,%es:(%edi)
[0x2c,0] @{asm:=stos   %al,%es:(%edi)}@ [%rdi{0;64}]{0;8} := %rax{0;8} --> (0x2c,1);
[0x2c,1] << %df{0;1} >> Skip --> (0x2c,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x2c,3);
[0x2c,2] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0x2e,0);
[0x2c,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0x2e,0);
[0x2e,0]

**** Decode instruction: stos   %ax,%es:(%edi)
[0x2e,0] @{asm:=stos   %ax,%es:(%edi)}@ [%rdi{0;64}]{0;16} := %rax{0;16} --> (0x2e,1);
[0x2e,1] << %df{0;1} >> Skip --> (0x2e,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x2e,3);
[0x2e,2] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0x31,0);
[0x2e,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0x31,0);
[0x31,0]

**** Decode instruction: stos   %eax,%es:(%edi)
[0x31,0] @{asm:=stos   %eax,%es:(%edi)}@ [%rdi{0;64}]{0;32} := %rax{0;32} --> (0x31,1);
[0x31,1] << %df{0;1} >> Skip --> (0x31,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x31,3);
[0x31,2] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x33,0);
[0x31,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x33,0);
[0x33,0]

**** Decode instruction: stos   %al,%es:(%edi)
[0x33,0] @{asm:=stos   %al,%es:(%edi)}@ [%rdi{0;64}]{0;8} := %rax{0;8} --> (0x33,1);
[0x33,1] << %df{0;1} >> Skip --> (0x33,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x33,3);
[0x33,2] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0x35,0);
[0x33,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0x35,0);
[0x35,0]

**** Decode instruction: stos   %ax,%es:(%edi)
[0x35,0] @{asm:=stos   %ax,%es:(%edi)}@ [%rdi{0;64}]{0;16} := %rax{0;16} --> (0x35,1);
[0x35,1] << %df{0;1} >> Skip --> (0x35,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x35,3);
[0x35,2] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0x38,0);
[0x35,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0x38,0);
[0x38,0]

**** Decode instruction: stos   %eax,%es:(%edi)
[0x38,0] @{asm:=stos   %eax,%es:(%edi)}@ [%rdi{0;64}]{0;32} := %rax{0;32} --> (0x38,1);
[0x38,1] << %df{0;1} >> Skip --> (0x38,2); << (NOT %df{0;1}){0;1} >> Skip --> (0x38,3);
[0x38,2] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x3a,0);
[0x38,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x3a,0);
[0x3a,0]

