**** Decode instruction: callq  0x5
[(0x0,0)] @{asm:=callq  0x5}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x0,1)] [%rsp{0;64}]{0;64} := 0x5{0;64}
[(0x0,2)] @{callret:=CALL}@ StaticArrow (0x0,2) Skip  --> (0x5,0)
[(0x5,0)] 

**** Decode instruction: callq  *0x1234
[(0x5,0)] @{asm:=callq  *0x1234}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x5,1)] [%rsp{0;64}]{0;64} := 0xc{0;64}
[(0x5,2)] @{callret:=CALL}@ DynamicArrow (0x5,2) Jmp [0x1234{0;64}]{0;64}  --> << [0x1234{0;64}]{0;64} >>

**** Decode instruction: callq  *-0x4d2(%ebx)
[(0xc,0)] @{asm:=callq  *-0x4d2(%ebx)}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0xc,1)] [%rsp{0;64}]{0;64} := 0x13{0;64}
[(0xc,2)] @{callret:=CALL}@ DynamicArrow (0xc,2) Jmp [(ADD %rbx{0;32} 0xfffffb2e{0;32}){0;32}]{0;64}  --> << [(ADD %rbx{0;32} 0xfffffb2e{0;32}){0;32}]{0;64} >>

**** Decode instruction: callq  *0xf012002
[(0x13,0)] @{asm:=callq  *0xf012002}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x13,1)] [%rsp{0;64}]{0;64} := 0x1a{0;64}
[(0x13,2)] @{callret:=CALL}@ DynamicArrow (0x13,2) Jmp [0xf012002{0;64}]{0;64}  --> << [0xf012002{0;64}]{0;64} >>

**** Decode instruction: callq  *%rax
[(0x1a,0)] @{asm:=callq  *%rax}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x1a,1)] [%rsp{0;64}]{0;64} := 0x1c{0;64}
[(0x1a,2)] @{callret:=CALL}@ DynamicArrow (0x1a,2) Jmp %rax{0;64}  --> << %rax{0;64} >>

**** Decode instruction: callq  0x21
[(0x1c,0)] @{asm:=callq  0x21}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x1c,1)] [%rsp{0;64}]{0;64} := 0x21{0;64}
[(0x1c,2)] @{callret:=CALL}@ StaticArrow (0x1c,2) Skip  --> (0x21,0)
[(0x21,0)] 

**** Decode instruction: callq  *0x1234
[(0x21,0)] @{asm:=callq  *0x1234}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x21,1)] [%rsp{0;64}]{0;64} := 0x28{0;64}
[(0x21,2)] @{callret:=CALL}@ DynamicArrow (0x21,2) Jmp [0x1234{0;64}]{0;64}  --> << [0x1234{0;64}]{0;64} >>

**** Decode instruction: callq  *-0x4d2(%rbx)
[(0x28,0)] @{asm:=callq  *-0x4d2(%rbx)}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x28,1)] [%rsp{0;64}]{0;64} := 0x2e{0;64}
[(0x28,2)] @{callret:=CALL}@ DynamicArrow (0x28,2) Jmp [(ADD %rbx{0;64} 0xfffffffffffffb2e{0;64}){0;64}]{0;64}  --> << [(ADD %rbx{0;64} 0xfffffffffffffb2e{0;64}){0;64}]{0;64} >>

**** Decode instruction: callq  *0xf012002
[(0x2e,0)] @{asm:=callq  *0xf012002}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x2e,1)] [%rsp{0;64}]{0;64} := 0x35{0;64}
[(0x2e,2)] @{callret:=CALL}@ DynamicArrow (0x2e,2) Jmp [0xf012002{0;64}]{0;64}  --> << [0xf012002{0;64}]{0;64} >>

**** Decode instruction: callq  *%rax
[(0x35,0)] @{asm:=callq  *%rax}@ %rsp{0;64} := (SUB %rsp{0;64} 0x8{0;64}){0;64}
[(0x35,1)] [%rsp{0;64}]{0;64} := 0x37{0;64}
[(0x35,2)] @{callret:=CALL}@ DynamicArrow (0x35,2) Jmp %rax{0;64}  --> << %rax{0;64} >>

