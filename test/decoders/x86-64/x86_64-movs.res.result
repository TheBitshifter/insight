**** Decode instruction: movsb  %ds:(%esi),%es:(%edi)
[0x0,0] @{asm:=movsb  %ds:(%esi),%es:(%edi)}@ [%rdi{0;64}]{0;8} := [%rsi{0;64}]{0;8} --> (0x0,1);
[0x0,1] << %df{0;1} >> Skip --> (0x0,4); << (NOT %df{0;1}){0;1} >> Skip --> (0x0,2);
[0x0,2] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0x0,3);
[0x0,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0x2,0);
[0x0,4] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0x0,5);
[0x0,5] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0x2,0);
[0x2,0]

**** Decode instruction: movsw  %ds:(%esi),%es:(%edi)
[0x2,0] @{asm:=movsw  %ds:(%esi),%es:(%edi)}@ [%rdi{0;64}]{0;16} := [%rsi{0;64}]{0;16} --> (0x2,1);
[0x2,1] << %df{0;1} >> Skip --> (0x2,4); << (NOT %df{0;1}){0;1} >> Skip --> (0x2,2);
[0x2,2] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0x2,3);
[0x2,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0x5,0);
[0x2,4] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0x2,5);
[0x2,5] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0x5,0);
[0x5,0]

**** Decode instruction: movsl  %ds:(%esi),%es:(%edi)
[0x5,0] @{asm:=movsl  %ds:(%esi),%es:(%edi)}@ [%rdi{0;64}]{0;32} := [%rsi{0;64}]{0;32} --> (0x5,1);
[0x5,1] << %df{0;1} >> Skip --> (0x5,4); << (NOT %df{0;1}){0;1} >> Skip --> (0x5,2);
[0x5,2] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0x5,3);
[0x5,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x7,0);
[0x5,4] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0x5,5);
[0x5,5] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x7,0);
[0x7,0]

**** Decode instruction: movsl  %ds:(%esi),%es:(%edi)
[0x7,0] @{asm:=movsl  %ds:(%esi),%es:(%edi)}@ [%rdi{0;64}]{0;32} := [%rsi{0;64}]{0;32} --> (0x7,1);
[0x7,1] << %df{0;1} >> Skip --> (0x7,4); << (NOT %df{0;1}){0;1} >> Skip --> (0x7,2);
[0x7,2] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0x7,3);
[0x7,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0x9,0);
[0x7,4] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0x7,5);
[0x7,5] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0x9,0);
[0x9,0]

**** Decode instruction: movsb  %ds:(%rsi),%es:(%rdi)
[0x9,0] @{asm:=movsb  %ds:(%rsi),%es:(%rdi)}@ [%rdi{0;64}]{0;8} := [%rsi{0;64}]{0;8} --> (0x9,1);
[0x9,1] << %df{0;1} >> Skip --> (0x9,4); << (NOT %df{0;1}){0;1} >> Skip --> (0x9,2);
[0x9,2] %rsi{0;64} := (ADD %rsi{0;64} 0x1{0;64}){0;64} --> (0x9,3);
[0x9,3] %rdi{0;64} := (ADD %rdi{0;64} 0x1{0;64}){0;64} --> (0xa,0);
[0x9,4] %rsi{0;64} := (SUB %rsi{0;64} 0x1{0;64}){0;64} --> (0x9,5);
[0x9,5] %rdi{0;64} := (SUB %rdi{0;64} 0x1{0;64}){0;64} --> (0xa,0);
[0xa,0]

**** Decode instruction: movsw  %ds:(%rsi),%es:(%rdi)
[0xa,0] @{asm:=movsw  %ds:(%rsi),%es:(%rdi)}@ [%rdi{0;64}]{0;16} := [%rsi{0;64}]{0;16} --> (0xa,1);
[0xa,1] << %df{0;1} >> Skip --> (0xa,4); << (NOT %df{0;1}){0;1} >> Skip --> (0xa,2);
[0xa,2] %rsi{0;64} := (ADD %rsi{0;64} 0x2{0;64}){0;64} --> (0xa,3);
[0xa,3] %rdi{0;64} := (ADD %rdi{0;64} 0x2{0;64}){0;64} --> (0xc,0);
[0xa,4] %rsi{0;64} := (SUB %rsi{0;64} 0x2{0;64}){0;64} --> (0xa,5);
[0xa,5] %rdi{0;64} := (SUB %rdi{0;64} 0x2{0;64}){0;64} --> (0xc,0);
[0xc,0]

**** Decode instruction: movsl  %ds:(%rsi),%es:(%rdi)
[0xc,0] @{asm:=movsl  %ds:(%rsi),%es:(%rdi)}@ [%rdi{0;64}]{0;32} := [%rsi{0;64}]{0;32} --> (0xc,1);
[0xc,1] << %df{0;1} >> Skip --> (0xc,4); << (NOT %df{0;1}){0;1} >> Skip --> (0xc,2);
[0xc,2] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0xc,3);
[0xc,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0xd,0);
[0xc,4] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0xc,5);
[0xc,5] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0xd,0);
[0xd,0]

**** Decode instruction: movsl  %ds:(%rsi),%es:(%rdi)
[0xd,0] @{asm:=movsl  %ds:(%rsi),%es:(%rdi)}@ [%rdi{0;64}]{0;32} := [%rsi{0;64}]{0;32} --> (0xd,1);
[0xd,1] << %df{0;1} >> Skip --> (0xd,4); << (NOT %df{0;1}){0;1} >> Skip --> (0xd,2);
[0xd,2] %rsi{0;64} := (ADD %rsi{0;64} 0x4{0;64}){0;64} --> (0xd,3);
[0xd,3] %rdi{0;64} := (ADD %rdi{0;64} 0x4{0;64}){0;64} --> (0xe,0);
[0xd,4] %rsi{0;64} := (SUB %rsi{0;64} 0x4{0;64}){0;64} --> (0xd,5);
[0xd,5] %rdi{0;64} := (SUB %rdi{0;64} 0x4{0;64}){0;64} --> (0xe,0);
[0xe,0]

