**** Decode instruction: rcrb   %cl,0x1111
[(0x0,0)] @{asm:=rcrb   %cl,0x1111}@ StaticArrow (0x0,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x0,1)StaticArrow (0x0,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x0,2)
[(0x0,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{7;1}){0;1}
[(0x0,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x0,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x0,4)] StaticArrow (0x0,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x0,5)StaticArrow (0x0,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x7,0)
[(0x0,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x0,6)] [0x1111{0;64}]{0;8} := (ADD (DIV_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %cf{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0x0,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x0,8)] StaticArrow (0x0,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x0,4)
[(0x7,0)] 

**** Decode instruction: rcrb   $0x7,0x1111
[(0x7,0)] @{asm:=rcrb   $0x7,0x1111}@ StaticArrow (0x7,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x7,1)StaticArrow (0x7,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x7,2)
[(0x7,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{7;1}){0;1}
[(0x7,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x7,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x7,4)] StaticArrow (0x7,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x7,5)StaticArrow (0x7,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf,0)
[(0x7,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x7,6)] [0x1111{0;64}]{0;8} := (ADD (DIV_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %cf{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0x7,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x7,8)] StaticArrow (0x7,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x7,4)
[(0xf,0)] 

**** Decode instruction: rcrw   0x1111
[(0xf,0)] @{asm:=rcrw   0x1111}@ StaticArrow (0xf,0) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xf,1)StaticArrow (0xf,0) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xf,2)
[(0xf,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}
[(0xf,2)] %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xf,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0xf,4)] StaticArrow (0xf,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf,5)StaticArrow (0xf,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x17,0)
[(0xf,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xf,6)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xf,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0xf,8)] StaticArrow (0xf,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xf,4)
[(0x17,0)] 

**** Decode instruction: rcrw   %cl,0x1111
[(0x17,0)] @{asm:=rcrw   %cl,0x1111}@ StaticArrow (0x17,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x17,1)StaticArrow (0x17,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x17,2)
[(0x17,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}
[(0x17,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x17,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x17,4)] StaticArrow (0x17,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x17,5)StaticArrow (0x17,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x1f,0)
[(0x17,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x17,6)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0x17,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x17,8)] StaticArrow (0x17,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x17,4)
[(0x1f,0)] 

**** Decode instruction: rcrw   $0x7,0x1111
[(0x1f,0)] @{asm:=rcrw   $0x7,0x1111}@ StaticArrow (0x1f,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x1f,1)StaticArrow (0x1f,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x1f,2)
[(0x1f,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}
[(0x1f,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x1f,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x1f,4)] StaticArrow (0x1f,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x1f,5)StaticArrow (0x1f,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x28,0)
[(0x1f,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x1f,6)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0x1f,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x1f,8)] StaticArrow (0x1f,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x1f,4)
[(0x28,0)] 

**** Decode instruction: rcrl   0x1111
[(0x28,0)] @{asm:=rcrl   0x1111}@ StaticArrow (0x28,0) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x28,1)StaticArrow (0x28,0) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x28,2)
[(0x28,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}
[(0x28,2)] %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x28,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x28,4)] StaticArrow (0x28,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x28,5)StaticArrow (0x28,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x2f,0)
[(0x28,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x28,6)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x28,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x28,8)] StaticArrow (0x28,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x28,4)
[(0x2f,0)] 

**** Decode instruction: rcrl   %cl,0x1111
[(0x2f,0)] @{asm:=rcrl   %cl,0x1111}@ StaticArrow (0x2f,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x2f,1)StaticArrow (0x2f,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x2f,2)
[(0x2f,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}
[(0x2f,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x2f,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x2f,4)] StaticArrow (0x2f,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x2f,5)StaticArrow (0x2f,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x36,0)
[(0x2f,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x2f,6)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x2f,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x2f,8)] StaticArrow (0x2f,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x2f,4)
[(0x36,0)] 

**** Decode instruction: rcrl   $0x7,0x1111
[(0x36,0)] @{asm:=rcrl   $0x7,0x1111}@ StaticArrow (0x36,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x36,1)StaticArrow (0x36,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x36,2)
[(0x36,1)] %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}
[(0x36,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x36,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x36,4)] StaticArrow (0x36,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x36,5)StaticArrow (0x36,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x3e,0)
[(0x36,5)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0x36,6)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x36,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x36,8)] StaticArrow (0x36,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x36,4)
[(0x3e,0)] 

**** Decode instruction: rcr    %cl,%bh
[(0x3e,0)] @{asm:=rcr    %cl,%bh}@ StaticArrow (0x3e,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x3e,1)StaticArrow (0x3e,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x3e,2)
[(0x3e,1)] %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}
[(0x3e,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x3e,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x3e,4)] StaticArrow (0x3e,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x3e,5)StaticArrow (0x3e,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x40,0)
[(0x3e,5)] %tmpr1_1{0;1} := %rbx{8;1}
[(0x3e,6)] %rbx{8;8} := (ADD (DIV_U %rbx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %cf{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0x3e,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x3e,8)] StaticArrow (0x3e,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x3e,4)
[(0x40,0)] 

**** Decode instruction: rcr    $0x7,%bh
[(0x40,0)] @{asm:=rcr    $0x7,%bh}@ StaticArrow (0x40,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x40,1)StaticArrow (0x40,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x40,2)
[(0x40,1)] %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}
[(0x40,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x40,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x40,4)] StaticArrow (0x40,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x40,5)StaticArrow (0x40,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x43,0)
[(0x40,5)] %tmpr1_1{0;1} := %rbx{8;1}
[(0x40,6)] %rbx{8;8} := (ADD (DIV_U %rbx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %cf{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0x40,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x40,8)] StaticArrow (0x40,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x40,4)
[(0x43,0)] 

**** Decode instruction: rcr    %bx
[(0x43,0)] @{asm:=rcr    %bx}@ StaticArrow (0x43,0) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x43,1)StaticArrow (0x43,0) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x43,2)
[(0x43,1)] %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}
[(0x43,2)] %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x43,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x43,4)] StaticArrow (0x43,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x43,5)StaticArrow (0x43,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x46,0)
[(0x43,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x43,6)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0x43,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x43,8)] StaticArrow (0x43,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x43,4)
[(0x46,0)] 

**** Decode instruction: rcr    %cl,%bx
[(0x46,0)] @{asm:=rcr    %cl,%bx}@ StaticArrow (0x46,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x46,1)StaticArrow (0x46,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x46,2)
[(0x46,1)] %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}
[(0x46,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x46,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x46,4)] StaticArrow (0x46,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x46,5)StaticArrow (0x46,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x49,0)
[(0x46,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x46,6)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0x46,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x46,8)] StaticArrow (0x46,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x46,4)
[(0x49,0)] 

**** Decode instruction: rcr    $0x7,%bx
[(0x49,0)] @{asm:=rcr    $0x7,%bx}@ StaticArrow (0x49,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x49,1)StaticArrow (0x49,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x49,2)
[(0x49,1)] %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}
[(0x49,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x49,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x49,4)] StaticArrow (0x49,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x49,5)StaticArrow (0x49,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x4d,0)
[(0x49,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x49,6)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %cf{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0x49,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x49,8)] StaticArrow (0x49,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x49,4)
[(0x4d,0)] 

**** Decode instruction: rcr    %ebx
[(0x4d,0)] @{asm:=rcr    %ebx}@ StaticArrow (0x4d,0) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x4d,1)StaticArrow (0x4d,0) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x4d,2)
[(0x4d,1)] %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}
[(0x4d,2)] %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x4d,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x4d,4)] StaticArrow (0x4d,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x4d,5)StaticArrow (0x4d,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x4f,0)
[(0x4d,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x4d,6)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x4d,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x4d,8)] StaticArrow (0x4d,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x4d,4)
[(0x4f,0)] 

**** Decode instruction: rcr    %cl,%ebx
[(0x4f,0)] @{asm:=rcr    %cl,%ebx}@ StaticArrow (0x4f,0) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x4f,1)StaticArrow (0x4f,0) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x4f,2)
[(0x4f,1)] %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}
[(0x4f,2)] %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x4f,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x4f,4)] StaticArrow (0x4f,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x4f,5)StaticArrow (0x4f,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x51,0)
[(0x4f,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x4f,6)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x4f,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x4f,8)] StaticArrow (0x4f,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x4f,4)
[(0x51,0)] 

**** Decode instruction: rcr    $0x7,%ebx
[(0x51,0)] @{asm:=rcr    $0x7,%ebx}@ StaticArrow (0x51,0) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x51,1)StaticArrow (0x51,0) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x51,2)
[(0x51,1)] %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}
[(0x51,2)] %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x51,3)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x51,4)] StaticArrow (0x51,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x51,5)StaticArrow (0x51,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x54,0)
[(0x51,5)] %tmpr1_1{0;1} := %rbx{0;1}
[(0x51,6)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %cf{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0x51,7)] %cf{0;1} := %tmpr1_1{0;1}
[(0x51,8)] StaticArrow (0x51,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x51,4)
[(0x54,0)] 

**** Decode instruction: rclb   %cl,0x1111
[(0x54,0)] @{asm:=rclb   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x54,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x54,2)] StaticArrow (0x54,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x54,3)StaticArrow (0x54,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x54,7)
[(0x54,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{7;1}
[(0x54,4)] [0x1111{0;64}]{0;8} := (ADD (MUL_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (EXTEND_U %cf{0;1} 0x8{0;64}){0;8}){0;8}
[(0x54,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x54,6)] StaticArrow (0x54,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x54,2)
[(0x54,7)] StaticArrow (0x54,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x54,8)StaticArrow (0x54,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x5b,0)
[(0x54,8)] StaticArrow (0x54,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{7;1}){0;1}  --> (0x5b,0)
[(0x5b,0)] 

**** Decode instruction: rclb   $0x7,0x1111
[(0x5b,0)] @{asm:=rclb   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x5b,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x5b,2)] StaticArrow (0x5b,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x5b,3)StaticArrow (0x5b,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x5b,7)
[(0x5b,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{7;1}
[(0x5b,4)] [0x1111{0;64}]{0;8} := (ADD (MUL_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (EXTEND_U %cf{0;1} 0x8{0;64}){0;8}){0;8}
[(0x5b,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x5b,6)] StaticArrow (0x5b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x5b,2)
[(0x5b,7)] StaticArrow (0x5b,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x5b,8)StaticArrow (0x5b,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x63,0)
[(0x5b,8)] StaticArrow (0x5b,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{7;1}){0;1}  --> (0x63,0)
[(0x63,0)] 

**** Decode instruction: rclw   0x1111
[(0x63,0)] @{asm:=rclw   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x63,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x63,2)] StaticArrow (0x63,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x63,3)StaticArrow (0x63,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x63,7)
[(0x63,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x63,4)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x63,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x63,6)] StaticArrow (0x63,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x63,2)
[(0x63,7)] StaticArrow (0x63,7) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x63,8)StaticArrow (0x63,7) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x6b,0)
[(0x63,8)] StaticArrow (0x63,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}  --> (0x6b,0)
[(0x6b,0)] 

**** Decode instruction: rclw   %cl,0x1111
[(0x6b,0)] @{asm:=rclw   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x6b,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x6b,2)] StaticArrow (0x6b,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x6b,3)StaticArrow (0x6b,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x6b,7)
[(0x6b,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x6b,4)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x6b,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x6b,6)] StaticArrow (0x6b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x6b,2)
[(0x6b,7)] StaticArrow (0x6b,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x6b,8)StaticArrow (0x6b,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x73,0)
[(0x6b,8)] StaticArrow (0x6b,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}  --> (0x73,0)
[(0x73,0)] 

**** Decode instruction: rclw   $0x7,0x1111
[(0x73,0)] @{asm:=rclw   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x73,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x73,2)] StaticArrow (0x73,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x73,3)StaticArrow (0x73,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x73,7)
[(0x73,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x73,4)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x73,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x73,6)] StaticArrow (0x73,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x73,2)
[(0x73,7)] StaticArrow (0x73,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x73,8)StaticArrow (0x73,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x7c,0)
[(0x73,8)] StaticArrow (0x73,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{15;1}){0;1}  --> (0x7c,0)
[(0x7c,0)] 

**** Decode instruction: rcll   0x1111
[(0x7c,0)] @{asm:=rcll   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x7c,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x7c,2)] StaticArrow (0x7c,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x7c,3)StaticArrow (0x7c,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x7c,7)
[(0x7c,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x7c,4)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0x7c,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x7c,6)] StaticArrow (0x7c,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x7c,2)
[(0x7c,7)] StaticArrow (0x7c,7) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x7c,8)StaticArrow (0x7c,7) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x83,0)
[(0x7c,8)] StaticArrow (0x7c,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}  --> (0x83,0)
[(0x83,0)] 

**** Decode instruction: rcll   %cl,0x1111
[(0x83,0)] @{asm:=rcll   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x83,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x83,2)] StaticArrow (0x83,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x83,3)StaticArrow (0x83,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x83,7)
[(0x83,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x83,4)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0x83,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x83,6)] StaticArrow (0x83,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x83,2)
[(0x83,7)] StaticArrow (0x83,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x83,8)StaticArrow (0x83,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x8a,0)
[(0x83,8)] StaticArrow (0x83,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}  --> (0x8a,0)
[(0x8a,0)] 

**** Decode instruction: rcll   $0x7,0x1111
[(0x8a,0)] @{asm:=rcll   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x8a,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0x8a,2)] StaticArrow (0x8a,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x8a,3)StaticArrow (0x8a,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x8a,7)
[(0x8a,3)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x8a,4)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0x8a,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x8a,6)] StaticArrow (0x8a,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x8a,2)
[(0x8a,7)] StaticArrow (0x8a,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x8a,8)StaticArrow (0x8a,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x92,0)
[(0x8a,8)] StaticArrow (0x8a,8) %of{0;1} := (XOR %cf{0;1} [0x1111{0;64}]{31;1}){0;1}  --> (0x92,0)
[(0x92,0)] 

**** Decode instruction: rcl    %cl,%bh
[(0x92,0)] @{asm:=rcl    %cl,%bh}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x92,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x92,2)] StaticArrow (0x92,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x92,3)StaticArrow (0x92,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x92,7)
[(0x92,3)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x92,4)] %rbx{8;8} := (ADD (MUL_U %rbx{8;8} 0x2{0;8}){0;8} (EXTEND_U %cf{0;1} 0x8{0;64}){0;8}){0;8}
[(0x92,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x92,6)] StaticArrow (0x92,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x92,2)
[(0x92,7)] StaticArrow (0x92,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x92,8)StaticArrow (0x92,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x94,0)
[(0x92,8)] StaticArrow (0x92,8) %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}  --> (0x94,0)
[(0x94,0)] 

**** Decode instruction: rcl    $0x7,%bh
[(0x94,0)] @{asm:=rcl    $0x7,%bh}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x94,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8}){0;8}
[(0x94,2)] StaticArrow (0x94,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x94,3)StaticArrow (0x94,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x94,7)
[(0x94,3)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x94,4)] %rbx{8;8} := (ADD (MUL_U %rbx{8;8} 0x2{0;8}){0;8} (EXTEND_U %cf{0;1} 0x8{0;64}){0;8}){0;8}
[(0x94,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x94,6)] StaticArrow (0x94,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x94,2)
[(0x94,7)] StaticArrow (0x94,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x94,8)StaticArrow (0x94,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x97,0)
[(0x94,8)] StaticArrow (0x94,8) %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}  --> (0x97,0)
[(0x97,0)] 

**** Decode instruction: rcl    %bx
[(0x97,0)] @{asm:=rcl    %bx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x97,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x97,2)] StaticArrow (0x97,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x97,3)StaticArrow (0x97,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x97,7)
[(0x97,3)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x97,4)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x97,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x97,6)] StaticArrow (0x97,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x97,2)
[(0x97,7)] StaticArrow (0x97,7) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x97,8)StaticArrow (0x97,7) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x9a,0)
[(0x97,8)] StaticArrow (0x97,8) %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}  --> (0x9a,0)
[(0x9a,0)] 

**** Decode instruction: rcl    %cl,%bx
[(0x9a,0)] @{asm:=rcl    %cl,%bx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x9a,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x9a,2)] StaticArrow (0x9a,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x9a,3)StaticArrow (0x9a,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x9a,7)
[(0x9a,3)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x9a,4)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x9a,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x9a,6)] StaticArrow (0x9a,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x9a,2)
[(0x9a,7)] StaticArrow (0x9a,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x9a,8)StaticArrow (0x9a,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x9d,0)
[(0x9a,8)] StaticArrow (0x9a,8) %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}  --> (0x9d,0)
[(0x9d,0)] 

**** Decode instruction: rcl    $0x7,%bx
[(0x9d,0)] @{asm:=rcl    $0x7,%bx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x9d,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8}){0;8}
[(0x9d,2)] StaticArrow (0x9d,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x9d,3)StaticArrow (0x9d,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x9d,7)
[(0x9d,3)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x9d,4)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %cf{0;1} 0x10{0;64}){0;16}){0;16}
[(0x9d,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0x9d,6)] StaticArrow (0x9d,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x9d,2)
[(0x9d,7)] StaticArrow (0x9d,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x9d,8)StaticArrow (0x9d,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xa1,0)
[(0x9d,8)] StaticArrow (0x9d,8) %of{0;1} := (XOR %cf{0;1} %rbx{15;1}){0;1}  --> (0xa1,0)
[(0xa1,0)] 

**** Decode instruction: rcl    %ebx
[(0xa1,0)] @{asm:=rcl    %ebx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xa1,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0xa1,2)] StaticArrow (0xa1,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xa1,3)StaticArrow (0xa1,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xa1,7)
[(0xa1,3)] %tmpr1_1{0;1} := %rbx{31;1}
[(0xa1,4)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0xa1,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0xa1,6)] StaticArrow (0xa1,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xa1,2)
[(0xa1,7)] StaticArrow (0xa1,7) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xa1,8)StaticArrow (0xa1,7) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xa3,0)
[(0xa1,8)] StaticArrow (0xa1,8) %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}  --> (0xa3,0)
[(0xa3,0)] 

**** Decode instruction: rcl    %cl,%ebx
[(0xa3,0)] @{asm:=rcl    %cl,%ebx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xa3,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0xa3,2)] StaticArrow (0xa3,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xa3,3)StaticArrow (0xa3,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xa3,7)
[(0xa3,3)] %tmpr1_1{0;1} := %rbx{31;1}
[(0xa3,4)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0xa3,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0xa3,6)] StaticArrow (0xa3,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xa3,2)
[(0xa3,7)] StaticArrow (0xa3,7) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xa3,8)StaticArrow (0xa3,7) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xa5,0)
[(0xa3,8)] StaticArrow (0xa3,8) %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}  --> (0xa5,0)
[(0xa5,0)] 

**** Decode instruction: rcl    $0x7,%ebx
[(0xa5,0)] @{asm:=rcl    $0x7,%ebx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xa5,1)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8}){0;8}
[(0xa5,2)] StaticArrow (0xa5,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xa5,3)StaticArrow (0xa5,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xa5,7)
[(0xa5,3)] %tmpr1_1{0;1} := %rbx{31;1}
[(0xa5,4)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %cf{0;1} 0x20{0;64}){0;32}){0;32}
[(0xa5,5)] %cf{0;1} := %tmpr1_1{0;1}
[(0xa5,6)] StaticArrow (0xa5,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xa5,2)
[(0xa5,7)] StaticArrow (0xa5,7) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xa5,8)StaticArrow (0xa5,7) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xa8,0)
[(0xa5,8)] StaticArrow (0xa5,8) %of{0;1} := (XOR %cf{0;1} %rbx{31;1}){0;1}  --> (0xa8,0)
[(0xa8,0)] 

**** Decode instruction: rorb   %cl,0x1111
[(0xa8,0)] @{asm:=rorb   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xa8,1)] StaticArrow (0xa8,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xa8,2)StaticArrow (0xa8,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xaf,0)
[(0xa8,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0xa8,3)] StaticArrow (0xa8,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xa8,4)StaticArrow (0xa8,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xa8,7)
[(0xa8,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xa8,5)] [0x1111{0;64}]{0;8} := (ADD (DIV_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0xa8,6)] StaticArrow (0xa8,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xa8,3)
[(0xa8,7)] %cf{0;1} := [0x1111{0;64}]{7;1}
[(0xa8,8)] StaticArrow (0xa8,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xa8,9)StaticArrow (0xa8,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xaf,0)
[(0xa8,9)] StaticArrow (0xa8,9) %of{0;1} := (XOR [0x1111{0;64}]{7;1} [0x1111{0;64}]{6;1}){0;1}  --> (0xaf,0)
[(0xaf,0)] 

**** Decode instruction: rorb   $0x7,0x1111
[(0xaf,0)] @{asm:=rorb   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xaf,1)] StaticArrow (0xaf,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xaf,2)StaticArrow (0xaf,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xb7,0)
[(0xaf,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0xaf,3)] StaticArrow (0xaf,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xaf,4)StaticArrow (0xaf,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xaf,7)
[(0xaf,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xaf,5)] [0x1111{0;64}]{0;8} := (ADD (DIV_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0xaf,6)] StaticArrow (0xaf,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xaf,3)
[(0xaf,7)] %cf{0;1} := [0x1111{0;64}]{7;1}
[(0xaf,8)] StaticArrow (0xaf,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xaf,9)StaticArrow (0xaf,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xb7,0)
[(0xaf,9)] StaticArrow (0xaf,9) %of{0;1} := (XOR [0x1111{0;64}]{7;1} [0x1111{0;64}]{6;1}){0;1}  --> (0xb7,0)
[(0xb7,0)] 

**** Decode instruction: rorw   0x1111
[(0xb7,0)] @{asm:=rorw   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xb7,1)] StaticArrow (0xb7,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xb7,2)StaticArrow (0xb7,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xbf,0)
[(0xb7,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xb7,3)] StaticArrow (0xb7,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xb7,4)StaticArrow (0xb7,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xb7,7)
[(0xb7,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xb7,5)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xb7,6)] StaticArrow (0xb7,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xb7,3)
[(0xb7,7)] %cf{0;1} := [0x1111{0;64}]{15;1}
[(0xb7,8)] StaticArrow (0xb7,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xb7,9)StaticArrow (0xb7,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xbf,0)
[(0xb7,9)] StaticArrow (0xb7,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0xbf,0)
[(0xbf,0)] 

**** Decode instruction: rorw   %cl,0x1111
[(0xbf,0)] @{asm:=rorw   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xbf,1)] StaticArrow (0xbf,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xbf,2)StaticArrow (0xbf,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xc7,0)
[(0xbf,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xbf,3)] StaticArrow (0xbf,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xbf,4)StaticArrow (0xbf,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xbf,7)
[(0xbf,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xbf,5)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xbf,6)] StaticArrow (0xbf,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xbf,3)
[(0xbf,7)] %cf{0;1} := [0x1111{0;64}]{15;1}
[(0xbf,8)] StaticArrow (0xbf,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xbf,9)StaticArrow (0xbf,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xc7,0)
[(0xbf,9)] StaticArrow (0xbf,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0xc7,0)
[(0xc7,0)] 

**** Decode instruction: rorw   $0x7,0x1111
[(0xc7,0)] @{asm:=rorw   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xc7,1)] StaticArrow (0xc7,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xc7,2)StaticArrow (0xc7,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xd0,0)
[(0xc7,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xc7,3)] StaticArrow (0xc7,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xc7,4)StaticArrow (0xc7,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xc7,7)
[(0xc7,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xc7,5)] [0x1111{0;64}]{0;16} := (ADD (DIV_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xc7,6)] StaticArrow (0xc7,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xc7,3)
[(0xc7,7)] %cf{0;1} := [0x1111{0;64}]{15;1}
[(0xc7,8)] StaticArrow (0xc7,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xc7,9)StaticArrow (0xc7,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xd0,0)
[(0xc7,9)] StaticArrow (0xc7,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0xd0,0)
[(0xd0,0)] 

**** Decode instruction: rorl   0x1111
[(0xd0,0)] @{asm:=rorl   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xd0,1)] StaticArrow (0xd0,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xd0,2)StaticArrow (0xd0,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xd7,0)
[(0xd0,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xd0,3)] StaticArrow (0xd0,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xd0,4)StaticArrow (0xd0,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xd0,7)
[(0xd0,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xd0,5)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xd0,6)] StaticArrow (0xd0,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xd0,3)
[(0xd0,7)] %cf{0;1} := [0x1111{0;64}]{31;1}
[(0xd0,8)] StaticArrow (0xd0,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xd0,9)StaticArrow (0xd0,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xd7,0)
[(0xd0,9)] StaticArrow (0xd0,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0xd7,0)
[(0xd7,0)] 

**** Decode instruction: rorl   %cl,0x1111
[(0xd7,0)] @{asm:=rorl   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xd7,1)] StaticArrow (0xd7,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xd7,2)StaticArrow (0xd7,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xde,0)
[(0xd7,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xd7,3)] StaticArrow (0xd7,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xd7,4)StaticArrow (0xd7,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xd7,7)
[(0xd7,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xd7,5)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xd7,6)] StaticArrow (0xd7,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xd7,3)
[(0xd7,7)] %cf{0;1} := [0x1111{0;64}]{31;1}
[(0xd7,8)] StaticArrow (0xd7,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xd7,9)StaticArrow (0xd7,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xde,0)
[(0xd7,9)] StaticArrow (0xd7,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0xde,0)
[(0xde,0)] 

**** Decode instruction: rorl   $0x7,0x1111
[(0xde,0)] @{asm:=rorl   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xde,1)] StaticArrow (0xde,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xde,2)StaticArrow (0xde,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xe6,0)
[(0xde,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xde,3)] StaticArrow (0xde,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xde,4)StaticArrow (0xde,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xde,7)
[(0xde,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{0;1}
[(0xde,5)] [0x1111{0;64}]{0;32} := (ADD (DIV_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xde,6)] StaticArrow (0xde,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xde,3)
[(0xde,7)] %cf{0;1} := [0x1111{0;64}]{31;1}
[(0xde,8)] StaticArrow (0xde,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xde,9)StaticArrow (0xde,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xe6,0)
[(0xde,9)] StaticArrow (0xde,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0xe6,0)
[(0xe6,0)] 

**** Decode instruction: ror    %cl,%bh
[(0xe6,0)] @{asm:=ror    %cl,%bh}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xe6,1)] StaticArrow (0xe6,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xe6,2)StaticArrow (0xe6,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xe8,0)
[(0xe6,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0xe6,3)] StaticArrow (0xe6,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xe6,4)StaticArrow (0xe6,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xe6,7)
[(0xe6,4)] %tmpr1_1{0;1} := %rbx{8;1}
[(0xe6,5)] %rbx{8;8} := (ADD (DIV_U %rbx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0xe6,6)] StaticArrow (0xe6,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xe6,3)
[(0xe6,7)] %cf{0;1} := %rbx{15;1}
[(0xe6,8)] StaticArrow (0xe6,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xe6,9)StaticArrow (0xe6,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xe8,0)
[(0xe6,9)] StaticArrow (0xe6,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0xe8,0)
[(0xe8,0)] 

**** Decode instruction: ror    $0x7,%bh
[(0xe8,0)] @{asm:=ror    $0x7,%bh}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xe8,1)] StaticArrow (0xe8,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xe8,2)StaticArrow (0xe8,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xeb,0)
[(0xe8,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0xe8,3)] StaticArrow (0xe8,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xe8,4)StaticArrow (0xe8,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xe8,7)
[(0xe8,4)] %tmpr1_1{0;1} := %rbx{8;1}
[(0xe8,5)] %rbx{8;8} := (ADD (DIV_U %rbx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8} 0x80{0;8}){0;8}){0;8}
[(0xe8,6)] StaticArrow (0xe8,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xe8,3)
[(0xe8,7)] %cf{0;1} := %rbx{15;1}
[(0xe8,8)] StaticArrow (0xe8,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xe8,9)StaticArrow (0xe8,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xeb,0)
[(0xe8,9)] StaticArrow (0xe8,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0xeb,0)
[(0xeb,0)] 

**** Decode instruction: ror    %bx
[(0xeb,0)] @{asm:=ror    %bx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xeb,1)] StaticArrow (0xeb,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xeb,2)StaticArrow (0xeb,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xee,0)
[(0xeb,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xeb,3)] StaticArrow (0xeb,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xeb,4)StaticArrow (0xeb,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xeb,7)
[(0xeb,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xeb,5)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xeb,6)] StaticArrow (0xeb,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xeb,3)
[(0xeb,7)] %cf{0;1} := %rbx{15;1}
[(0xeb,8)] StaticArrow (0xeb,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xeb,9)StaticArrow (0xeb,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xee,0)
[(0xeb,9)] StaticArrow (0xeb,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0xee,0)
[(0xee,0)] 

**** Decode instruction: ror    %cl,%bx
[(0xee,0)] @{asm:=ror    %cl,%bx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xee,1)] StaticArrow (0xee,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xee,2)StaticArrow (0xee,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf1,0)
[(0xee,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xee,3)] StaticArrow (0xee,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xee,4)StaticArrow (0xee,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xee,7)
[(0xee,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xee,5)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xee,6)] StaticArrow (0xee,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xee,3)
[(0xee,7)] %cf{0;1} := %rbx{15;1}
[(0xee,8)] StaticArrow (0xee,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xee,9)StaticArrow (0xee,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xf1,0)
[(0xee,9)] StaticArrow (0xee,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0xf1,0)
[(0xf1,0)] 

**** Decode instruction: ror    $0x7,%bx
[(0xf1,0)] @{asm:=ror    $0x7,%bx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xf1,1)] StaticArrow (0xf1,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf1,2)StaticArrow (0xf1,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf5,0)
[(0xf1,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0xf1,3)] StaticArrow (0xf1,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf1,4)StaticArrow (0xf1,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf1,7)
[(0xf1,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xf1,5)] %rbx{0;16} := (ADD (DIV_U %rbx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16} 0x8000{0;16}){0;16}){0;16}
[(0xf1,6)] StaticArrow (0xf1,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xf1,3)
[(0xf1,7)] %cf{0;1} := %rbx{15;1}
[(0xf1,8)] StaticArrow (0xf1,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xf1,9)StaticArrow (0xf1,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xf5,0)
[(0xf1,9)] StaticArrow (0xf1,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0xf5,0)
[(0xf5,0)] 

**** Decode instruction: ror    %ebx
[(0xf5,0)] @{asm:=ror    %ebx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0xf5,1)] StaticArrow (0xf5,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf5,2)StaticArrow (0xf5,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf7,0)
[(0xf5,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xf5,3)] StaticArrow (0xf5,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf5,4)StaticArrow (0xf5,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf5,7)
[(0xf5,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xf5,5)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xf5,6)] StaticArrow (0xf5,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xf5,3)
[(0xf5,7)] %cf{0;1} := %rbx{31;1}
[(0xf5,8)] StaticArrow (0xf5,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0xf5,9)StaticArrow (0xf5,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xf7,0)
[(0xf5,9)] StaticArrow (0xf5,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0xf7,0)
[(0xf7,0)] 

**** Decode instruction: ror    %cl,%ebx
[(0xf7,0)] @{asm:=ror    %cl,%ebx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xf7,1)] StaticArrow (0xf7,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf7,2)StaticArrow (0xf7,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf9,0)
[(0xf7,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xf7,3)] StaticArrow (0xf7,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf7,4)StaticArrow (0xf7,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf7,7)
[(0xf7,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xf7,5)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xf7,6)] StaticArrow (0xf7,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xf7,3)
[(0xf7,7)] %cf{0;1} := %rbx{31;1}
[(0xf7,8)] StaticArrow (0xf7,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xf7,9)StaticArrow (0xf7,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xf9,0)
[(0xf7,9)] StaticArrow (0xf7,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0xf9,0)
[(0xf9,0)] 

**** Decode instruction: ror    $0x7,%ebx
[(0xf9,0)] @{asm:=ror    $0x7,%ebx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0xf9,1)] StaticArrow (0xf9,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf9,2)StaticArrow (0xf9,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xfc,0)
[(0xf9,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0xf9,3)] StaticArrow (0xf9,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xf9,4)StaticArrow (0xf9,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xf9,7)
[(0xf9,4)] %tmpr1_1{0;1} := %rbx{0;1}
[(0xf9,5)] %rbx{0;32} := (ADD (DIV_U %rbx{0;32} 0x2{0;32}){0;32} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32} 0x80000000{0;32}){0;32}){0;32}
[(0xf9,6)] StaticArrow (0xf9,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xf9,3)
[(0xf9,7)] %cf{0;1} := %rbx{31;1}
[(0xf9,8)] StaticArrow (0xf9,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0xf9,9)StaticArrow (0xf9,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0xfc,0)
[(0xf9,9)] StaticArrow (0xf9,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0xfc,0)
[(0xfc,0)] 

**** Decode instruction: rolb   %cl,0x1111
[(0xfc,0)] @{asm:=rolb   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0xfc,1)] StaticArrow (0xfc,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xfc,2)StaticArrow (0xfc,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x103,0)
[(0xfc,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0xfc,3)] StaticArrow (0xfc,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xfc,4)StaticArrow (0xfc,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xfc,7)
[(0xfc,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{7;1}
[(0xfc,5)] [0x1111{0;64}]{0;8} := (ADD (MUL_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8}){0;8}
[(0xfc,6)] StaticArrow (0xfc,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xfc,3)
[(0xfc,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0xfc,8)] StaticArrow (0xfc,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0xfc,9)StaticArrow (0xfc,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x103,0)
[(0xfc,9)] StaticArrow (0xfc,9) %of{0;1} := (XOR [0x1111{0;64}]{7;1} [0x1111{0;64}]{6;1}){0;1}  --> (0x103,0)
[(0x103,0)] 

**** Decode instruction: rolb   $0x7,0x1111
[(0x103,0)] @{asm:=rolb   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x103,1)] StaticArrow (0x103,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x103,2)StaticArrow (0x103,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x10b,0)
[(0x103,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0x103,3)] StaticArrow (0x103,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x103,4)StaticArrow (0x103,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x103,7)
[(0x103,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{7;1}
[(0x103,5)] [0x1111{0;64}]{0;8} := (ADD (MUL_U [0x1111{0;64}]{0;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8}){0;8}
[(0x103,6)] StaticArrow (0x103,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x103,3)
[(0x103,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x103,8)] StaticArrow (0x103,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x103,9)StaticArrow (0x103,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x10b,0)
[(0x103,9)] StaticArrow (0x103,9) %of{0;1} := (XOR [0x1111{0;64}]{7;1} [0x1111{0;64}]{6;1}){0;1}  --> (0x10b,0)
[(0x10b,0)] 

**** Decode instruction: rolw   0x1111
[(0x10b,0)] @{asm:=rolw   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x10b,1)] StaticArrow (0x10b,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x10b,2)StaticArrow (0x10b,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x113,0)
[(0x10b,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x10b,3)] StaticArrow (0x10b,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x10b,4)StaticArrow (0x10b,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x10b,7)
[(0x10b,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x10b,5)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x10b,6)] StaticArrow (0x10b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x10b,3)
[(0x10b,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x10b,8)] StaticArrow (0x10b,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x10b,9)StaticArrow (0x10b,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x113,0)
[(0x10b,9)] StaticArrow (0x10b,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0x113,0)
[(0x113,0)] 

**** Decode instruction: rolw   %cl,0x1111
[(0x113,0)] @{asm:=rolw   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x113,1)] StaticArrow (0x113,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x113,2)StaticArrow (0x113,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11b,0)
[(0x113,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x113,3)] StaticArrow (0x113,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x113,4)StaticArrow (0x113,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x113,7)
[(0x113,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x113,5)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x113,6)] StaticArrow (0x113,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x113,3)
[(0x113,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x113,8)] StaticArrow (0x113,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x113,9)StaticArrow (0x113,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x11b,0)
[(0x113,9)] StaticArrow (0x113,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0x11b,0)
[(0x11b,0)] 

**** Decode instruction: rolw   $0x7,0x1111
[(0x11b,0)] @{asm:=rolw   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x11b,1)] StaticArrow (0x11b,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11b,2)StaticArrow (0x11b,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x124,0)
[(0x11b,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x11b,3)] StaticArrow (0x11b,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11b,4)StaticArrow (0x11b,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11b,7)
[(0x11b,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{15;1}
[(0x11b,5)] [0x1111{0;64}]{0;16} := (ADD (MUL_U [0x1111{0;64}]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x11b,6)] StaticArrow (0x11b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x11b,3)
[(0x11b,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x11b,8)] StaticArrow (0x11b,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x11b,9)StaticArrow (0x11b,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x124,0)
[(0x11b,9)] StaticArrow (0x11b,9) %of{0;1} := (XOR [0x1111{0;64}]{15;1} [0x1111{0;64}]{14;1}){0;1}  --> (0x124,0)
[(0x124,0)] 

**** Decode instruction: roll   0x1111
[(0x124,0)] @{asm:=roll   0x1111}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x124,1)] StaticArrow (0x124,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x124,2)StaticArrow (0x124,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12b,0)
[(0x124,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x124,3)] StaticArrow (0x124,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x124,4)StaticArrow (0x124,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x124,7)
[(0x124,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x124,5)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x124,6)] StaticArrow (0x124,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x124,3)
[(0x124,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x124,8)] StaticArrow (0x124,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x124,9)StaticArrow (0x124,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x12b,0)
[(0x124,9)] StaticArrow (0x124,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0x12b,0)
[(0x12b,0)] 

**** Decode instruction: roll   %cl,0x1111
[(0x12b,0)] @{asm:=roll   %cl,0x1111}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x12b,1)] StaticArrow (0x12b,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12b,2)StaticArrow (0x12b,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x132,0)
[(0x12b,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x12b,3)] StaticArrow (0x12b,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12b,4)StaticArrow (0x12b,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12b,7)
[(0x12b,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x12b,5)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x12b,6)] StaticArrow (0x12b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x12b,3)
[(0x12b,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x12b,8)] StaticArrow (0x12b,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x12b,9)StaticArrow (0x12b,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x132,0)
[(0x12b,9)] StaticArrow (0x12b,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0x132,0)
[(0x132,0)] 

**** Decode instruction: roll   $0x7,0x1111
[(0x132,0)] @{asm:=roll   $0x7,0x1111}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x132,1)] StaticArrow (0x132,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x132,2)StaticArrow (0x132,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13a,0)
[(0x132,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x132,3)] StaticArrow (0x132,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x132,4)StaticArrow (0x132,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x132,7)
[(0x132,4)] %tmpr1_1{0;1} := [0x1111{0;64}]{31;1}
[(0x132,5)] [0x1111{0;64}]{0;32} := (ADD (MUL_U [0x1111{0;64}]{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x132,6)] StaticArrow (0x132,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x132,3)
[(0x132,7)] %cf{0;1} := [0x1111{0;64}]{0;1}
[(0x132,8)] StaticArrow (0x132,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x132,9)StaticArrow (0x132,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x13a,0)
[(0x132,9)] StaticArrow (0x132,9) %of{0;1} := (XOR [0x1111{0;64}]{31;1} [0x1111{0;64}]{30;1}){0;1}  --> (0x13a,0)
[(0x13a,0)] 

**** Decode instruction: rol    %cl,%bh
[(0x13a,0)] @{asm:=rol    %cl,%bh}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x13a,1)] StaticArrow (0x13a,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13a,2)StaticArrow (0x13a,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13c,0)
[(0x13a,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0x13a,3)] StaticArrow (0x13a,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13a,4)StaticArrow (0x13a,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13a,7)
[(0x13a,4)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x13a,5)] %rbx{8;8} := (ADD (MUL_U %rbx{8;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8}){0;8}
[(0x13a,6)] StaticArrow (0x13a,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x13a,3)
[(0x13a,7)] %cf{0;1} := %rbx{8;1}
[(0x13a,8)] StaticArrow (0x13a,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x13a,9)StaticArrow (0x13a,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x13c,0)
[(0x13a,9)] StaticArrow (0x13a,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0x13c,0)
[(0x13c,0)] 

**** Decode instruction: rol    $0x7,%bh
[(0x13c,0)] @{asm:=rol    $0x7,%bh}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x13c,1)] StaticArrow (0x13c,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13c,2)StaticArrow (0x13c,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13f,0)
[(0x13c,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8}){0;8}
[(0x13c,3)] StaticArrow (0x13c,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13c,4)StaticArrow (0x13c,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13c,7)
[(0x13c,4)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x13c,5)] %rbx{8;8} := (ADD (MUL_U %rbx{8;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8{0;64}){0;8}){0;8}
[(0x13c,6)] StaticArrow (0x13c,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x13c,3)
[(0x13c,7)] %cf{0;1} := %rbx{8;1}
[(0x13c,8)] StaticArrow (0x13c,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x13c,9)StaticArrow (0x13c,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x13f,0)
[(0x13c,9)] StaticArrow (0x13c,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0x13f,0)
[(0x13f,0)] 

**** Decode instruction: rol    %bx
[(0x13f,0)] @{asm:=rol    %bx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x13f,1)] StaticArrow (0x13f,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13f,2)StaticArrow (0x13f,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x142,0)
[(0x13f,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x13f,3)] StaticArrow (0x13f,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x13f,4)StaticArrow (0x13f,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x13f,7)
[(0x13f,4)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x13f,5)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x13f,6)] StaticArrow (0x13f,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x13f,3)
[(0x13f,7)] %cf{0;1} := %rbx{0;1}
[(0x13f,8)] StaticArrow (0x13f,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x13f,9)StaticArrow (0x13f,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x142,0)
[(0x13f,9)] StaticArrow (0x13f,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0x142,0)
[(0x142,0)] 

**** Decode instruction: rol    %cl,%bx
[(0x142,0)] @{asm:=rol    %cl,%bx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x142,1)] StaticArrow (0x142,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x142,2)StaticArrow (0x142,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x145,0)
[(0x142,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x142,3)] StaticArrow (0x142,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x142,4)StaticArrow (0x142,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x142,7)
[(0x142,4)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x142,5)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x142,6)] StaticArrow (0x142,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x142,3)
[(0x142,7)] %cf{0;1} := %rbx{0;1}
[(0x142,8)] StaticArrow (0x142,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x142,9)StaticArrow (0x142,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x145,0)
[(0x142,9)] StaticArrow (0x142,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0x145,0)
[(0x145,0)] 

**** Decode instruction: rol    $0x7,%bx
[(0x145,0)] @{asm:=rol    $0x7,%bx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x145,1)] StaticArrow (0x145,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x145,2)StaticArrow (0x145,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x149,0)
[(0x145,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8}){0;8}
[(0x145,3)] StaticArrow (0x145,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x145,4)StaticArrow (0x145,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x145,7)
[(0x145,4)] %tmpr1_1{0;1} := %rbx{15;1}
[(0x145,5)] %rbx{0;16} := (ADD (MUL_U %rbx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10{0;64}){0;16}){0;16}
[(0x145,6)] StaticArrow (0x145,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x145,3)
[(0x145,7)] %cf{0;1} := %rbx{0;1}
[(0x145,8)] StaticArrow (0x145,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x145,9)StaticArrow (0x145,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x149,0)
[(0x145,9)] StaticArrow (0x145,9) %of{0;1} := (XOR %rbx{15;1} %rbx{14;1}){0;1}  --> (0x149,0)
[(0x149,0)] 

**** Decode instruction: rol    %ebx
[(0x149,0)] @{asm:=rol    %ebx}@ %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1f{0;8}){0;8}
[(0x149,1)] StaticArrow (0x149,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x149,2)StaticArrow (0x149,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x14b,0)
[(0x149,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x149,3)] StaticArrow (0x149,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x149,4)StaticArrow (0x149,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x149,7)
[(0x149,4)] %tmpr1_1{0;1} := %rbx{31;1}
[(0x149,5)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x149,6)] StaticArrow (0x149,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x149,3)
[(0x149,7)] %cf{0;1} := %rbx{0;1}
[(0x149,8)] StaticArrow (0x149,8) Skip << (EQ 0x1{0;64} 0x1{0;64}){0;1} >> --> (0x149,9)StaticArrow (0x149,8) Skip << (NOT (EQ 0x1{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x14b,0)
[(0x149,9)] StaticArrow (0x149,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0x14b,0)
[(0x14b,0)] 

**** Decode instruction: rol    %cl,%ebx
[(0x14b,0)] @{asm:=rol    %cl,%ebx}@ %tmpr0_8{0;8} := (AND %rcx{0;8} 0x1f{0;8}){0;8}
[(0x14b,1)] StaticArrow (0x14b,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x14b,2)StaticArrow (0x14b,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x14d,0)
[(0x14b,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x14b,3)] StaticArrow (0x14b,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x14b,4)StaticArrow (0x14b,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x14b,7)
[(0x14b,4)] %tmpr1_1{0;1} := %rbx{31;1}
[(0x14b,5)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x14b,6)] StaticArrow (0x14b,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x14b,3)
[(0x14b,7)] %cf{0;1} := %rbx{0;1}
[(0x14b,8)] StaticArrow (0x14b,8) Skip << (EQ %rcx{0;8} 0x1{0;8}){0;1} >> --> (0x14b,9)StaticArrow (0x14b,8) Skip << (NOT (EQ %rcx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x14d,0)
[(0x14b,9)] StaticArrow (0x14b,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0x14d,0)
[(0x14d,0)] 

**** Decode instruction: rol    $0x7,%ebx
[(0x14d,0)] @{asm:=rol    $0x7,%ebx}@ %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1f{0;8}){0;8}
[(0x14d,1)] StaticArrow (0x14d,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x14d,2)StaticArrow (0x14d,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x150,0)
[(0x14d,2)] %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8}){0;8}
[(0x14d,3)] StaticArrow (0x14d,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x14d,4)StaticArrow (0x14d,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x14d,7)
[(0x14d,4)] %tmpr1_1{0;1} := %rbx{31;1}
[(0x14d,5)] %rbx{0;32} := (ADD (MUL_U %rbx{0;32} 0x2{0;32}){0;32} (EXTEND_U %tmpr1_1{0;1} 0x20{0;64}){0;32}){0;32}
[(0x14d,6)] StaticArrow (0x14d,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x14d,3)
[(0x14d,7)] %cf{0;1} := %rbx{0;1}
[(0x14d,8)] StaticArrow (0x14d,8) Skip << (EQ 0x7{0;64} 0x1{0;64}){0;1} >> --> (0x14d,9)StaticArrow (0x14d,8) Skip << (NOT (EQ 0x7{0;64} 0x1{0;64}){0;1}){0;1} >> --> (0x150,0)
[(0x14d,9)] StaticArrow (0x14d,9) %of{0;1} := (XOR %rbx{31;1} %rbx{30;1}){0;1}  --> (0x150,0)
[(0x150,0)] 

