**** Decode instruction: shl    %bh
[(0x0,0)] @{asm:=shl    %bh}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x0,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x0,2)] ; StaticArrow (0x0,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x2,0); StaticArrow (0x0,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x0,3)
[(0x0,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_32)
[(0x0,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_32)){0;1}
[(0x0,5)] ; StaticArrow (0x0,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x2,0); StaticArrow (0x0,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x0,6)
[(0x0,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0x0,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x0,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x0,9)] ; StaticArrow (0x0,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x2,0)
[(0x2,0)] 

**** Decode instruction: shlb   0x12345678
[(0x2,0)] @{asm:=shlb   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x2,1)] ; %tmpr1_32 := [0x12345678]
[(0x2,2)] ; StaticArrow (0x2,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x8,0); StaticArrow (0x2,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x2,3)
[(0x2,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x2,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x2,5)] ; StaticArrow (0x2,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x8,0); StaticArrow (0x2,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x2,6)
[(0x2,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x2,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x2,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x2,9)] ; StaticArrow (0x2,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x8,0)
[(0x8,0)] 

**** Decode instruction: shl    %cl,%bh
[(0x8,0)] @{asm:=shl    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x8,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x8,2)] ; StaticArrow (0x8,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xA,0); StaticArrow (0x8,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x8,3)
[(0x8,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_8{0;8})
[(0x8,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0x8,5)] ; StaticArrow (0x8,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA,0); StaticArrow (0x8,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x8,6)
[(0x8,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0x8,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x8,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x8,9)] ; StaticArrow (0x8,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0xA,0)
[(0xA,0)] 

**** Decode instruction: shl    %cl,%ch
[(0xA,0)] @{asm:=shl    %cl,%ch}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xA,1)] ; %tmpr1_8{0;8} := %ecx{8;8}
[(0xA,2)] ; StaticArrow (0xA,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xC,0); StaticArrow (0xA,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xA,3)
[(0xA,3)] ; %ecx{8;8} := (LSH %ecx{8;8} %tmpr0_8{0;8})
[(0xA,4)] ; %eflags{0;1} := (RSH %ecx{8;8} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0xA,5)] ; StaticArrow (0xA,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC,0); StaticArrow (0xA,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA,6)
[(0xA,6)] ; %eflags{11;1} := (XOR %ecx{8;8} %eflags{0;1}){0;1}
[(0xA,7)] ; %eflags{7;1} := %ecx{7;1}
[(0xA,8)] ; %eflags{6;1} := (EQ %ecx{8;8} 0x0{0;8}){0;1}
[(0xA,9)] ; StaticArrow (0xA,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{8;1}){0;1} %ecx{9;1}){0;1} %ecx{10;1}){0;1} %ecx{11;1}){0;1} %ecx{12;1}){0;1} %ecx{13;1}){0;1} %ecx{14;1}){0;1} %ecx{15;1}){0;1}  --> (0xC,0)
[(0xC,0)] 

**** Decode instruction: shlb   %cl,0x12345678
[(0xC,0)] @{asm:=shlb   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0xC,1)] ; %tmpr1_32 := [0x12345678]
[(0xC,2)] ; StaticArrow (0xC,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x12,0); StaticArrow (0xC,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xC,3)
[(0xC,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0xC,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0xC,5)] ; StaticArrow (0xC,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x12,0); StaticArrow (0xC,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC,6)
[(0xC,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xC,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xC,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xC,9)] ; StaticArrow (0xC,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x12,0)
[(0x12,0)] 

**** Decode instruction: shl    $0x3,%bh
[(0x12,0)] @{asm:=shl    $0x3,%bh}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x12,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x12,2)] ; StaticArrow (0x12,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x15,0); StaticArrow (0x12,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x12,3)
[(0x12,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_32)
[(0x12,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_32)){0;1}
[(0x12,5)] ; StaticArrow (0x12,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x15,0); StaticArrow (0x12,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x12,6)
[(0x12,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0x12,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x12,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x12,9)] ; StaticArrow (0x12,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x15,0)
[(0x15,0)] 

**** Decode instruction: shlb   $0x3,0x12345678
[(0x15,0)] @{asm:=shlb   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x15,1)] ; %tmpr1_32 := [0x12345678]
[(0x15,2)] ; StaticArrow (0x15,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x1C,0); StaticArrow (0x15,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x15,3)
[(0x15,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x15,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x15,5)] ; StaticArrow (0x15,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x1C,0); StaticArrow (0x15,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x15,6)
[(0x15,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x15,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x15,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x15,9)] ; StaticArrow (0x15,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x1C,0)
[(0x1C,0)] 

**** Decode instruction: shl    %bx
[(0x1C,0)] @{asm:=shl    %bx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x1C,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x1C,2)] ; StaticArrow (0x1C,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x1F,0); StaticArrow (0x1C,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x1C,3)
[(0x1C,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_32)
[(0x1C,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_32)){0;1}
[(0x1C,5)] ; StaticArrow (0x1C,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x1F,0); StaticArrow (0x1C,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x1C,6)
[(0x1C,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0x1C,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x1C,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x1C,9)] ; StaticArrow (0x1C,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x1F,0)
[(0x1F,0)] 

**** Decode instruction: shlw   0x12345678
[(0x1F,0)] @{asm:=shlw   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x1F,1)] ; %tmpr1_32 := [0x12345678]
[(0x1F,2)] ; StaticArrow (0x1F,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x26,0); StaticArrow (0x1F,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x1F,3)
[(0x1F,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x1F,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x1F,5)] ; StaticArrow (0x1F,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x26,0); StaticArrow (0x1F,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x1F,6)
[(0x1F,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x1F,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x1F,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x1F,9)] ; StaticArrow (0x1F,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x26,0)
[(0x26,0)] 

**** Decode instruction: shl    %cl,%bx
[(0x26,0)] @{asm:=shl    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x26,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x26,2)] ; StaticArrow (0x26,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x29,0); StaticArrow (0x26,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x26,3)
[(0x26,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_8{0;8})
[(0x26,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0x26,5)] ; StaticArrow (0x26,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x29,0); StaticArrow (0x26,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x26,6)
[(0x26,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0x26,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x26,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x26,9)] ; StaticArrow (0x26,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x29,0)
[(0x29,0)] 

**** Decode instruction: shl    %cl,%cx
[(0x29,0)] @{asm:=shl    %cl,%cx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x29,1)] ; %tmpr1_16{0;16} := %ecx{0;16}
[(0x29,2)] ; StaticArrow (0x29,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x2C,0); StaticArrow (0x29,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x29,3)
[(0x29,3)] ; %ecx{0;16} := (LSH %ecx{0;16} %tmpr0_8{0;8})
[(0x29,4)] ; %eflags{0;1} := (RSH %ecx{0;16} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0x29,5)] ; StaticArrow (0x29,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x2C,0); StaticArrow (0x29,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x29,6)
[(0x29,6)] ; %eflags{11;1} := (XOR %ecx{0;16} %eflags{0;1}){0;1}
[(0x29,7)] ; %eflags{7;1} := %ecx{15;1}
[(0x29,8)] ; %eflags{6;1} := (EQ %ecx{0;16} 0x0{0;16}){0;1}
[(0x29,9)] ; StaticArrow (0x29,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x2C,0)
[(0x2C,0)] 

**** Decode instruction: shlw   %cl,0x12345678
[(0x2C,0)] @{asm:=shlw   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x2C,1)] ; %tmpr1_32 := [0x12345678]
[(0x2C,2)] ; StaticArrow (0x2C,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x33,0); StaticArrow (0x2C,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x2C,3)
[(0x2C,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0x2C,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x2C,5)] ; StaticArrow (0x2C,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x33,0); StaticArrow (0x2C,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x2C,6)
[(0x2C,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x2C,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x2C,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x2C,9)] ; StaticArrow (0x2C,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x33,0)
[(0x33,0)] 

**** Decode instruction: shl    $0x3,%bx
[(0x33,0)] @{asm:=shl    $0x3,%bx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x33,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x33,2)] ; StaticArrow (0x33,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x37,0); StaticArrow (0x33,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x33,3)
[(0x33,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_32)
[(0x33,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_32)){0;1}
[(0x33,5)] ; StaticArrow (0x33,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x37,0); StaticArrow (0x33,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x33,6)
[(0x33,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0x33,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x33,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x33,9)] ; StaticArrow (0x33,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x37,0)
[(0x37,0)] 

**** Decode instruction: shlw   $0x3,0x12345678
[(0x37,0)] @{asm:=shlw   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x37,1)] ; %tmpr1_32 := [0x12345678]
[(0x37,2)] ; StaticArrow (0x37,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x3F,0); StaticArrow (0x37,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x37,3)
[(0x37,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x37,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x37,5)] ; StaticArrow (0x37,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x3F,0); StaticArrow (0x37,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x37,6)
[(0x37,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x37,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x37,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x37,9)] ; StaticArrow (0x37,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x3F,0)
[(0x3F,0)] 

**** Decode instruction: shl    %ebx
[(0x3F,0)] @{asm:=shl    %ebx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x3F,1)] ; %tmpr1_32 := %ebx
[(0x3F,2)] ; StaticArrow (0x3F,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x41,0); StaticArrow (0x3F,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x3F,3)
[(0x3F,3)] ; %ebx := (LSH %ebx %tmpr0_32)
[(0x3F,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_32)){0;1}
[(0x3F,5)] ; StaticArrow (0x3F,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x41,0); StaticArrow (0x3F,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x3F,6)
[(0x3F,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0x3F,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x3F,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x3F,9)] ; StaticArrow (0x3F,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x41,0)
[(0x41,0)] 

**** Decode instruction: shll   0x12345678
[(0x41,0)] @{asm:=shll   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x41,1)] ; %tmpr1_32 := [0x12345678]
[(0x41,2)] ; StaticArrow (0x41,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x47,0); StaticArrow (0x41,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x41,3)
[(0x41,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x41,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x41,5)] ; StaticArrow (0x41,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x47,0); StaticArrow (0x41,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x41,6)
[(0x41,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x41,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x41,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x41,9)] ; StaticArrow (0x41,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x47,0)
[(0x47,0)] 

**** Decode instruction: shl    %cl,%ebx
[(0x47,0)] @{asm:=shl    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x47,1)] ; %tmpr1_32 := %ebx
[(0x47,2)] ; StaticArrow (0x47,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x49,0); StaticArrow (0x47,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x47,3)
[(0x47,3)] ; %ebx := (LSH %ebx %tmpr0_8{0;8})
[(0x47,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x47,5)] ; StaticArrow (0x47,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x49,0); StaticArrow (0x47,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x47,6)
[(0x47,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0x47,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x47,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x47,9)] ; StaticArrow (0x47,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x49,0)
[(0x49,0)] 

**** Decode instruction: shl    %cl,%ecx
[(0x49,0)] @{asm:=shl    %cl,%ecx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x49,1)] ; %tmpr1_32 := %ecx
[(0x49,2)] ; StaticArrow (0x49,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x4B,0); StaticArrow (0x49,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x49,3)
[(0x49,3)] ; %ecx := (LSH %ecx %tmpr0_8{0;8})
[(0x49,4)] ; %eflags{0;1} := (RSH %ecx (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x49,5)] ; StaticArrow (0x49,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x4B,0); StaticArrow (0x49,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x49,6)
[(0x49,6)] ; %eflags{11;1} := (XOR %ecx %eflags{0;1}){0;1}
[(0x49,7)] ; %eflags{7;1} := %ecx{31;1}
[(0x49,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x49,9)] ; StaticArrow (0x49,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x4B,0)
[(0x4B,0)] 

**** Decode instruction: shll   %cl,0x12345678
[(0x4B,0)] @{asm:=shll   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x4B,1)] ; %tmpr1_32 := [0x12345678]
[(0x4B,2)] ; StaticArrow (0x4B,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x51,0); StaticArrow (0x4B,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x4B,3)
[(0x4B,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0x4B,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x4B,5)] ; StaticArrow (0x4B,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x51,0); StaticArrow (0x4B,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x4B,6)
[(0x4B,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x4B,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x4B,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x4B,9)] ; StaticArrow (0x4B,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x51,0)
[(0x51,0)] 

**** Decode instruction: shl    $0x3,%ebx
[(0x51,0)] @{asm:=shl    $0x3,%ebx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x51,1)] ; %tmpr1_32 := %ebx
[(0x51,2)] ; StaticArrow (0x51,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x54,0); StaticArrow (0x51,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x51,3)
[(0x51,3)] ; %ebx := (LSH %ebx %tmpr0_32)
[(0x51,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_32)){0;1}
[(0x51,5)] ; StaticArrow (0x51,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x54,0); StaticArrow (0x51,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x51,6)
[(0x51,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0x51,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x51,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x51,9)] ; StaticArrow (0x51,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x54,0)
[(0x54,0)] 

**** Decode instruction: shl    $0x3,%ecx
[(0x54,0)] @{asm:=shl    $0x3,%ecx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x54,1)] ; %tmpr1_32 := %ecx
[(0x54,2)] ; StaticArrow (0x54,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x57,0); StaticArrow (0x54,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x54,3)
[(0x54,3)] ; %ecx := (LSH %ecx %tmpr0_32)
[(0x54,4)] ; %eflags{0;1} := (RSH %ecx (SUB 0x20 %tmpr0_32)){0;1}
[(0x54,5)] ; StaticArrow (0x54,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x57,0); StaticArrow (0x54,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x54,6)
[(0x54,6)] ; %eflags{11;1} := (XOR %ecx %eflags{0;1}){0;1}
[(0x54,7)] ; %eflags{7;1} := %ecx{31;1}
[(0x54,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x54,9)] ; StaticArrow (0x54,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x57,0)
[(0x57,0)] 

**** Decode instruction: shll   $0x3,0x12345678
[(0x57,0)] @{asm:=shll   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x57,1)] ; %tmpr1_32 := [0x12345678]
[(0x57,2)] ; StaticArrow (0x57,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x5E,0); StaticArrow (0x57,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x57,3)
[(0x57,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x57,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x57,5)] ; StaticArrow (0x57,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x5E,0); StaticArrow (0x57,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x57,6)
[(0x57,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x57,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x57,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x57,9)] ; StaticArrow (0x57,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x5E,0)
[(0x5E,0)] 

**** Decode instruction: sar    %bh
[(0x5E,0)] @{asm:=sar    %bh}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x5E,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x5E,2)] ; StaticArrow (0x5E,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x60,0); StaticArrow (0x5E,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x5E,3)
[(0x5E,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_32)
[(0x5E,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_32) 0x1)){0;1}
[(0x5E,5)] ; StaticArrow (0x5E,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x60,0); StaticArrow (0x5E,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x5E,6)
[(0x5E,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x5E,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x5E,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x5E,9)] ; StaticArrow (0x5E,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x60,0)
[(0x60,0)] 

**** Decode instruction: sarb   0x12345678
[(0x60,0)] @{asm:=sarb   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x60,1)] ; %tmpr1_32 := [0x12345678]
[(0x60,2)] ; StaticArrow (0x60,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x66,0); StaticArrow (0x60,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x60,3)
[(0x60,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x60,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x60,5)] ; StaticArrow (0x60,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x66,0); StaticArrow (0x60,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x60,6)
[(0x60,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x60,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x60,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x60,9)] ; StaticArrow (0x60,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x66,0)
[(0x66,0)] 

**** Decode instruction: sar    %cl,%bh
[(0x66,0)] @{asm:=sar    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x66,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x66,2)] ; StaticArrow (0x66,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x68,0); StaticArrow (0x66,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x66,3)
[(0x66,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_8{0;8})
[(0x66,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_8{0;8}) 0x1)){0;1}
[(0x66,5)] ; StaticArrow (0x66,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x68,0); StaticArrow (0x66,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x66,6)
[(0x66,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x66,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x66,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x66,9)] ; StaticArrow (0x66,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x68,0)
[(0x68,0)] 

**** Decode instruction: sar    %cl,%ch
[(0x68,0)] @{asm:=sar    %cl,%ch}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x68,1)] ; %tmpr1_8{0;8} := %ecx{8;8}
[(0x68,2)] ; StaticArrow (0x68,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x6A,0); StaticArrow (0x68,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x68,3)
[(0x68,3)] ; %ecx{8;8} := (RSH %ecx{8;8} %tmpr0_8{0;8})
[(0x68,4)] ; %eflags{0;1} := (RSH %ecx{8;8} (SUB (ADD 0x8 %tmpr0_8{0;8}) 0x1)){0;1}
[(0x68,5)] ; StaticArrow (0x68,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x6A,0); StaticArrow (0x68,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x68,6)
[(0x68,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x68,7)] ; %eflags{7;1} := %ecx{7;1}
[(0x68,8)] ; %eflags{6;1} := (EQ %ecx{8;8} 0x0{0;8}){0;1}
[(0x68,9)] ; StaticArrow (0x68,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{8;1}){0;1} %ecx{9;1}){0;1} %ecx{10;1}){0;1} %ecx{11;1}){0;1} %ecx{12;1}){0;1} %ecx{13;1}){0;1} %ecx{14;1}){0;1} %ecx{15;1}){0;1}  --> (0x6A,0)
[(0x6A,0)] 

**** Decode instruction: sarb   %cl,0x12345678
[(0x6A,0)] @{asm:=sarb   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x6A,1)] ; %tmpr1_32 := [0x12345678]
[(0x6A,2)] ; StaticArrow (0x6A,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x70,0); StaticArrow (0x6A,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x6A,3)
[(0x6A,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0x6A,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x6A,5)] ; StaticArrow (0x6A,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x70,0); StaticArrow (0x6A,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x6A,6)
[(0x6A,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x6A,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x6A,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x6A,9)] ; StaticArrow (0x6A,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x70,0)
[(0x70,0)] 

**** Decode instruction: sar    $0x3,%bh
[(0x70,0)] @{asm:=sar    $0x3,%bh}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x70,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x70,2)] ; StaticArrow (0x70,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x73,0); StaticArrow (0x70,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x70,3)
[(0x70,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_32)
[(0x70,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_32) 0x1)){0;1}
[(0x70,5)] ; StaticArrow (0x70,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x73,0); StaticArrow (0x70,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x70,6)
[(0x70,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x70,7)] ; %eflags{7;1} := %ebx{7;1}
[(0x70,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x70,9)] ; StaticArrow (0x70,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x73,0)
[(0x73,0)] 

**** Decode instruction: sarb   $0x3,0x12345678
[(0x73,0)] @{asm:=sarb   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x73,1)] ; %tmpr1_32 := [0x12345678]
[(0x73,2)] ; StaticArrow (0x73,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x7A,0); StaticArrow (0x73,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x73,3)
[(0x73,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x73,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x73,5)] ; StaticArrow (0x73,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x7A,0); StaticArrow (0x73,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x73,6)
[(0x73,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x73,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x73,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x73,9)] ; StaticArrow (0x73,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x7A,0)
[(0x7A,0)] 

**** Decode instruction: sar    %bx
[(0x7A,0)] @{asm:=sar    %bx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x7A,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x7A,2)] ; StaticArrow (0x7A,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x7D,0); StaticArrow (0x7A,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x7A,3)
[(0x7A,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_32)
[(0x7A,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_32 0x1)){0;1}
[(0x7A,5)] ; StaticArrow (0x7A,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x7D,0); StaticArrow (0x7A,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x7A,6)
[(0x7A,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x7A,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x7A,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x7A,9)] ; StaticArrow (0x7A,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x7D,0)
[(0x7D,0)] 

**** Decode instruction: sarw   0x12345678
[(0x7D,0)] @{asm:=sarw   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x7D,1)] ; %tmpr1_32 := [0x12345678]
[(0x7D,2)] ; StaticArrow (0x7D,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x84,0); StaticArrow (0x7D,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x7D,3)
[(0x7D,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x7D,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x7D,5)] ; StaticArrow (0x7D,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x84,0); StaticArrow (0x7D,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x7D,6)
[(0x7D,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x7D,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x7D,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x7D,9)] ; StaticArrow (0x7D,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x84,0)
[(0x84,0)] 

**** Decode instruction: sar    %cl,%bx
[(0x84,0)] @{asm:=sar    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x84,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x84,2)] ; StaticArrow (0x84,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x87,0); StaticArrow (0x84,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x84,3)
[(0x84,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_8{0;8})
[(0x84,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x84,5)] ; StaticArrow (0x84,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x87,0); StaticArrow (0x84,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x84,6)
[(0x84,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x84,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x84,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x84,9)] ; StaticArrow (0x84,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x87,0)
[(0x87,0)] 

**** Decode instruction: sar    %cl,%cx
[(0x87,0)] @{asm:=sar    %cl,%cx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x87,1)] ; %tmpr1_16{0;16} := %ecx{0;16}
[(0x87,2)] ; StaticArrow (0x87,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x8A,0); StaticArrow (0x87,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x87,3)
[(0x87,3)] ; %ecx{0;16} := (RSH %ecx{0;16} %tmpr0_8{0;8})
[(0x87,4)] ; %eflags{0;1} := (RSH %ecx{0;16} (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x87,5)] ; StaticArrow (0x87,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x8A,0); StaticArrow (0x87,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x87,6)
[(0x87,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x87,7)] ; %eflags{7;1} := %ecx{15;1}
[(0x87,8)] ; %eflags{6;1} := (EQ %ecx{0;16} 0x0{0;16}){0;1}
[(0x87,9)] ; StaticArrow (0x87,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x8A,0)
[(0x8A,0)] 

**** Decode instruction: sarw   %cl,0x12345678
[(0x8A,0)] @{asm:=sarw   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x8A,1)] ; %tmpr1_32 := [0x12345678]
[(0x8A,2)] ; StaticArrow (0x8A,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x91,0); StaticArrow (0x8A,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x8A,3)
[(0x8A,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0x8A,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x8A,5)] ; StaticArrow (0x8A,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x91,0); StaticArrow (0x8A,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x8A,6)
[(0x8A,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x8A,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x8A,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x8A,9)] ; StaticArrow (0x8A,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x91,0)
[(0x91,0)] 

**** Decode instruction: sar    $0x3,%bx
[(0x91,0)] @{asm:=sar    $0x3,%bx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x91,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x91,2)] ; StaticArrow (0x91,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x95,0); StaticArrow (0x91,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x91,3)
[(0x91,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_32)
[(0x91,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_32 0x1)){0;1}
[(0x91,5)] ; StaticArrow (0x91,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x95,0); StaticArrow (0x91,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x91,6)
[(0x91,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x91,7)] ; %eflags{7;1} := %ebx{15;1}
[(0x91,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x91,9)] ; StaticArrow (0x91,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x95,0)
[(0x95,0)] 

**** Decode instruction: sarw   $0x3,0x12345678
[(0x95,0)] @{asm:=sarw   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x95,1)] ; %tmpr1_32 := [0x12345678]
[(0x95,2)] ; StaticArrow (0x95,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x9D,0); StaticArrow (0x95,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x95,3)
[(0x95,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x95,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x95,5)] ; StaticArrow (0x95,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x9D,0); StaticArrow (0x95,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x95,6)
[(0x95,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x95,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x95,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x95,9)] ; StaticArrow (0x95,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x9D,0)
[(0x9D,0)] 

**** Decode instruction: sar    %ebx
[(0x9D,0)] @{asm:=sar    %ebx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x9D,1)] ; %tmpr1_32 := %ebx
[(0x9D,2)] ; StaticArrow (0x9D,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x9F,0); StaticArrow (0x9D,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x9D,3)
[(0x9D,3)] ; %ebx := (RSH %ebx %tmpr0_32)
[(0x9D,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_32 0x1)){0;1}
[(0x9D,5)] ; StaticArrow (0x9D,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x9F,0); StaticArrow (0x9D,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x9D,6)
[(0x9D,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x9D,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x9D,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x9D,9)] ; StaticArrow (0x9D,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x9F,0)
[(0x9F,0)] 

**** Decode instruction: sarl   0x12345678
[(0x9F,0)] @{asm:=sarl   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x9F,1)] ; %tmpr1_32 := [0x12345678]
[(0x9F,2)] ; StaticArrow (0x9F,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xA5,0); StaticArrow (0x9F,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x9F,3)
[(0x9F,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x9F,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x9F,5)] ; StaticArrow (0x9F,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xA5,0); StaticArrow (0x9F,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x9F,6)
[(0x9F,6)] ; %eflags{11;1} := 0x0{0;1}
[(0x9F,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x9F,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x9F,9)] ; StaticArrow (0x9F,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xA5,0)
[(0xA5,0)] 

**** Decode instruction: sar    %cl,%ebx
[(0xA5,0)] @{asm:=sar    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xA5,1)] ; %tmpr1_32 := %ebx
[(0xA5,2)] ; StaticArrow (0xA5,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xA7,0); StaticArrow (0xA5,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xA5,3)
[(0xA5,3)] ; %ebx := (RSH %ebx %tmpr0_8{0;8})
[(0xA5,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0xA5,5)] ; StaticArrow (0xA5,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA7,0); StaticArrow (0xA5,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA5,6)
[(0xA5,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xA5,7)] ; %eflags{7;1} := %ebx{31;1}
[(0xA5,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0xA5,9)] ; StaticArrow (0xA5,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xA7,0)
[(0xA7,0)] 

**** Decode instruction: sar    %cl,%ecx
[(0xA7,0)] @{asm:=sar    %cl,%ecx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xA7,1)] ; %tmpr1_32 := %ecx
[(0xA7,2)] ; StaticArrow (0xA7,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xA9,0); StaticArrow (0xA7,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xA7,3)
[(0xA7,3)] ; %ecx := (RSH %ecx %tmpr0_8{0;8})
[(0xA7,4)] ; %eflags{0;1} := (RSH %ecx (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0xA7,5)] ; StaticArrow (0xA7,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA9,0); StaticArrow (0xA7,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA7,6)
[(0xA7,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xA7,7)] ; %eflags{7;1} := %ecx{31;1}
[(0xA7,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0xA7,9)] ; StaticArrow (0xA7,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0xA9,0)
[(0xA9,0)] 

**** Decode instruction: sarl   %cl,0x12345678
[(0xA9,0)] @{asm:=sarl   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0xA9,1)] ; %tmpr1_32 := [0x12345678]
[(0xA9,2)] ; StaticArrow (0xA9,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xAF,0); StaticArrow (0xA9,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xA9,3)
[(0xA9,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0xA9,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0xA9,5)] ; StaticArrow (0xA9,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xAF,0); StaticArrow (0xA9,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xA9,6)
[(0xA9,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xA9,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xA9,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xA9,9)] ; StaticArrow (0xA9,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xAF,0)
[(0xAF,0)] 

**** Decode instruction: sar    $0x3,%ebx
[(0xAF,0)] @{asm:=sar    $0x3,%ebx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0xAF,1)] ; %tmpr1_32 := %ebx
[(0xAF,2)] ; StaticArrow (0xAF,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xB2,0); StaticArrow (0xAF,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xAF,3)
[(0xAF,3)] ; %ebx := (RSH %ebx %tmpr0_32)
[(0xAF,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_32 0x1)){0;1}
[(0xAF,5)] ; StaticArrow (0xAF,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xB2,0); StaticArrow (0xAF,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xAF,6)
[(0xAF,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xAF,7)] ; %eflags{7;1} := %ebx{31;1}
[(0xAF,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0xAF,9)] ; StaticArrow (0xAF,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xB2,0)
[(0xB2,0)] 

**** Decode instruction: sar    $0x3,%ecx
[(0xB2,0)] @{asm:=sar    $0x3,%ecx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0xB2,1)] ; %tmpr1_32 := %ecx
[(0xB2,2)] ; StaticArrow (0xB2,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xB5,0); StaticArrow (0xB2,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xB2,3)
[(0xB2,3)] ; %ecx := (RSH %ecx %tmpr0_32)
[(0xB2,4)] ; %eflags{0;1} := (RSH %ecx (SUB %tmpr0_32 0x1)){0;1}
[(0xB2,5)] ; StaticArrow (0xB2,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xB5,0); StaticArrow (0xB2,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xB2,6)
[(0xB2,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xB2,7)] ; %eflags{7;1} := %ecx{31;1}
[(0xB2,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0xB2,9)] ; StaticArrow (0xB2,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0xB5,0)
[(0xB5,0)] 

**** Decode instruction: sarl   $0x3,0x12345678
[(0xB5,0)] @{asm:=sarl   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0xB5,1)] ; %tmpr1_32 := [0x12345678]
[(0xB5,2)] ; StaticArrow (0xB5,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xBC,0); StaticArrow (0xB5,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xB5,3)
[(0xB5,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0xB5,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0xB5,5)] ; StaticArrow (0xB5,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xBC,0); StaticArrow (0xB5,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xB5,6)
[(0xB5,6)] ; %eflags{11;1} := 0x0{0;1}
[(0xB5,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xB5,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xB5,9)] ; StaticArrow (0xB5,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xBC,0)
[(0xBC,0)] 

**** Decode instruction: shl    %bh
[(0xBC,0)] @{asm:=shl    %bh}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0xBC,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0xBC,2)] ; StaticArrow (0xBC,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xBE,0); StaticArrow (0xBC,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xBC,3)
[(0xBC,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_32)
[(0xBC,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_32)){0;1}
[(0xBC,5)] ; StaticArrow (0xBC,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xBE,0); StaticArrow (0xBC,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xBC,6)
[(0xBC,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0xBC,7)] ; %eflags{7;1} := %ebx{7;1}
[(0xBC,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0xBC,9)] ; StaticArrow (0xBC,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0xBE,0)
[(0xBE,0)] 

**** Decode instruction: shlb   0x12345678
[(0xBE,0)] @{asm:=shlb   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0xBE,1)] ; %tmpr1_32 := [0x12345678]
[(0xBE,2)] ; StaticArrow (0xBE,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xC4,0); StaticArrow (0xBE,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xBE,3)
[(0xBE,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0xBE,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0xBE,5)] ; StaticArrow (0xBE,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xC4,0); StaticArrow (0xBE,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xBE,6)
[(0xBE,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xBE,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xBE,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xBE,9)] ; StaticArrow (0xBE,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xC4,0)
[(0xC4,0)] 

**** Decode instruction: shl    %cl,%bh
[(0xC4,0)] @{asm:=shl    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xC4,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0xC4,2)] ; StaticArrow (0xC4,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xC6,0); StaticArrow (0xC4,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xC4,3)
[(0xC4,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_8{0;8})
[(0xC4,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0xC4,5)] ; StaticArrow (0xC4,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC6,0); StaticArrow (0xC4,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC4,6)
[(0xC4,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0xC4,7)] ; %eflags{7;1} := %ebx{7;1}
[(0xC4,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0xC4,9)] ; StaticArrow (0xC4,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0xC6,0)
[(0xC6,0)] 

**** Decode instruction: shl    %cl,%ch
[(0xC6,0)] @{asm:=shl    %cl,%ch}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xC6,1)] ; %tmpr1_8{0;8} := %ecx{8;8}
[(0xC6,2)] ; StaticArrow (0xC6,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xC8,0); StaticArrow (0xC6,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xC6,3)
[(0xC6,3)] ; %ecx{8;8} := (LSH %ecx{8;8} %tmpr0_8{0;8})
[(0xC6,4)] ; %eflags{0;1} := (RSH %ecx{8;8} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0xC6,5)] ; StaticArrow (0xC6,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC8,0); StaticArrow (0xC6,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC6,6)
[(0xC6,6)] ; %eflags{11;1} := (XOR %ecx{8;8} %eflags{0;1}){0;1}
[(0xC6,7)] ; %eflags{7;1} := %ecx{7;1}
[(0xC6,8)] ; %eflags{6;1} := (EQ %ecx{8;8} 0x0{0;8}){0;1}
[(0xC6,9)] ; StaticArrow (0xC6,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{8;1}){0;1} %ecx{9;1}){0;1} %ecx{10;1}){0;1} %ecx{11;1}){0;1} %ecx{12;1}){0;1} %ecx{13;1}){0;1} %ecx{14;1}){0;1} %ecx{15;1}){0;1}  --> (0xC8,0)
[(0xC8,0)] 

**** Decode instruction: shlb   %cl,0x12345678
[(0xC8,0)] @{asm:=shlb   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0xC8,1)] ; %tmpr1_32 := [0x12345678]
[(0xC8,2)] ; StaticArrow (0xC8,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xCE,0); StaticArrow (0xC8,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xC8,3)
[(0xC8,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0xC8,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0xC8,5)] ; StaticArrow (0xC8,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xCE,0); StaticArrow (0xC8,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xC8,6)
[(0xC8,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xC8,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xC8,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xC8,9)] ; StaticArrow (0xC8,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xCE,0)
[(0xCE,0)] 

**** Decode instruction: shl    $0x3,%bh
[(0xCE,0)] @{asm:=shl    $0x3,%bh}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0xCE,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0xCE,2)] ; StaticArrow (0xCE,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xD1,0); StaticArrow (0xCE,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xCE,3)
[(0xCE,3)] ; %ebx{8;8} := (LSH %ebx{8;8} %tmpr0_32)
[(0xCE,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB 0x10 %tmpr0_32)){0;1}
[(0xCE,5)] ; StaticArrow (0xCE,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xD1,0); StaticArrow (0xCE,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xCE,6)
[(0xCE,6)] ; %eflags{11;1} := (XOR %ebx{8;8} %eflags{0;1}){0;1}
[(0xCE,7)] ; %eflags{7;1} := %ebx{7;1}
[(0xCE,8)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0xCE,9)] ; StaticArrow (0xCE,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0xD1,0)
[(0xD1,0)] 

**** Decode instruction: shlb   $0x3,0x12345678
[(0xD1,0)] @{asm:=shlb   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0xD1,1)] ; %tmpr1_32 := [0x12345678]
[(0xD1,2)] ; StaticArrow (0xD1,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xD8,0); StaticArrow (0xD1,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xD1,3)
[(0xD1,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0xD1,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0xD1,5)] ; StaticArrow (0xD1,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xD8,0); StaticArrow (0xD1,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xD1,6)
[(0xD1,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xD1,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xD1,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xD1,9)] ; StaticArrow (0xD1,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xD8,0)
[(0xD8,0)] 

**** Decode instruction: shl    %bx
[(0xD8,0)] @{asm:=shl    %bx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0xD8,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0xD8,2)] ; StaticArrow (0xD8,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xDB,0); StaticArrow (0xD8,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xD8,3)
[(0xD8,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_32)
[(0xD8,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_32)){0;1}
[(0xD8,5)] ; StaticArrow (0xD8,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xDB,0); StaticArrow (0xD8,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xD8,6)
[(0xD8,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0xD8,7)] ; %eflags{7;1} := %ebx{15;1}
[(0xD8,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0xD8,9)] ; StaticArrow (0xD8,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xDB,0)
[(0xDB,0)] 

**** Decode instruction: shlw   0x12345678
[(0xDB,0)] @{asm:=shlw   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0xDB,1)] ; %tmpr1_32 := [0x12345678]
[(0xDB,2)] ; StaticArrow (0xDB,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xE2,0); StaticArrow (0xDB,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xDB,3)
[(0xDB,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0xDB,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0xDB,5)] ; StaticArrow (0xDB,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xE2,0); StaticArrow (0xDB,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xDB,6)
[(0xDB,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xDB,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xDB,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xDB,9)] ; StaticArrow (0xDB,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xE2,0)
[(0xE2,0)] 

**** Decode instruction: shl    %cl,%bx
[(0xE2,0)] @{asm:=shl    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xE2,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0xE2,2)] ; StaticArrow (0xE2,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xE5,0); StaticArrow (0xE2,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xE2,3)
[(0xE2,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_8{0;8})
[(0xE2,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0xE2,5)] ; StaticArrow (0xE2,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xE5,0); StaticArrow (0xE2,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xE2,6)
[(0xE2,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0xE2,7)] ; %eflags{7;1} := %ebx{15;1}
[(0xE2,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0xE2,9)] ; StaticArrow (0xE2,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xE5,0)
[(0xE5,0)] 

**** Decode instruction: shl    %cl,%cx
[(0xE5,0)] @{asm:=shl    %cl,%cx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xE5,1)] ; %tmpr1_16{0;16} := %ecx{0;16}
[(0xE5,2)] ; StaticArrow (0xE5,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xE8,0); StaticArrow (0xE5,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xE5,3)
[(0xE5,3)] ; %ecx{0;16} := (LSH %ecx{0;16} %tmpr0_8{0;8})
[(0xE5,4)] ; %eflags{0;1} := (RSH %ecx{0;16} (SUB 0x10 %tmpr0_8{0;8})){0;1}
[(0xE5,5)] ; StaticArrow (0xE5,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xE8,0); StaticArrow (0xE5,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xE5,6)
[(0xE5,6)] ; %eflags{11;1} := (XOR %ecx{0;16} %eflags{0;1}){0;1}
[(0xE5,7)] ; %eflags{7;1} := %ecx{15;1}
[(0xE5,8)] ; %eflags{6;1} := (EQ %ecx{0;16} 0x0{0;16}){0;1}
[(0xE5,9)] ; StaticArrow (0xE5,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0xE8,0)
[(0xE8,0)] 

**** Decode instruction: shlw   %cl,0x12345678
[(0xE8,0)] @{asm:=shlw   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0xE8,1)] ; %tmpr1_32 := [0x12345678]
[(0xE8,2)] ; StaticArrow (0xE8,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0xEF,0); StaticArrow (0xE8,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0xE8,3)
[(0xE8,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0xE8,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0xE8,5)] ; StaticArrow (0xE8,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xEF,0); StaticArrow (0xE8,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0xE8,6)
[(0xE8,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xE8,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xE8,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xE8,9)] ; StaticArrow (0xE8,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xEF,0)
[(0xEF,0)] 

**** Decode instruction: shl    $0x3,%bx
[(0xEF,0)] @{asm:=shl    $0x3,%bx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0xEF,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0xEF,2)] ; StaticArrow (0xEF,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xF3,0); StaticArrow (0xEF,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xEF,3)
[(0xEF,3)] ; %ebx{0;16} := (LSH %ebx{0;16} %tmpr0_32)
[(0xEF,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB 0x10 %tmpr0_32)){0;1}
[(0xEF,5)] ; StaticArrow (0xEF,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xF3,0); StaticArrow (0xEF,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xEF,6)
[(0xEF,6)] ; %eflags{11;1} := (XOR %ebx{0;16} %eflags{0;1}){0;1}
[(0xEF,7)] ; %eflags{7;1} := %ebx{15;1}
[(0xEF,8)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0xEF,9)] ; StaticArrow (0xEF,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xF3,0)
[(0xF3,0)] 

**** Decode instruction: shlw   $0x3,0x12345678
[(0xF3,0)] @{asm:=shlw   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0xF3,1)] ; %tmpr1_32 := [0x12345678]
[(0xF3,2)] ; StaticArrow (0xF3,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xFB,0); StaticArrow (0xF3,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xF3,3)
[(0xF3,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0xF3,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0xF3,5)] ; StaticArrow (0xF3,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xFB,0); StaticArrow (0xF3,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xF3,6)
[(0xF3,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xF3,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xF3,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xF3,9)] ; StaticArrow (0xF3,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0xFB,0)
[(0xFB,0)] 

**** Decode instruction: shl    %ebx
[(0xFB,0)] @{asm:=shl    %ebx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0xFB,1)] ; %tmpr1_32 := %ebx
[(0xFB,2)] ; StaticArrow (0xFB,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0xFD,0); StaticArrow (0xFB,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xFB,3)
[(0xFB,3)] ; %ebx := (LSH %ebx %tmpr0_32)
[(0xFB,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_32)){0;1}
[(0xFB,5)] ; StaticArrow (0xFB,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0xFD,0); StaticArrow (0xFB,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xFB,6)
[(0xFB,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0xFB,7)] ; %eflags{7;1} := %ebx{31;1}
[(0xFB,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0xFB,9)] ; StaticArrow (0xFB,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0xFD,0)
[(0xFD,0)] 

**** Decode instruction: shll   0x12345678
[(0xFD,0)] @{asm:=shll   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0xFD,1)] ; %tmpr1_32 := [0x12345678]
[(0xFD,2)] ; StaticArrow (0xFD,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x103,0); StaticArrow (0xFD,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0xFD,3)
[(0xFD,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0xFD,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0xFD,5)] ; StaticArrow (0xFD,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x103,0); StaticArrow (0xFD,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0xFD,6)
[(0xFD,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0xFD,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0xFD,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0xFD,9)] ; StaticArrow (0xFD,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x103,0)
[(0x103,0)] 

**** Decode instruction: shl    %cl,%ebx
[(0x103,0)] @{asm:=shl    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x103,1)] ; %tmpr1_32 := %ebx
[(0x103,2)] ; StaticArrow (0x103,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x105,0); StaticArrow (0x103,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x103,3)
[(0x103,3)] ; %ebx := (LSH %ebx %tmpr0_8{0;8})
[(0x103,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x103,5)] ; StaticArrow (0x103,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x105,0); StaticArrow (0x103,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x103,6)
[(0x103,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0x103,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x103,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x103,9)] ; StaticArrow (0x103,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x105,0)
[(0x105,0)] 

**** Decode instruction: shl    %cl,%ecx
[(0x105,0)] @{asm:=shl    %cl,%ecx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x105,1)] ; %tmpr1_32 := %ecx
[(0x105,2)] ; StaticArrow (0x105,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x107,0); StaticArrow (0x105,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x105,3)
[(0x105,3)] ; %ecx := (LSH %ecx %tmpr0_8{0;8})
[(0x105,4)] ; %eflags{0;1} := (RSH %ecx (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x105,5)] ; StaticArrow (0x105,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x107,0); StaticArrow (0x105,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x105,6)
[(0x105,6)] ; %eflags{11;1} := (XOR %ecx %eflags{0;1}){0;1}
[(0x105,7)] ; %eflags{7;1} := %ecx{31;1}
[(0x105,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x105,9)] ; StaticArrow (0x105,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x107,0)
[(0x107,0)] 

**** Decode instruction: shll   %cl,0x12345678
[(0x107,0)] @{asm:=shll   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x107,1)] ; %tmpr1_32 := [0x12345678]
[(0x107,2)] ; StaticArrow (0x107,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x10D,0); StaticArrow (0x107,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x107,3)
[(0x107,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_8{0;8})
[(0x107,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_8{0;8})){0;1}
[(0x107,5)] ; StaticArrow (0x107,5) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x10D,0); StaticArrow (0x107,5) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x107,6)
[(0x107,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x107,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x107,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x107,9)] ; StaticArrow (0x107,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x10D,0)
[(0x10D,0)] 

**** Decode instruction: shl    $0x3,%ebx
[(0x10D,0)] @{asm:=shl    $0x3,%ebx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x10D,1)] ; %tmpr1_32 := %ebx
[(0x10D,2)] ; StaticArrow (0x10D,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x110,0); StaticArrow (0x10D,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x10D,3)
[(0x10D,3)] ; %ebx := (LSH %ebx %tmpr0_32)
[(0x10D,4)] ; %eflags{0;1} := (RSH %ebx (SUB 0x20 %tmpr0_32)){0;1}
[(0x10D,5)] ; StaticArrow (0x10D,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x110,0); StaticArrow (0x10D,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x10D,6)
[(0x10D,6)] ; %eflags{11;1} := (XOR %ebx %eflags{0;1}){0;1}
[(0x10D,7)] ; %eflags{7;1} := %ebx{31;1}
[(0x10D,8)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x10D,9)] ; StaticArrow (0x10D,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x110,0)
[(0x110,0)] 

**** Decode instruction: shl    $0x3,%ecx
[(0x110,0)] @{asm:=shl    $0x3,%ecx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x110,1)] ; %tmpr1_32 := %ecx
[(0x110,2)] ; StaticArrow (0x110,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x113,0); StaticArrow (0x110,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x110,3)
[(0x110,3)] ; %ecx := (LSH %ecx %tmpr0_32)
[(0x110,4)] ; %eflags{0;1} := (RSH %ecx (SUB 0x20 %tmpr0_32)){0;1}
[(0x110,5)] ; StaticArrow (0x110,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x113,0); StaticArrow (0x110,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x110,6)
[(0x110,6)] ; %eflags{11;1} := (XOR %ecx %eflags{0;1}){0;1}
[(0x110,7)] ; %eflags{7;1} := %ecx{31;1}
[(0x110,8)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x110,9)] ; StaticArrow (0x110,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x113,0)
[(0x113,0)] 

**** Decode instruction: shll   $0x3,0x12345678
[(0x113,0)] @{asm:=shll   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x113,1)] ; %tmpr1_32 := [0x12345678]
[(0x113,2)] ; StaticArrow (0x113,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x11A,0); StaticArrow (0x113,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x113,3)
[(0x113,3)] ; [0x12345678] := (LSH [0x12345678] %tmpr0_32)
[(0x113,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB 0x20 %tmpr0_32)){0;1}
[(0x113,5)] ; StaticArrow (0x113,5) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x11A,0); StaticArrow (0x113,5) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x113,6)
[(0x113,6)] ; %eflags{11;1} := (XOR [0x12345678] %eflags{0;1}){0;1}
[(0x113,7)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x113,8)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x113,9)] ; StaticArrow (0x113,9) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x11A,0)
[(0x11A,0)] 

**** Decode instruction: shr    %bh
[(0x11A,0)] @{asm:=shr    %bh}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x11A,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x11A,2)] ; StaticArrow (0x11A,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x11C,0); StaticArrow (0x11A,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x11A,3)
[(0x11A,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_32)
[(0x11A,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_32) 0x1)){0;1}
[(0x11A,5)] ; %ebx{8;8} := (AND %ebx{8;8} (NOT (LSH (NOT 0x0) %tmpr0_32)){8;8}){0;1}
[(0x11A,6)] ; StaticArrow (0x11A,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x11C,0); StaticArrow (0x11A,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x11A,7)
[(0x11A,7)] ; %eflags{11;1} := (LSH %tmpr1_8{0;8} 0x7){0;1}
[(0x11A,8)] ; %eflags{7;1} := %ebx{7;1}
[(0x11A,9)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x11A,10)] ; StaticArrow (0x11A,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x11C,0)
[(0x11C,0)] 

**** Decode instruction: shrb   0x12345678
[(0x11C,0)] @{asm:=shrb   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x11C,1)] ; %tmpr1_32 := [0x12345678]
[(0x11C,2)] ; StaticArrow (0x11C,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x122,0); StaticArrow (0x11C,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x11C,3)
[(0x11C,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x11C,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x11C,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x11C,6)] ; StaticArrow (0x11C,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x122,0); StaticArrow (0x11C,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x11C,7)
[(0x11C,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x11C,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x11C,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x11C,10)] ; StaticArrow (0x11C,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x122,0)
[(0x122,0)] 

**** Decode instruction: shr    %cl,%bh
[(0x122,0)] @{asm:=shr    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x122,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x122,2)] ; StaticArrow (0x122,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x124,0); StaticArrow (0x122,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x122,3)
[(0x122,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_8{0;8})
[(0x122,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_8{0;8}) 0x1)){0;1}
[(0x122,5)] ; %ebx{8;8} := (AND %ebx{8;8} (NOT (LSH (NOT 0x0) %tmpr0_8{0;8})){8;8}){0;1}
[(0x122,6)] ; StaticArrow (0x122,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x124,0); StaticArrow (0x122,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x122,7)
[(0x122,7)] ; %eflags{11;1} := (LSH %tmpr1_8{0;8} 0x7){0;1}
[(0x122,8)] ; %eflags{7;1} := %ebx{7;1}
[(0x122,9)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x122,10)] ; StaticArrow (0x122,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x124,0)
[(0x124,0)] 

**** Decode instruction: shr    %cl,%ch
[(0x124,0)] @{asm:=shr    %cl,%ch}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x124,1)] ; %tmpr1_8{0;8} := %ecx{8;8}
[(0x124,2)] ; StaticArrow (0x124,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x126,0); StaticArrow (0x124,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x124,3)
[(0x124,3)] ; %ecx{8;8} := (RSH %ecx{8;8} %tmpr0_8{0;8})
[(0x124,4)] ; %eflags{0;1} := (RSH %ecx{8;8} (SUB (ADD 0x8 %tmpr0_8{0;8}) 0x1)){0;1}
[(0x124,5)] ; %ecx{8;8} := (AND %ecx{8;8} (NOT (LSH (NOT 0x0) %tmpr0_8{0;8})){8;8}){0;1}
[(0x124,6)] ; StaticArrow (0x124,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x126,0); StaticArrow (0x124,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x124,7)
[(0x124,7)] ; %eflags{11;1} := (LSH %tmpr1_8{0;8} 0x7){0;1}
[(0x124,8)] ; %eflags{7;1} := %ecx{7;1}
[(0x124,9)] ; %eflags{6;1} := (EQ %ecx{8;8} 0x0{0;8}){0;1}
[(0x124,10)] ; StaticArrow (0x124,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{8;1}){0;1} %ecx{9;1}){0;1} %ecx{10;1}){0;1} %ecx{11;1}){0;1} %ecx{12;1}){0;1} %ecx{13;1}){0;1} %ecx{14;1}){0;1} %ecx{15;1}){0;1}  --> (0x126,0)
[(0x126,0)] 

**** Decode instruction: shrb   %cl,0x12345678
[(0x126,0)] @{asm:=shrb   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x126,1)] ; %tmpr1_32 := [0x12345678]
[(0x126,2)] ; StaticArrow (0x126,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x12C,0); StaticArrow (0x126,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x126,3)
[(0x126,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0x126,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x126,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_8{0;8}))){0;1}
[(0x126,6)] ; StaticArrow (0x126,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x12C,0); StaticArrow (0x126,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x126,7)
[(0x126,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x126,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x126,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x126,10)] ; StaticArrow (0x126,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x12C,0)
[(0x12C,0)] 

**** Decode instruction: shr    $0x3,%bh
[(0x12C,0)] @{asm:=shr    $0x3,%bh}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x12C,1)] ; %tmpr1_8{0;8} := %ebx{8;8}
[(0x12C,2)] ; StaticArrow (0x12C,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x12F,0); StaticArrow (0x12C,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x12C,3)
[(0x12C,3)] ; %ebx{8;8} := (RSH %ebx{8;8} %tmpr0_32)
[(0x12C,4)] ; %eflags{0;1} := (RSH %ebx{8;8} (SUB (ADD 0x8 %tmpr0_32) 0x1)){0;1}
[(0x12C,5)] ; %ebx{8;8} := (AND %ebx{8;8} (NOT (LSH (NOT 0x0) %tmpr0_32)){8;8}){0;1}
[(0x12C,6)] ; StaticArrow (0x12C,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x12F,0); StaticArrow (0x12C,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x12C,7)
[(0x12C,7)] ; %eflags{11;1} := (LSH %tmpr1_8{0;8} 0x7){0;1}
[(0x12C,8)] ; %eflags{7;1} := %ebx{7;1}
[(0x12C,9)] ; %eflags{6;1} := (EQ %ebx{8;8} 0x0{0;8}){0;1}
[(0x12C,10)] ; StaticArrow (0x12C,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{8;1}){0;1} %ebx{9;1}){0;1} %ebx{10;1}){0;1} %ebx{11;1}){0;1} %ebx{12;1}){0;1} %ebx{13;1}){0;1} %ebx{14;1}){0;1} %ebx{15;1}){0;1}  --> (0x12F,0)
[(0x12F,0)] 

**** Decode instruction: shrb   $0x3,0x12345678
[(0x12F,0)] @{asm:=shrb   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x12F,1)] ; %tmpr1_32 := [0x12345678]
[(0x12F,2)] ; StaticArrow (0x12F,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x136,0); StaticArrow (0x12F,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x12F,3)
[(0x12F,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x12F,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x12F,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x12F,6)] ; StaticArrow (0x12F,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x136,0); StaticArrow (0x12F,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x12F,7)
[(0x12F,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x12F,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x12F,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x12F,10)] ; StaticArrow (0x12F,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x136,0)
[(0x136,0)] 

**** Decode instruction: shr    %bx
[(0x136,0)] @{asm:=shr    %bx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x136,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x136,2)] ; StaticArrow (0x136,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x139,0); StaticArrow (0x136,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x136,3)
[(0x136,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_32)
[(0x136,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_32 0x1)){0;1}
[(0x136,5)] ; %ebx{0;16} := (AND %ebx{0;16} (NOT (LSH (NOT 0x0) %tmpr0_32)){0;16}){0;1}
[(0x136,6)] ; StaticArrow (0x136,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x139,0); StaticArrow (0x136,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x136,7)
[(0x136,7)] ; %eflags{11;1} := (LSH %tmpr1_16{0;16} 0xF){0;1}
[(0x136,8)] ; %eflags{7;1} := %ebx{15;1}
[(0x136,9)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x136,10)] ; StaticArrow (0x136,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x139,0)
[(0x139,0)] 

**** Decode instruction: shrw   0x12345678
[(0x139,0)] @{asm:=shrw   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x139,1)] ; %tmpr1_32 := [0x12345678]
[(0x139,2)] ; StaticArrow (0x139,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x140,0); StaticArrow (0x139,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x139,3)
[(0x139,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x139,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x139,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x139,6)] ; StaticArrow (0x139,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x140,0); StaticArrow (0x139,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x139,7)
[(0x139,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x139,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x139,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x139,10)] ; StaticArrow (0x139,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x140,0)
[(0x140,0)] 

**** Decode instruction: shr    %cl,%bx
[(0x140,0)] @{asm:=shr    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x140,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x140,2)] ; StaticArrow (0x140,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x143,0); StaticArrow (0x140,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x140,3)
[(0x140,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_8{0;8})
[(0x140,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x140,5)] ; %ebx{0;16} := (AND %ebx{0;16} (NOT (LSH (NOT 0x0) %tmpr0_8{0;8})){0;16}){0;1}
[(0x140,6)] ; StaticArrow (0x140,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x143,0); StaticArrow (0x140,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x140,7)
[(0x140,7)] ; %eflags{11;1} := (LSH %tmpr1_16{0;16} 0xF){0;1}
[(0x140,8)] ; %eflags{7;1} := %ebx{15;1}
[(0x140,9)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x140,10)] ; StaticArrow (0x140,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x143,0)
[(0x143,0)] 

**** Decode instruction: shr    %cl,%cx
[(0x143,0)] @{asm:=shr    %cl,%cx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x143,1)] ; %tmpr1_16{0;16} := %ecx{0;16}
[(0x143,2)] ; StaticArrow (0x143,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x146,0); StaticArrow (0x143,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x143,3)
[(0x143,3)] ; %ecx{0;16} := (RSH %ecx{0;16} %tmpr0_8{0;8})
[(0x143,4)] ; %eflags{0;1} := (RSH %ecx{0;16} (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x143,5)] ; %ecx{0;16} := (AND %ecx{0;16} (NOT (LSH (NOT 0x0) %tmpr0_8{0;8})){0;16}){0;1}
[(0x143,6)] ; StaticArrow (0x143,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x146,0); StaticArrow (0x143,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x143,7)
[(0x143,7)] ; %eflags{11;1} := (LSH %tmpr1_16{0;16} 0xF){0;1}
[(0x143,8)] ; %eflags{7;1} := %ecx{15;1}
[(0x143,9)] ; %eflags{6;1} := (EQ %ecx{0;16} 0x0{0;16}){0;1}
[(0x143,10)] ; StaticArrow (0x143,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x146,0)
[(0x146,0)] 

**** Decode instruction: shrw   %cl,0x12345678
[(0x146,0)] @{asm:=shrw   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x146,1)] ; %tmpr1_32 := [0x12345678]
[(0x146,2)] ; StaticArrow (0x146,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x14D,0); StaticArrow (0x146,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x146,3)
[(0x146,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0x146,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x146,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_8{0;8}))){0;1}
[(0x146,6)] ; StaticArrow (0x146,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x14D,0); StaticArrow (0x146,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x146,7)
[(0x146,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x146,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x146,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x146,10)] ; StaticArrow (0x146,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x14D,0)
[(0x14D,0)] 

**** Decode instruction: shr    $0x3,%bx
[(0x14D,0)] @{asm:=shr    $0x3,%bx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x14D,1)] ; %tmpr1_16{0;16} := %ebx{0;16}
[(0x14D,2)] ; StaticArrow (0x14D,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x151,0); StaticArrow (0x14D,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x14D,3)
[(0x14D,3)] ; %ebx{0;16} := (RSH %ebx{0;16} %tmpr0_32)
[(0x14D,4)] ; %eflags{0;1} := (RSH %ebx{0;16} (SUB %tmpr0_32 0x1)){0;1}
[(0x14D,5)] ; %ebx{0;16} := (AND %ebx{0;16} (NOT (LSH (NOT 0x0) %tmpr0_32)){0;16}){0;1}
[(0x14D,6)] ; StaticArrow (0x14D,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x151,0); StaticArrow (0x14D,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x14D,7)
[(0x14D,7)] ; %eflags{11;1} := (LSH %tmpr1_16{0;16} 0xF){0;1}
[(0x14D,8)] ; %eflags{7;1} := %ebx{15;1}
[(0x14D,9)] ; %eflags{6;1} := (EQ %ebx{0;16} 0x0{0;16}){0;1}
[(0x14D,10)] ; StaticArrow (0x14D,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x151,0)
[(0x151,0)] 

**** Decode instruction: shrw   $0x3,0x12345678
[(0x151,0)] @{asm:=shrw   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x151,1)] ; %tmpr1_32 := [0x12345678]
[(0x151,2)] ; StaticArrow (0x151,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x159,0); StaticArrow (0x151,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x151,3)
[(0x151,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x151,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x151,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x151,6)] ; StaticArrow (0x151,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x159,0); StaticArrow (0x151,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x151,7)
[(0x151,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x151,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x151,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x151,10)] ; StaticArrow (0x151,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x159,0)
[(0x159,0)] 

**** Decode instruction: shr    %ebx
[(0x159,0)] @{asm:=shr    %ebx}@ ; %tmpr0_32 := (AND 0x1 0x1F)
[(0x159,1)] ; %tmpr1_32 := %ebx
[(0x159,2)] ; StaticArrow (0x159,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x15B,0); StaticArrow (0x159,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x159,3)
[(0x159,3)] ; %ebx := (RSH %ebx %tmpr0_32)
[(0x159,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_32 0x1)){0;1}
[(0x159,5)] ; %ebx := (AND %ebx (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x159,6)] ; StaticArrow (0x159,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x15B,0); StaticArrow (0x159,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x159,7)
[(0x159,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x159,8)] ; %eflags{7;1} := %ebx{31;1}
[(0x159,9)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x159,10)] ; StaticArrow (0x159,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x15B,0)
[(0x15B,0)] 

**** Decode instruction: shrl   0x12345678
[(0x15B,0)] @{asm:=shrl   0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x1 0x0 0x20) 0x1F)
[(0x15B,1)] ; %tmpr1_32 := [0x12345678]
[(0x15B,2)] ; StaticArrow (0x15B,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x161,0); StaticArrow (0x15B,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x15B,3)
[(0x15B,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x15B,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x15B,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x15B,6)] ; StaticArrow (0x15B,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x161,0); StaticArrow (0x15B,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x15B,7)
[(0x15B,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x15B,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x15B,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x15B,10)] ; StaticArrow (0x15B,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x161,0)
[(0x161,0)] 

**** Decode instruction: shr    %cl,%ebx
[(0x161,0)] @{asm:=shr    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x161,1)] ; %tmpr1_32 := %ebx
[(0x161,2)] ; StaticArrow (0x161,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x163,0); StaticArrow (0x161,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x161,3)
[(0x161,3)] ; %ebx := (RSH %ebx %tmpr0_8{0;8})
[(0x161,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x161,5)] ; %ebx := (AND %ebx (NOT (LSH (NOT 0x0) %tmpr0_8{0;8}))){0;1}
[(0x161,6)] ; StaticArrow (0x161,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x163,0); StaticArrow (0x161,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x161,7)
[(0x161,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x161,8)] ; %eflags{7;1} := %ebx{31;1}
[(0x161,9)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x161,10)] ; StaticArrow (0x161,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x163,0)
[(0x163,0)] 

**** Decode instruction: shr    %cl,%ecx
[(0x163,0)] @{asm:=shr    %cl,%ecx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x163,1)] ; %tmpr1_32 := %ecx
[(0x163,2)] ; StaticArrow (0x163,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x165,0); StaticArrow (0x163,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x163,3)
[(0x163,3)] ; %ecx := (RSH %ecx %tmpr0_8{0;8})
[(0x163,4)] ; %eflags{0;1} := (RSH %ecx (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x163,5)] ; %ecx := (AND %ecx (NOT (LSH (NOT 0x0) %tmpr0_8{0;8}))){0;1}
[(0x163,6)] ; StaticArrow (0x163,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x165,0); StaticArrow (0x163,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x163,7)
[(0x163,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x163,8)] ; %eflags{7;1} := %ecx{31;1}
[(0x163,9)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x163,10)] ; StaticArrow (0x163,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x165,0)
[(0x165,0)] 

**** Decode instruction: shrl   %cl,0x12345678
[(0x165,0)] @{asm:=shrl   %cl,0x12345678}@ ; %tmpr0_8{0;8} := (AND (EXTRACT %ecx{0;8} 0x0 0x20){0;8} 0x1F{0;8})
[(0x165,1)] ; %tmpr1_32 := [0x12345678]
[(0x165,2)] ; StaticArrow (0x165,2) Skip << (EQ %tmpr0_8{0;8} 0x0) >> --> (0x16B,0); StaticArrow (0x165,2) Skip << (NEQ %tmpr0_8{0;8} 0x0) >> --> (0x165,3)
[(0x165,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_8{0;8})
[(0x165,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_8{0;8} 0x1)){0;1}
[(0x165,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_8{0;8}))){0;1}
[(0x165,6)] ; StaticArrow (0x165,6) Skip << (NEQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x16B,0); StaticArrow (0x165,6) Skip << (EQ %tmpr0_8{0;8} 0x1){0;1} >> --> (0x165,7)
[(0x165,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x165,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x165,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x165,10)] ; StaticArrow (0x165,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x16B,0)
[(0x16B,0)] 

**** Decode instruction: shr    $0x3,%ebx
[(0x16B,0)] @{asm:=shr    $0x3,%ebx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x16B,1)] ; %tmpr1_32 := %ebx
[(0x16B,2)] ; StaticArrow (0x16B,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x16E,0); StaticArrow (0x16B,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x16B,3)
[(0x16B,3)] ; %ebx := (RSH %ebx %tmpr0_32)
[(0x16B,4)] ; %eflags{0;1} := (RSH %ebx (SUB %tmpr0_32 0x1)){0;1}
[(0x16B,5)] ; %ebx := (AND %ebx (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x16B,6)] ; StaticArrow (0x16B,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x16E,0); StaticArrow (0x16B,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x16B,7)
[(0x16B,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x16B,8)] ; %eflags{7;1} := %ebx{31;1}
[(0x16B,9)] ; %eflags{6;1} := (EQ %ebx 0x0){0;1}
[(0x16B,10)] ; StaticArrow (0x16B,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ebx{0;1}){0;1} %ebx{1;1}){0;1} %ebx{2;1}){0;1} %ebx{3;1}){0;1} %ebx{4;1}){0;1} %ebx{5;1}){0;1} %ebx{6;1}){0;1} %ebx{7;1}){0;1}  --> (0x16E,0)
[(0x16E,0)] 

**** Decode instruction: shr    $0x3,%ecx
[(0x16E,0)] @{asm:=shr    $0x3,%ecx}@ ; %tmpr0_32 := (AND 0x3 0x1F)
[(0x16E,1)] ; %tmpr1_32 := %ecx
[(0x16E,2)] ; StaticArrow (0x16E,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x171,0); StaticArrow (0x16E,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x16E,3)
[(0x16E,3)] ; %ecx := (RSH %ecx %tmpr0_32)
[(0x16E,4)] ; %eflags{0;1} := (RSH %ecx (SUB %tmpr0_32 0x1)){0;1}
[(0x16E,5)] ; %ecx := (AND %ecx (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x16E,6)] ; StaticArrow (0x16E,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x171,0); StaticArrow (0x16E,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x16E,7)
[(0x16E,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x16E,8)] ; %eflags{7;1} := %ecx{31;1}
[(0x16E,9)] ; %eflags{6;1} := (EQ %ecx 0x0){0;1}
[(0x16E,10)] ; StaticArrow (0x16E,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} %ecx{0;1}){0;1} %ecx{1;1}){0;1} %ecx{2;1}){0;1} %ecx{3;1}){0;1} %ecx{4;1}){0;1} %ecx{5;1}){0;1} %ecx{6;1}){0;1} %ecx{7;1}){0;1}  --> (0x171,0)
[(0x171,0)] 

**** Decode instruction: shrl   $0x3,0x12345678
[(0x171,0)] @{asm:=shrl   $0x3,0x12345678}@ ; %tmpr0_32 := (AND (EXTRACT 0x3 0x0 0x20) 0x1F)
[(0x171,1)] ; %tmpr1_32 := [0x12345678]
[(0x171,2)] ; StaticArrow (0x171,2) Skip << (EQ %tmpr0_32 0x0) >> --> (0x178,0); StaticArrow (0x171,2) Skip << (NEQ %tmpr0_32 0x0) >> --> (0x171,3)
[(0x171,3)] ; [0x12345678] := (RSH [0x12345678] %tmpr0_32)
[(0x171,4)] ; %eflags{0;1} := (RSH [0x12345678] (SUB %tmpr0_32 0x1)){0;1}
[(0x171,5)] ; [0x12345678] := (AND [0x12345678] (NOT (LSH (NOT 0x0) %tmpr0_32))){0;1}
[(0x171,6)] ; StaticArrow (0x171,6) Skip << (NEQ %tmpr0_32 0x1){0;1} >> --> (0x178,0); StaticArrow (0x171,6) Skip << (EQ %tmpr0_32 0x1){0;1} >> --> (0x171,7)
[(0x171,7)] ; %eflags{11;1} := (LSH %tmpr1_32 0x1F){0;1}
[(0x171,8)] ; %eflags{7;1} := [0x12345678]{31;1}
[(0x171,9)] ; %eflags{6;1} := (EQ [0x12345678] 0x0){0;1}
[(0x171,10)] ; StaticArrow (0x171,10) %eflags{2;1} := (XOR (XOR (XOR (XOR (XOR (XOR (XOR (XOR 0x1{0;1} [0x12345678]{0;1}){0;1} [0x12345678]{1;1}){0;1} [0x12345678]{2;1}){0;1} [0x12345678]{3;1}){0;1} [0x12345678]{4;1}){0;1} [0x12345678]{5;1}){0;1} [0x12345678]{6;1}){0;1} [0x12345678]{7;1}){0;1}  --> (0x178,0)
[(0x178,0)] 

