**** Decode instruction: idivb  0xff
[0x0,0] @{asm:=idivb  0xff}@ << (NEQ [0xff{0;32}]{0;8} 0x0{0;8}){0;1} >> Skip --> (0x0,1);
[0x0,1] %tmpr0_16{0;16} := (DIV_S %eax{0;16} (EXTEND_S [0xff{0;32}]{0;8} 0x10{0;32}){0;16}){0;16} --> (0x0,2);
[0x0,2] << (OR (GT_S %tmpr0_16{0;16} (EXTEND_S 0x7f{0;8} 0x10{0;32}){0;16}){0;1} (LT_S %tmpr0_16{0;16} (EXTEND_S 0x80{0;8} 0x10{0;32}){0;16}){0;1}){0;1} >> Skip --> (0x6,0); << (NOT (OR (GT_S %tmpr0_16{0;16} (EXTEND_S 0x7f{0;8} 0x10{0;32}){0;16}){0;1} (LT_S %tmpr0_16{0;16} (EXTEND_S 0x80{0;8} 0x10{0;32}){0;16}){0;1}){0;1}){0;1} >> Skip --> (0x0,3);
[0x0,3] %tmpr1_8{0;8} := (MODULO %eax{0;16} (EXTEND_S [0xff{0;32}]{0;8} 0x10{0;32}){0;16}){0;8} --> (0x0,4);
[0x0,4] %eax{0;8} := %tmpr0_16{0;8} --> (0x0,5);
[0x0,5] %eax{8;8} := %tmpr1_8{0;8} --> (0x6,0);
[0x6,0]

**** Decode instruction: idiv   %bl
[0x6,0] @{asm:=idiv   %bl}@ << (NEQ %ebx{0;8} 0x0{0;8}){0;1} >> Skip --> (0x6,1);
[0x6,1] %tmpr0_16{0;16} := (DIV_S %eax{0;16} (EXTEND_S %ebx{0;8} 0x10{0;32}){0;16}){0;16} --> (0x6,2);
[0x6,2] << (OR (GT_S %tmpr0_16{0;16} (EXTEND_S 0x7f{0;8} 0x10{0;32}){0;16}){0;1} (LT_S %tmpr0_16{0;16} (EXTEND_S 0x80{0;8} 0x10{0;32}){0;16}){0;1}){0;1} >> Skip --> (0x8,0); << (NOT (OR (GT_S %tmpr0_16{0;16} (EXTEND_S 0x7f{0;8} 0x10{0;32}){0;16}){0;1} (LT_S %tmpr0_16{0;16} (EXTEND_S 0x80{0;8} 0x10{0;32}){0;16}){0;1}){0;1}){0;1} >> Skip --> (0x6,3);
[0x6,3] %tmpr1_8{0;8} := (MODULO %eax{0;16} (EXTEND_S %ebx{0;8} 0x10{0;32}){0;16}){0;8} --> (0x6,4);
[0x6,4] %eax{0;8} := %tmpr0_16{0;8} --> (0x6,5);
[0x6,5] %eax{8;8} := %tmpr1_8{0;8} --> (0x8,0);
[0x8,0]

**** Decode instruction: idivw  0xff
[0x8,0] @{asm:=idivw  0xff}@ << (NEQ [0xff{0;32}]{0;16} 0x0{0;16}){0;1} >> Skip --> (0x8,1);
[0x8,1] %tmpr0_32{0;32} := (DIV_S (CC %edx{0;16} %eax{0;16}){0;32} (EXTEND_S [0xff{0;32}]{0;16} 0x20{0;32}){0;32}){0;32} --> (0x8,2);
[0x8,2] << (OR (GT_S %tmpr0_32{0;32} (EXTEND_S 0x7fff{0;16} 0x20{0;32}){0;32}){0;1} (LT_S %tmpr0_32{0;32} (EXTEND_S 0x8000{0;16} 0x20{0;32}){0;32}){0;1}){0;1} >> Skip --> (0xf,0); << (NOT (OR (GT_S %tmpr0_32{0;32} (EXTEND_S 0x7fff{0;16} 0x20{0;32}){0;32}){0;1} (LT_S %tmpr0_32{0;32} (EXTEND_S 0x8000{0;16} 0x20{0;32}){0;32}){0;1}){0;1}){0;1} >> Skip --> (0x8,3);
[0x8,3] %tmpr1_16{0;16} := (MODULO (CC %edx{0;16} %eax{0;16}){0;32} (EXTEND_S [0xff{0;32}]{0;16} 0x20{0;32}){0;32}){0;16} --> (0x8,4);
[0x8,4] %eax{0;16} := %tmpr0_32{0;16} --> (0x8,5);
[0x8,5] %edx{0;16} := %tmpr1_16{0;16} --> (0xf,0);
[0xf,0]

**** Decode instruction: idiv   %bx
[0xf,0] @{asm:=idiv   %bx}@ << (NEQ %ebx{0;16} 0x0{0;16}){0;1} >> Skip --> (0xf,1);
[0xf,1] %tmpr0_32{0;32} := (DIV_S (CC %edx{0;16} %eax{0;16}){0;32} (EXTEND_S %ebx{0;16} 0x20{0;32}){0;32}){0;32} --> (0xf,2);
[0xf,2] << (OR (GT_S %tmpr0_32{0;32} (EXTEND_S 0x7fff{0;16} 0x20{0;32}){0;32}){0;1} (LT_S %tmpr0_32{0;32} (EXTEND_S 0x8000{0;16} 0x20{0;32}){0;32}){0;1}){0;1} >> Skip --> (0x12,0); << (NOT (OR (GT_S %tmpr0_32{0;32} (EXTEND_S 0x7fff{0;16} 0x20{0;32}){0;32}){0;1} (LT_S %tmpr0_32{0;32} (EXTEND_S 0x8000{0;16} 0x20{0;32}){0;32}){0;1}){0;1}){0;1} >> Skip --> (0xf,3);
[0xf,3] %tmpr1_16{0;16} := (MODULO (CC %edx{0;16} %eax{0;16}){0;32} (EXTEND_S %ebx{0;16} 0x20{0;32}){0;32}){0;16} --> (0xf,4);
[0xf,4] %eax{0;16} := %tmpr0_32{0;16} --> (0xf,5);
[0xf,5] %edx{0;16} := %tmpr1_16{0;16} --> (0x12,0);
[0x12,0]

**** Decode instruction: idivl  0xff
[0x12,0] @{asm:=idivl  0xff}@ << (NEQ [0xff{0;32}]{0;32} 0x0{0;32}){0;1} >> Skip --> (0x12,1);
[0x12,1] %tmpr0_64{0;64} := (DIV_S (CC %edx{0;32} %eax{0;32}){0;64} (EXTEND_S [0xff{0;32}]{0;32} 0x40{0;32}){0;64}){0;64} --> (0x12,2);
[0x12,2] << (OR (GT_S %tmpr0_64{0;64} (EXTEND_S 0x7fffffff{0;32} 0x40{0;32}){0;64}){0;1} (LT_S %tmpr0_64{0;64} (EXTEND_S 0x80000000{0;32} 0x40{0;32}){0;64}){0;1}){0;1} >> Skip --> (0x18,0); << (NOT (OR (GT_S %tmpr0_64{0;64} (EXTEND_S 0x7fffffff{0;32} 0x40{0;32}){0;64}){0;1} (LT_S %tmpr0_64{0;64} (EXTEND_S 0x80000000{0;32} 0x40{0;32}){0;64}){0;1}){0;1}){0;1} >> Skip --> (0x12,3);
[0x12,3] %tmpr1_32{0;32} := (MODULO (CC %edx{0;32} %eax{0;32}){0;64} (EXTEND_S [0xff{0;32}]{0;32} 0x40{0;32}){0;64}){0;32} --> (0x12,4);
[0x12,4] %eax{0;32} := %tmpr0_64{0;32} --> (0x12,5);
[0x12,5] %edx{0;32} := %tmpr1_32{0;32} --> (0x18,0);
[0x18,0]

**** Decode instruction: idiv   %ebx
[0x18,0] @{asm:=idiv   %ebx}@ << (NEQ %ebx{0;32} 0x0{0;32}){0;1} >> Skip --> (0x18,1);
[0x18,1] %tmpr0_64{0;64} := (DIV_S (CC %edx{0;32} %eax{0;32}){0;64} (EXTEND_S %ebx{0;32} 0x40{0;32}){0;64}){0;64} --> (0x18,2);
[0x18,2] << (OR (GT_S %tmpr0_64{0;64} (EXTEND_S 0x7fffffff{0;32} 0x40{0;32}){0;64}){0;1} (LT_S %tmpr0_64{0;64} (EXTEND_S 0x80000000{0;32} 0x40{0;32}){0;64}){0;1}){0;1} >> Skip --> (0x1a,0); << (NOT (OR (GT_S %tmpr0_64{0;64} (EXTEND_S 0x7fffffff{0;32} 0x40{0;32}){0;64}){0;1} (LT_S %tmpr0_64{0;64} (EXTEND_S 0x80000000{0;32} 0x40{0;32}){0;64}){0;1}){0;1}){0;1} >> Skip --> (0x18,3);
[0x18,3] %tmpr1_32{0;32} := (MODULO (CC %edx{0;32} %eax{0;32}){0;64} (EXTEND_S %ebx{0;32} 0x40{0;32}){0;64}){0;32} --> (0x18,4);
[0x18,4] %eax{0;32} := %tmpr0_64{0;32} --> (0x18,5);
[0x18,5] %edx{0;32} := %tmpr1_32{0;32} --> (0x1a,0);
[0x1a,0]

