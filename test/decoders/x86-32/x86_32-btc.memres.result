**** Decode instruction: btc    %ax,%bx
[0x0,0] @{asm:=btc    %ax,%bx}@ %cf{0;1} := (RSH_U %ebx{0;16} (EXTEND_U %eax{0;4} 0x10{0;32}){0;16}){0;1} --> (0x0,1);
[0x0,1] << %cf{0;1} >> Skip --> (0x0,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x0,2);
[0x0,2] %ebx{0;16} := (OR %ebx{0;16} (LSH 0x1{0;16} (EXTEND_U %eax{0;4} 0x10{0;32}){0;16}){0;16}){0;16} --> (0x4,0);
[0x0,3] %ebx{0;16} := (AND %ebx{0;16} (NOT (LSH 0x1{0;16} (EXTEND_U %eax{0;4} 0x10{0;32}){0;16}){0;16}){0;16}){0;16} --> (0x4,0);
[0x4,0]

**** Decode instruction: btc    %eax,%ebx
[0x4,0] @{asm:=btc    %eax,%ebx}@ %cf{0;1} := (RSH_U %ebx{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;1} --> (0x4,1);
[0x4,1] << %cf{0;1} >> Skip --> (0x4,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x4,2);
[0x4,2] %ebx{0;32} := (OR %ebx{0;32} (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0x7,0);
[0x4,3] %ebx{0;32} := (AND %ebx{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0x7,0);
[0x7,0]

**** Decode instruction: btc    %ax,0x12345678
[0x7,0] @{asm:=btc    %ax,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;32}]{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;1} --> (0x7,1);
[0x7,1] << %cf{0;1} >> Skip --> (0x7,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x7,2);
[0x7,2] [0x12345678{0;32}]{0;32} := (OR [0x12345678{0;32}]{0;32} (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0xf,0);
[0x7,3] [0x12345678{0;32}]{0;32} := (AND [0x12345678{0;32}]{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0xf,0);
[0xf,0]

**** Decode instruction: btc    %eax,0x12345678
[0xf,0] @{asm:=btc    %eax,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;32}]{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;1} --> (0xf,1);
[0xf,1] << %cf{0;1} >> Skip --> (0xf,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0xf,2);
[0xf,2] [0x12345678{0;32}]{0;32} := (OR [0x12345678{0;32}]{0;32} (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0x16,0);
[0xf,3] [0x12345678{0;32}]{0;32} := (AND [0x12345678{0;32}]{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U %eax{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0x16,0);
[0x16,0]

**** Decode instruction: btc    $0x13,%ax
[0x16,0] @{asm:=btc    $0x13,%ax}@ %cf{0;1} := (RSH_U %eax{0;16} (EXTEND_U 0x3{0;4} 0x10{0;32}){0;16}){0;1} --> (0x16,1);
[0x16,1] << %cf{0;1} >> Skip --> (0x16,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x16,2);
[0x16,2] %eax{0;16} := (OR %eax{0;16} (LSH 0x1{0;16} (EXTEND_U 0x3{0;4} 0x10{0;32}){0;16}){0;16}){0;16} --> (0x1b,0);
[0x16,3] %eax{0;16} := (AND %eax{0;16} (NOT (LSH 0x1{0;16} (EXTEND_U 0x3{0;4} 0x10{0;32}){0;16}){0;16}){0;16}){0;16} --> (0x1b,0);
[0x1b,0]

**** Decode instruction: btc    $0x13,%eax
[0x1b,0] @{asm:=btc    $0x13,%eax}@ %cf{0;1} := (RSH_U %eax{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;1} --> (0x1b,1);
[0x1b,1] << %cf{0;1} >> Skip --> (0x1b,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x1b,2);
[0x1b,2] %eax{0;32} := (OR %eax{0;32} (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0x1f,0);
[0x1b,3] %eax{0;32} := (AND %eax{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0x1f,0);
[0x1f,0]

**** Decode instruction: btcw   $0x13,0x12345678
[0x1f,0] @{asm:=btcw   $0x13,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;32}]{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;1} --> (0x1f,1);
[0x1f,1] << %cf{0;1} >> Skip --> (0x1f,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x1f,2);
[0x1f,2] [0x12345678{0;32}]{0;32} := (OR [0x12345678{0;32}]{0;32} (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0x28,0);
[0x1f,3] [0x12345678{0;32}]{0;32} := (AND [0x12345678{0;32}]{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0x28,0);
[0x28,0]

**** Decode instruction: btcl   $0x13,0x12345678
[0x28,0] @{asm:=btcl   $0x13,0x12345678}@ %cf{0;1} := (RSH_U [0x12345678{0;32}]{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;1} --> (0x28,1);
[0x28,1] << %cf{0;1} >> Skip --> (0x28,3); << (NOT %cf{0;1}){0;1} >> Skip --> (0x28,2);
[0x28,2] [0x12345678{0;32}]{0;32} := (OR [0x12345678{0;32}]{0;32} (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32} --> (0x30,0);
[0x28,3] [0x12345678{0;32}]{0;32} := (AND [0x12345678{0;32}]{0;32} (NOT (LSH 0x1{0;32} (EXTEND_U 0x13{0;6} 0x20{0;32}){0;32}){0;32}){0;32}){0;32} --> (0x30,0);
[0x30,0]

