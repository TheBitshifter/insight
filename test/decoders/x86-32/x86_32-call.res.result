**** Decode instruction: call   0x1235
[0x0,0] @{asm:=call   0x1235}@ %esp{0;32} := (SUB %esp{0;32} 0x4{0;32}){0;32} --> (0x0,1);
[0x0,1] [%esp{0;32}]{0;32} := 0x5{0;32} --> (0x0,2);
[0x0,2] @{callret:=CALL}@ Skip --> (0x1235,0);
[0x1235,0]

**** Decode instruction: call   *0x1234
[0x5,0] @{asm:=call   *0x1234}@ %esp{0;32} := (SUB %esp{0;32} 0x4{0;32}){0;32} --> (0x5,1);
[0x5,1] [%esp{0;32}]{0;32} := 0xb{0;32} --> (0x5,2);
[0x5,2] @{callret:=CALL}@ Jmp --> [0x1234{0;32}]{0;32};

**** Decode instruction: call   *-0x4d2(%ebx)
[0xb,0] @{asm:=call   *-0x4d2(%ebx)}@ %esp{0;32} := (SUB %esp{0;32} 0x4{0;32}){0;32} --> (0xb,1);
[0xb,1] [%esp{0;32}]{0;32} := 0x11{0;32} --> (0xb,2);
[0xb,2] @{callret:=CALL}@ Jmp --> [(ADD %ebx{0;32} 0xfffffb2e{0;32}){0;32}]{0;32};

**** Decode instruction: call   *0xf012002
[0x11,0] @{asm:=call   *0xf012002}@ %esp{0;32} := (SUB %esp{0;32} 0x4{0;32}){0;32} --> (0x11,1);
[0x11,1] [%esp{0;32}]{0;32} := 0x17{0;32} --> (0x11,2);
[0x11,2] @{callret:=CALL}@ Jmp --> [0xf012002{0;32}]{0;32};

**** Decode instruction: call   *%eax
[0x17,0] @{asm:=call   *%eax}@ %esp{0;32} := (SUB %esp{0;32} 0x4{0;32}){0;32} --> (0x17,1);
[0x17,1] [%esp{0;32}]{0;32} := 0x19{0;32} --> (0x17,2);
[0x17,2] @{callret:=CALL}@ Jmp --> %eax{0;32};

