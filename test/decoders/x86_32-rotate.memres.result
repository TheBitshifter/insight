**** Decode instruction: rcrb   %cl,0x1111
[(0x0,0)] @{asm:=rcrb   %cl,0x1111}@ ; StaticArrow (0x0,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x0,1); StaticArrow (0x0,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x0,2)
[(0x0,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{7;1}){0;1}
[(0x0,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x0,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x0,4)] ; StaticArrow (0x0,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x0,5); StaticArrow (0x0,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x6,0)
[(0x0,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x0,6)] ; [0x1111]{0;8} := (ADD (DIV_U [0x1111]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %eflags{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x0,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x0,8)] ; StaticArrow (0x0,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x0,4)
[(0x6,0)] 

**** Decode instruction: rcrb   $0x7,0x1111
[(0x6,0)] @{asm:=rcrb   $0x7,0x1111}@ ; StaticArrow (0x6,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x6,1); StaticArrow (0x6,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x6,2)
[(0x6,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{7;1}){0;1}
[(0x6,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x6,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x6,4)] ; StaticArrow (0x6,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x6,5); StaticArrow (0x6,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD,0)
[(0x6,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x6,6)] ; [0x1111]{0;8} := (ADD (DIV_U [0x1111]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %eflags{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x6,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x6,8)] ; StaticArrow (0x6,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x6,4)
[(0xD,0)] 

**** Decode instruction: rcrw   0x1111
[(0xD,0)] @{asm:=rcrw   0x1111}@ ; StaticArrow (0xD,0) Skip << (EQ 0x1 0x1){0;1} >> --> (0xD,1); StaticArrow (0xD,0) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xD,2)
[(0xD,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}
[(0xD,2)] ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xD,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0xD,4)] ; StaticArrow (0xD,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD,5); StaticArrow (0xD,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x14,0)
[(0xD,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xD,6)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xD,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0xD,8)] ; StaticArrow (0xD,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xD,4)
[(0x14,0)] 

**** Decode instruction: rcrw   %cl,0x1111
[(0x14,0)] @{asm:=rcrw   %cl,0x1111}@ ; StaticArrow (0x14,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x14,1); StaticArrow (0x14,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x14,2)
[(0x14,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}
[(0x14,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x14,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x14,4)] ; StaticArrow (0x14,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x14,5); StaticArrow (0x14,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x1B,0)
[(0x14,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x14,6)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0x14,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x14,8)] ; StaticArrow (0x14,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x14,4)
[(0x1B,0)] 

**** Decode instruction: rcrw   $0x7,0x1111
[(0x1B,0)] @{asm:=rcrw   $0x7,0x1111}@ ; StaticArrow (0x1B,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x1B,1); StaticArrow (0x1B,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x1B,2)
[(0x1B,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}
[(0x1B,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x1B,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x1B,4)] ; StaticArrow (0x1B,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x1B,5); StaticArrow (0x1B,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x23,0)
[(0x1B,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x1B,6)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0x1B,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x1B,8)] ; StaticArrow (0x1B,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x1B,4)
[(0x23,0)] 

**** Decode instruction: rcrl   0x1111
[(0x23,0)] @{asm:=rcrl   0x1111}@ ; StaticArrow (0x23,0) Skip << (EQ 0x1 0x1){0;1} >> --> (0x23,1); StaticArrow (0x23,0) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x23,2)
[(0x23,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}
[(0x23,2)] ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x23,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x23,4)] ; StaticArrow (0x23,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x23,5); StaticArrow (0x23,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x29,0)
[(0x23,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x23,6)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x23,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x23,8)] ; StaticArrow (0x23,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x23,4)
[(0x29,0)] 

**** Decode instruction: rcrl   %cl,0x1111
[(0x29,0)] @{asm:=rcrl   %cl,0x1111}@ ; StaticArrow (0x29,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x29,1); StaticArrow (0x29,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x29,2)
[(0x29,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}
[(0x29,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x29,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x29,4)] ; StaticArrow (0x29,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x29,5); StaticArrow (0x29,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x2F,0)
[(0x29,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x29,6)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x29,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x29,8)] ; StaticArrow (0x29,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x29,4)
[(0x2F,0)] 

**** Decode instruction: rcrl   $0x7,0x1111
[(0x2F,0)] @{asm:=rcrl   $0x7,0x1111}@ ; StaticArrow (0x2F,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x2F,1); StaticArrow (0x2F,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x2F,2)
[(0x2F,1)] ; %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}
[(0x2F,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x2F,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x2F,4)] ; StaticArrow (0x2F,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x2F,5); StaticArrow (0x2F,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x36,0)
[(0x2F,5)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x2F,6)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x2F,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x2F,8)] ; StaticArrow (0x2F,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x2F,4)
[(0x36,0)] 

**** Decode instruction: rcr    %cl,%bh
[(0x36,0)] @{asm:=rcr    %cl,%bh}@ ; StaticArrow (0x36,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x36,1); StaticArrow (0x36,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x36,2)
[(0x36,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}
[(0x36,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x36,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x36,4)] ; StaticArrow (0x36,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x36,5); StaticArrow (0x36,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x38,0)
[(0x36,5)] ; %tmpr1_1{0;1} := %ebx{8;1}
[(0x36,6)] ; %ebx{8;8} := (ADD (DIV_U %ebx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %eflags{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x36,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x36,8)] ; StaticArrow (0x36,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x36,4)
[(0x38,0)] 

**** Decode instruction: rcr    $0x7,%bh
[(0x38,0)] @{asm:=rcr    $0x7,%bh}@ ; StaticArrow (0x38,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x38,1); StaticArrow (0x38,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x38,2)
[(0x38,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}
[(0x38,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x38,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x38,4)] ; StaticArrow (0x38,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x38,5); StaticArrow (0x38,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x3B,0)
[(0x38,5)] ; %tmpr1_1{0;1} := %ebx{8;1}
[(0x38,6)] ; %ebx{8;8} := (ADD (DIV_U %ebx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %eflags{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x38,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x38,8)] ; StaticArrow (0x38,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x38,4)
[(0x3B,0)] 

**** Decode instruction: rcr    %bx
[(0x3B,0)] @{asm:=rcr    %bx}@ ; StaticArrow (0x3B,0) Skip << (EQ 0x1 0x1){0;1} >> --> (0x3B,1); StaticArrow (0x3B,0) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x3B,2)
[(0x3B,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}
[(0x3B,2)] ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x3B,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x3B,4)] ; StaticArrow (0x3B,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x3B,5); StaticArrow (0x3B,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x3E,0)
[(0x3B,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x3B,6)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0x3B,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x3B,8)] ; StaticArrow (0x3B,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x3B,4)
[(0x3E,0)] 

**** Decode instruction: rcr    %cl,%bx
[(0x3E,0)] @{asm:=rcr    %cl,%bx}@ ; StaticArrow (0x3E,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x3E,1); StaticArrow (0x3E,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x3E,2)
[(0x3E,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}
[(0x3E,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x3E,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x3E,4)] ; StaticArrow (0x3E,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x3E,5); StaticArrow (0x3E,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x41,0)
[(0x3E,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x3E,6)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0x3E,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x3E,8)] ; StaticArrow (0x3E,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x3E,4)
[(0x41,0)] 

**** Decode instruction: rcr    $0x7,%bx
[(0x41,0)] @{asm:=rcr    $0x7,%bx}@ ; StaticArrow (0x41,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x41,1); StaticArrow (0x41,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x41,2)
[(0x41,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}
[(0x41,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x41,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x41,4)] ; StaticArrow (0x41,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x41,5); StaticArrow (0x41,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x45,0)
[(0x41,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x41,6)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %eflags{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0x41,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x41,8)] ; StaticArrow (0x41,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x41,4)
[(0x45,0)] 

**** Decode instruction: rcr    %ebx
[(0x45,0)] @{asm:=rcr    %ebx}@ ; StaticArrow (0x45,0) Skip << (EQ 0x1 0x1){0;1} >> --> (0x45,1); StaticArrow (0x45,0) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x45,2)
[(0x45,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}
[(0x45,2)] ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x45,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x45,4)] ; StaticArrow (0x45,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x45,5); StaticArrow (0x45,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x47,0)
[(0x45,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x45,6)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x45,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x45,8)] ; StaticArrow (0x45,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x45,4)
[(0x47,0)] 

**** Decode instruction: rcr    %cl,%ebx
[(0x47,0)] @{asm:=rcr    %cl,%ebx}@ ; StaticArrow (0x47,0) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x47,1); StaticArrow (0x47,0) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x47,2)
[(0x47,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}
[(0x47,2)] ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x47,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x47,4)] ; StaticArrow (0x47,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x47,5); StaticArrow (0x47,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x49,0)
[(0x47,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x47,6)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x47,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x47,8)] ; StaticArrow (0x47,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x47,4)
[(0x49,0)] 

**** Decode instruction: rcr    $0x7,%ebx
[(0x49,0)] @{asm:=rcr    $0x7,%ebx}@ ; StaticArrow (0x49,0) Skip << (EQ 0x7 0x1){0;1} >> --> (0x49,1); StaticArrow (0x49,0) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x49,2)
[(0x49,1)] ; %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}
[(0x49,2)] ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x49,3)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x49,4)] ; StaticArrow (0x49,4) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x49,5); StaticArrow (0x49,4) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x4C,0)
[(0x49,5)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0x49,6)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %eflags{0;1} 0x20) 0xFFFFFFFF80000000))
[(0x49,7)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x49,8)] ; StaticArrow (0x49,8) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x49,4)
[(0x4C,0)] 

**** Decode instruction: rclb   %cl,0x1111
[(0x4C,0)] @{asm:=rclb   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x4C,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x4C,2)] ; StaticArrow (0x4C,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x4C,3); StaticArrow (0x4C,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x4C,7)
[(0x4C,3)] ; %tmpr1_1{0;1} := [0x1111]{7;1}
[(0x4C,4)] ; [0x1111]{0;8} := (ADD (MUL_U [0x1111]{0;8} 0x2{0;8}){0;8} (EXTEND_U %eflags{0;1} 0x8){0;8}){0;8}
[(0x4C,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x4C,6)] ; StaticArrow (0x4C,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x4C,2)
[(0x4C,7)] ; StaticArrow (0x4C,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x4C,8); StaticArrow (0x4C,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x52,0)
[(0x4C,8)] ; StaticArrow (0x4C,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{7;1}){0;1}  --> (0x52,0)
[(0x52,0)] 

**** Decode instruction: rclb   $0x7,0x1111
[(0x52,0)] @{asm:=rclb   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x52,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x52,2)] ; StaticArrow (0x52,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x52,3); StaticArrow (0x52,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x52,7)
[(0x52,3)] ; %tmpr1_1{0;1} := [0x1111]{7;1}
[(0x52,4)] ; [0x1111]{0;8} := (ADD (MUL_U [0x1111]{0;8} 0x2{0;8}){0;8} (EXTEND_U %eflags{0;1} 0x8){0;8}){0;8}
[(0x52,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x52,6)] ; StaticArrow (0x52,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x52,2)
[(0x52,7)] ; StaticArrow (0x52,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x52,8); StaticArrow (0x52,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x59,0)
[(0x52,8)] ; StaticArrow (0x52,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{7;1}){0;1}  --> (0x59,0)
[(0x59,0)] 

**** Decode instruction: rclw   0x1111
[(0x59,0)] @{asm:=rclw   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x59,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x59,2)] ; StaticArrow (0x59,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x59,3); StaticArrow (0x59,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x59,7)
[(0x59,3)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0x59,4)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x59,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x59,6)] ; StaticArrow (0x59,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x59,2)
[(0x59,7)] ; StaticArrow (0x59,7) Skip << (EQ 0x1 0x1){0;1} >> --> (0x59,8); StaticArrow (0x59,7) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x60,0)
[(0x59,8)] ; StaticArrow (0x59,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}  --> (0x60,0)
[(0x60,0)] 

**** Decode instruction: rclw   %cl,0x1111
[(0x60,0)] @{asm:=rclw   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x60,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x60,2)] ; StaticArrow (0x60,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x60,3); StaticArrow (0x60,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x60,7)
[(0x60,3)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0x60,4)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x60,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x60,6)] ; StaticArrow (0x60,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x60,2)
[(0x60,7)] ; StaticArrow (0x60,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x60,8); StaticArrow (0x60,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x67,0)
[(0x60,8)] ; StaticArrow (0x60,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}  --> (0x67,0)
[(0x67,0)] 

**** Decode instruction: rclw   $0x7,0x1111
[(0x67,0)] @{asm:=rclw   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x67,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x67,2)] ; StaticArrow (0x67,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x67,3); StaticArrow (0x67,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x67,7)
[(0x67,3)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0x67,4)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x67,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x67,6)] ; StaticArrow (0x67,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x67,2)
[(0x67,7)] ; StaticArrow (0x67,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x67,8); StaticArrow (0x67,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x6F,0)
[(0x67,8)] ; StaticArrow (0x67,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{15;1}){0;1}  --> (0x6F,0)
[(0x6F,0)] 

**** Decode instruction: rcll   0x1111
[(0x6F,0)] @{asm:=rcll   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x6F,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x6F,2)] ; StaticArrow (0x6F,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x6F,3); StaticArrow (0x6F,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x6F,7)
[(0x6F,3)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x6F,4)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x6F,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x6F,6)] ; StaticArrow (0x6F,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x6F,2)
[(0x6F,7)] ; StaticArrow (0x6F,7) Skip << (EQ 0x1 0x1){0;1} >> --> (0x6F,8); StaticArrow (0x6F,7) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x75,0)
[(0x6F,8)] ; StaticArrow (0x6F,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}  --> (0x75,0)
[(0x75,0)] 

**** Decode instruction: rcll   %cl,0x1111
[(0x75,0)] @{asm:=rcll   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x75,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x75,2)] ; StaticArrow (0x75,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x75,3); StaticArrow (0x75,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x75,7)
[(0x75,3)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x75,4)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x75,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x75,6)] ; StaticArrow (0x75,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x75,2)
[(0x75,7)] ; StaticArrow (0x75,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x75,8); StaticArrow (0x75,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x7B,0)
[(0x75,8)] ; StaticArrow (0x75,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}  --> (0x7B,0)
[(0x7B,0)] 

**** Decode instruction: rcll   $0x7,0x1111
[(0x7B,0)] @{asm:=rcll   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x7B,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x7B,2)] ; StaticArrow (0x7B,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x7B,3); StaticArrow (0x7B,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x7B,7)
[(0x7B,3)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x7B,4)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x7B,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x7B,6)] ; StaticArrow (0x7B,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x7B,2)
[(0x7B,7)] ; StaticArrow (0x7B,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x7B,8); StaticArrow (0x7B,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x82,0)
[(0x7B,8)] ; StaticArrow (0x7B,8) %eflags{11;1} := (XOR %eflags{0;1} [0x1111]{31;1}){0;1}  --> (0x82,0)
[(0x82,0)] 

**** Decode instruction: rcl    %cl,%bh
[(0x82,0)] @{asm:=rcl    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x82,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x82,2)] ; StaticArrow (0x82,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x82,3); StaticArrow (0x82,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x82,7)
[(0x82,3)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x82,4)] ; %ebx{8;8} := (ADD (MUL_U %ebx{8;8} 0x2{0;8}){0;8} (EXTEND_U %eflags{0;1} 0x8){0;8}){0;8}
[(0x82,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x82,6)] ; StaticArrow (0x82,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x82,2)
[(0x82,7)] ; StaticArrow (0x82,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x82,8); StaticArrow (0x82,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x84,0)
[(0x82,8)] ; StaticArrow (0x82,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}  --> (0x84,0)
[(0x84,0)] 

**** Decode instruction: rcl    $0x7,%bh
[(0x84,0)] @{asm:=rcl    $0x7,%bh}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x84,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x9{0;8})
[(0x84,2)] ; StaticArrow (0x84,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x84,3); StaticArrow (0x84,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x84,7)
[(0x84,3)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x84,4)] ; %ebx{8;8} := (ADD (MUL_U %ebx{8;8} 0x2{0;8}){0;8} (EXTEND_U %eflags{0;1} 0x8){0;8}){0;8}
[(0x84,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x84,6)] ; StaticArrow (0x84,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x84,2)
[(0x84,7)] ; StaticArrow (0x84,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x84,8); StaticArrow (0x84,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x87,0)
[(0x84,8)] ; StaticArrow (0x84,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}  --> (0x87,0)
[(0x87,0)] 

**** Decode instruction: rcl    %bx
[(0x87,0)] @{asm:=rcl    %bx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x87,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x87,2)] ; StaticArrow (0x87,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x87,3); StaticArrow (0x87,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x87,7)
[(0x87,3)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x87,4)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x87,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x87,6)] ; StaticArrow (0x87,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x87,2)
[(0x87,7)] ; StaticArrow (0x87,7) Skip << (EQ 0x1 0x1){0;1} >> --> (0x87,8); StaticArrow (0x87,7) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x8A,0)
[(0x87,8)] ; StaticArrow (0x87,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}  --> (0x8A,0)
[(0x8A,0)] 

**** Decode instruction: rcl    %cl,%bx
[(0x8A,0)] @{asm:=rcl    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x8A,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x8A,2)] ; StaticArrow (0x8A,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x8A,3); StaticArrow (0x8A,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x8A,7)
[(0x8A,3)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x8A,4)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x8A,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x8A,6)] ; StaticArrow (0x8A,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x8A,2)
[(0x8A,7)] ; StaticArrow (0x8A,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x8A,8); StaticArrow (0x8A,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x8D,0)
[(0x8A,8)] ; StaticArrow (0x8A,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}  --> (0x8D,0)
[(0x8D,0)] 

**** Decode instruction: rcl    $0x7,%bx
[(0x8D,0)] @{asm:=rcl    $0x7,%bx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x8D,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x11{0;8})
[(0x8D,2)] ; StaticArrow (0x8D,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x8D,3); StaticArrow (0x8D,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x8D,7)
[(0x8D,3)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x8D,4)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %eflags{0;1} 0x10){0;16}){0;16}
[(0x8D,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x8D,6)] ; StaticArrow (0x8D,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x8D,2)
[(0x8D,7)] ; StaticArrow (0x8D,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x8D,8); StaticArrow (0x8D,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x91,0)
[(0x8D,8)] ; StaticArrow (0x8D,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{15;1}){0;1}  --> (0x91,0)
[(0x91,0)] 

**** Decode instruction: rcl    %ebx
[(0x91,0)] @{asm:=rcl    %ebx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x91,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x91,2)] ; StaticArrow (0x91,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x91,3); StaticArrow (0x91,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x91,7)
[(0x91,3)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x91,4)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x91,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x91,6)] ; StaticArrow (0x91,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x91,2)
[(0x91,7)] ; StaticArrow (0x91,7) Skip << (EQ 0x1 0x1){0;1} >> --> (0x91,8); StaticArrow (0x91,7) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x93,0)
[(0x91,8)] ; StaticArrow (0x91,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}  --> (0x93,0)
[(0x93,0)] 

**** Decode instruction: rcl    %cl,%ebx
[(0x93,0)] @{asm:=rcl    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x93,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x93,2)] ; StaticArrow (0x93,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x93,3); StaticArrow (0x93,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x93,7)
[(0x93,3)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x93,4)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x93,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x93,6)] ; StaticArrow (0x93,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x93,2)
[(0x93,7)] ; StaticArrow (0x93,7) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x93,8); StaticArrow (0x93,7) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x95,0)
[(0x93,8)] ; StaticArrow (0x93,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}  --> (0x95,0)
[(0x95,0)] 

**** Decode instruction: rcl    $0x7,%ebx
[(0x95,0)] @{asm:=rcl    $0x7,%ebx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x95,1)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x21{0;8})
[(0x95,2)] ; StaticArrow (0x95,2) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x95,3); StaticArrow (0x95,2) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x95,7)
[(0x95,3)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x95,4)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %eflags{0;1} 0x20))
[(0x95,5)] ; %eflags{0;1} := %tmpr1_1{0;1}
[(0x95,6)] ; StaticArrow (0x95,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x95,2)
[(0x95,7)] ; StaticArrow (0x95,7) Skip << (EQ 0x7 0x1){0;1} >> --> (0x95,8); StaticArrow (0x95,7) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x98,0)
[(0x95,8)] ; StaticArrow (0x95,8) %eflags{11;1} := (XOR %eflags{0;1} %ebx{31;1}){0;1}  --> (0x98,0)
[(0x98,0)] 

**** Decode instruction: rorb   %cl,0x1111
[(0x98,0)] @{asm:=rorb   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x98,1)] ; StaticArrow (0x98,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x98,2); StaticArrow (0x98,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x9E,0)
[(0x98,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0x98,3)] ; StaticArrow (0x98,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x98,4); StaticArrow (0x98,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x98,7)
[(0x98,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x98,5)] ; [0x1111]{0;8} := (ADD (DIV_U [0x1111]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x98,6)] ; StaticArrow (0x98,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x98,3)
[(0x98,7)] ; %eflags{0;1} := [0x1111]{7;1}
[(0x98,8)] ; StaticArrow (0x98,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x98,9); StaticArrow (0x98,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x9E,0)
[(0x98,9)] ; StaticArrow (0x98,9) %eflags{11;1} := (XOR [0x1111]{7;1} [0x1111]{6;1}){0;1}  --> (0x9E,0)
[(0x9E,0)] 

**** Decode instruction: rorb   $0x7,0x1111
[(0x9E,0)] @{asm:=rorb   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x9E,1)] ; StaticArrow (0x9E,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x9E,2); StaticArrow (0x9E,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xA5,0)
[(0x9E,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0x9E,3)] ; StaticArrow (0x9E,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x9E,4); StaticArrow (0x9E,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x9E,7)
[(0x9E,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0x9E,5)] ; [0x1111]{0;8} := (ADD (DIV_U [0x1111]{0;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0x9E,6)] ; StaticArrow (0x9E,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x9E,3)
[(0x9E,7)] ; %eflags{0;1} := [0x1111]{7;1}
[(0x9E,8)] ; StaticArrow (0x9E,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0x9E,9); StaticArrow (0x9E,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xA5,0)
[(0x9E,9)] ; StaticArrow (0x9E,9) %eflags{11;1} := (XOR [0x1111]{7;1} [0x1111]{6;1}){0;1}  --> (0xA5,0)
[(0xA5,0)] 

**** Decode instruction: rorw   0x1111
[(0xA5,0)] @{asm:=rorw   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xA5,1)] ; StaticArrow (0xA5,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xA5,2); StaticArrow (0xA5,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xAC,0)
[(0xA5,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xA5,3)] ; StaticArrow (0xA5,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xA5,4); StaticArrow (0xA5,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xA5,7)
[(0xA5,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xA5,5)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xA5,6)] ; StaticArrow (0xA5,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xA5,3)
[(0xA5,7)] ; %eflags{0;1} := [0x1111]{15;1}
[(0xA5,8)] ; StaticArrow (0xA5,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0xA5,9); StaticArrow (0xA5,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xAC,0)
[(0xA5,9)] ; StaticArrow (0xA5,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0xAC,0)
[(0xAC,0)] 

**** Decode instruction: rorw   %cl,0x1111
[(0xAC,0)] @{asm:=rorw   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xAC,1)] ; StaticArrow (0xAC,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xAC,2); StaticArrow (0xAC,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xB3,0)
[(0xAC,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xAC,3)] ; StaticArrow (0xAC,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xAC,4); StaticArrow (0xAC,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xAC,7)
[(0xAC,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xAC,5)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xAC,6)] ; StaticArrow (0xAC,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xAC,3)
[(0xAC,7)] ; %eflags{0;1} := [0x1111]{15;1}
[(0xAC,8)] ; StaticArrow (0xAC,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xAC,9); StaticArrow (0xAC,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xB3,0)
[(0xAC,9)] ; StaticArrow (0xAC,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0xB3,0)
[(0xB3,0)] 

**** Decode instruction: rorw   $0x7,0x1111
[(0xB3,0)] @{asm:=rorw   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xB3,1)] ; StaticArrow (0xB3,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xB3,2); StaticArrow (0xB3,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xBB,0)
[(0xB3,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xB3,3)] ; StaticArrow (0xB3,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xB3,4); StaticArrow (0xB3,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xB3,7)
[(0xB3,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xB3,5)] ; [0x1111]{0;16} := (ADD (DIV_U [0x1111]{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xB3,6)] ; StaticArrow (0xB3,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xB3,3)
[(0xB3,7)] ; %eflags{0;1} := [0x1111]{15;1}
[(0xB3,8)] ; StaticArrow (0xB3,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xB3,9); StaticArrow (0xB3,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xBB,0)
[(0xB3,9)] ; StaticArrow (0xB3,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0xBB,0)
[(0xBB,0)] 

**** Decode instruction: rorl   0x1111
[(0xBB,0)] @{asm:=rorl   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xBB,1)] ; StaticArrow (0xBB,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xBB,2); StaticArrow (0xBB,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xC1,0)
[(0xBB,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xBB,3)] ; StaticArrow (0xBB,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xBB,4); StaticArrow (0xBB,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xBB,7)
[(0xBB,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xBB,5)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xBB,6)] ; StaticArrow (0xBB,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xBB,3)
[(0xBB,7)] ; %eflags{0;1} := [0x1111]{31;1}
[(0xBB,8)] ; StaticArrow (0xBB,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0xBB,9); StaticArrow (0xBB,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xC1,0)
[(0xBB,9)] ; StaticArrow (0xBB,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0xC1,0)
[(0xC1,0)] 

**** Decode instruction: rorl   %cl,0x1111
[(0xC1,0)] @{asm:=rorl   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xC1,1)] ; StaticArrow (0xC1,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xC1,2); StaticArrow (0xC1,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xC7,0)
[(0xC1,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xC1,3)] ; StaticArrow (0xC1,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xC1,4); StaticArrow (0xC1,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xC1,7)
[(0xC1,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xC1,5)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xC1,6)] ; StaticArrow (0xC1,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xC1,3)
[(0xC1,7)] ; %eflags{0;1} := [0x1111]{31;1}
[(0xC1,8)] ; StaticArrow (0xC1,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xC1,9); StaticArrow (0xC1,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xC7,0)
[(0xC1,9)] ; StaticArrow (0xC1,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0xC7,0)
[(0xC7,0)] 

**** Decode instruction: rorl   $0x7,0x1111
[(0xC7,0)] @{asm:=rorl   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xC7,1)] ; StaticArrow (0xC7,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xC7,2); StaticArrow (0xC7,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xCE,0)
[(0xC7,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xC7,3)] ; StaticArrow (0xC7,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xC7,4); StaticArrow (0xC7,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xC7,7)
[(0xC7,4)] ; %tmpr1_1{0;1} := [0x1111]{0;1}
[(0xC7,5)] ; [0x1111] := (ADD (DIV_U [0x1111] 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xC7,6)] ; StaticArrow (0xC7,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xC7,3)
[(0xC7,7)] ; %eflags{0;1} := [0x1111]{31;1}
[(0xC7,8)] ; StaticArrow (0xC7,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xC7,9); StaticArrow (0xC7,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xCE,0)
[(0xC7,9)] ; StaticArrow (0xC7,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0xCE,0)
[(0xCE,0)] 

**** Decode instruction: ror    %cl,%bh
[(0xCE,0)] @{asm:=ror    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xCE,1)] ; StaticArrow (0xCE,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xCE,2); StaticArrow (0xCE,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD0,0)
[(0xCE,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0xCE,3)] ; StaticArrow (0xCE,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xCE,4); StaticArrow (0xCE,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xCE,7)
[(0xCE,4)] ; %tmpr1_1{0;1} := %ebx{8;1}
[(0xCE,5)] ; %ebx{8;8} := (ADD (DIV_U %ebx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0xCE,6)] ; StaticArrow (0xCE,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xCE,3)
[(0xCE,7)] ; %eflags{0;1} := %ebx{15;1}
[(0xCE,8)] ; StaticArrow (0xCE,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xCE,9); StaticArrow (0xCE,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xD0,0)
[(0xCE,9)] ; StaticArrow (0xCE,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0xD0,0)
[(0xD0,0)] 

**** Decode instruction: ror    $0x7,%bh
[(0xD0,0)] @{asm:=ror    $0x7,%bh}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xD0,1)] ; StaticArrow (0xD0,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD0,2); StaticArrow (0xD0,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD3,0)
[(0xD0,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0xD0,3)] ; StaticArrow (0xD0,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD0,4); StaticArrow (0xD0,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD0,7)
[(0xD0,4)] ; %tmpr1_1{0;1} := %ebx{8;1}
[(0xD0,5)] ; %ebx{8;8} := (ADD (DIV_U %ebx{8;8} 0x2{0;8}){0;8} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x8){0;8} 0x80{0;8})){0;8}
[(0xD0,6)] ; StaticArrow (0xD0,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xD0,3)
[(0xD0,7)] ; %eflags{0;1} := %ebx{15;1}
[(0xD0,8)] ; StaticArrow (0xD0,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xD0,9); StaticArrow (0xD0,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xD3,0)
[(0xD0,9)] ; StaticArrow (0xD0,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0xD3,0)
[(0xD3,0)] 

**** Decode instruction: ror    %bx
[(0xD3,0)] @{asm:=ror    %bx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xD3,1)] ; StaticArrow (0xD3,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD3,2); StaticArrow (0xD3,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD6,0)
[(0xD3,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xD3,3)] ; StaticArrow (0xD3,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD3,4); StaticArrow (0xD3,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD3,7)
[(0xD3,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xD3,5)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xD3,6)] ; StaticArrow (0xD3,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xD3,3)
[(0xD3,7)] ; %eflags{0;1} := %ebx{15;1}
[(0xD3,8)] ; StaticArrow (0xD3,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0xD3,9); StaticArrow (0xD3,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xD6,0)
[(0xD3,9)] ; StaticArrow (0xD3,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0xD6,0)
[(0xD6,0)] 

**** Decode instruction: ror    %cl,%bx
[(0xD6,0)] @{asm:=ror    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xD6,1)] ; StaticArrow (0xD6,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD6,2); StaticArrow (0xD6,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD9,0)
[(0xD6,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xD6,3)] ; StaticArrow (0xD6,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD6,4); StaticArrow (0xD6,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD6,7)
[(0xD6,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xD6,5)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xD6,6)] ; StaticArrow (0xD6,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xD6,3)
[(0xD6,7)] ; %eflags{0;1} := %ebx{15;1}
[(0xD6,8)] ; StaticArrow (0xD6,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xD6,9); StaticArrow (0xD6,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xD9,0)
[(0xD6,9)] ; StaticArrow (0xD6,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0xD9,0)
[(0xD9,0)] 

**** Decode instruction: ror    $0x7,%bx
[(0xD9,0)] @{asm:=ror    $0x7,%bx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xD9,1)] ; StaticArrow (0xD9,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD9,2); StaticArrow (0xD9,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xDD,0)
[(0xD9,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xD9,3)] ; StaticArrow (0xD9,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xD9,4); StaticArrow (0xD9,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xD9,7)
[(0xD9,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xD9,5)] ; %ebx{0;16} := (ADD (DIV_U %ebx{0;16} 0x2{0;16}){0;16} (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x10){0;16} 0x8000{0;16})){0;16}
[(0xD9,6)] ; StaticArrow (0xD9,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xD9,3)
[(0xD9,7)] ; %eflags{0;1} := %ebx{15;1}
[(0xD9,8)] ; StaticArrow (0xD9,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xD9,9); StaticArrow (0xD9,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xDD,0)
[(0xD9,9)] ; StaticArrow (0xD9,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0xDD,0)
[(0xDD,0)] 

**** Decode instruction: ror    %ebx
[(0xDD,0)] @{asm:=ror    %ebx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xDD,1)] ; StaticArrow (0xDD,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xDD,2); StaticArrow (0xDD,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xDF,0)
[(0xDD,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xDD,3)] ; StaticArrow (0xDD,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xDD,4); StaticArrow (0xDD,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xDD,7)
[(0xDD,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xDD,5)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xDD,6)] ; StaticArrow (0xDD,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xDD,3)
[(0xDD,7)] ; %eflags{0;1} := %ebx{31;1}
[(0xDD,8)] ; StaticArrow (0xDD,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0xDD,9); StaticArrow (0xDD,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xDF,0)
[(0xDD,9)] ; StaticArrow (0xDD,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0xDF,0)
[(0xDF,0)] 

**** Decode instruction: ror    %cl,%ebx
[(0xDF,0)] @{asm:=ror    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xDF,1)] ; StaticArrow (0xDF,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xDF,2); StaticArrow (0xDF,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xE1,0)
[(0xDF,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xDF,3)] ; StaticArrow (0xDF,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xDF,4); StaticArrow (0xDF,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xDF,7)
[(0xDF,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xDF,5)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xDF,6)] ; StaticArrow (0xDF,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xDF,3)
[(0xDF,7)] ; %eflags{0;1} := %ebx{31;1}
[(0xDF,8)] ; StaticArrow (0xDF,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xDF,9); StaticArrow (0xDF,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xE1,0)
[(0xDF,9)] ; StaticArrow (0xDF,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0xE1,0)
[(0xE1,0)] 

**** Decode instruction: ror    $0x7,%ebx
[(0xE1,0)] @{asm:=ror    $0x7,%ebx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xE1,1)] ; StaticArrow (0xE1,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xE1,2); StaticArrow (0xE1,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xE4,0)
[(0xE1,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0xE1,3)] ; StaticArrow (0xE1,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xE1,4); StaticArrow (0xE1,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xE1,7)
[(0xE1,4)] ; %tmpr1_1{0;1} := %ebx{0;1}
[(0xE1,5)] ; %ebx := (ADD (DIV_U %ebx 0x2) (MUL_U (EXTEND_U %tmpr1_1{0;1} 0x20) 0xFFFFFFFF80000000))
[(0xE1,6)] ; StaticArrow (0xE1,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xE1,3)
[(0xE1,7)] ; %eflags{0;1} := %ebx{31;1}
[(0xE1,8)] ; StaticArrow (0xE1,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xE1,9); StaticArrow (0xE1,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xE4,0)
[(0xE1,9)] ; StaticArrow (0xE1,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0xE4,0)
[(0xE4,0)] 

**** Decode instruction: rolb   %cl,0x1111
[(0xE4,0)] @{asm:=rolb   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xE4,1)] ; StaticArrow (0xE4,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xE4,2); StaticArrow (0xE4,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xEA,0)
[(0xE4,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0xE4,3)] ; StaticArrow (0xE4,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xE4,4); StaticArrow (0xE4,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xE4,7)
[(0xE4,4)] ; %tmpr1_1{0;1} := [0x1111]{7;1}
[(0xE4,5)] ; [0x1111]{0;8} := (ADD (MUL_U [0x1111]{0;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8){0;8}){0;8}
[(0xE4,6)] ; StaticArrow (0xE4,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xE4,3)
[(0xE4,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0xE4,8)] ; StaticArrow (0xE4,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xE4,9); StaticArrow (0xE4,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xEA,0)
[(0xE4,9)] ; StaticArrow (0xE4,9) %eflags{11;1} := (XOR [0x1111]{7;1} [0x1111]{6;1}){0;1}  --> (0xEA,0)
[(0xEA,0)] 

**** Decode instruction: rolb   $0x7,0x1111
[(0xEA,0)] @{asm:=rolb   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xEA,1)] ; StaticArrow (0xEA,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xEA,2); StaticArrow (0xEA,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xF1,0)
[(0xEA,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0xEA,3)] ; StaticArrow (0xEA,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xEA,4); StaticArrow (0xEA,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xEA,7)
[(0xEA,4)] ; %tmpr1_1{0;1} := [0x1111]{7;1}
[(0xEA,5)] ; [0x1111]{0;8} := (ADD (MUL_U [0x1111]{0;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8){0;8}){0;8}
[(0xEA,6)] ; StaticArrow (0xEA,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xEA,3)
[(0xEA,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0xEA,8)] ; StaticArrow (0xEA,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xEA,9); StaticArrow (0xEA,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0xF1,0)
[(0xEA,9)] ; StaticArrow (0xEA,9) %eflags{11;1} := (XOR [0x1111]{7;1} [0x1111]{6;1}){0;1}  --> (0xF1,0)
[(0xF1,0)] 

**** Decode instruction: rolw   0x1111
[(0xF1,0)] @{asm:=rolw   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0xF1,1)] ; StaticArrow (0xF1,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xF1,2); StaticArrow (0xF1,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xF8,0)
[(0xF1,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xF1,3)] ; StaticArrow (0xF1,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xF1,4); StaticArrow (0xF1,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xF1,7)
[(0xF1,4)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0xF1,5)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0xF1,6)] ; StaticArrow (0xF1,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xF1,3)
[(0xF1,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0xF1,8)] ; StaticArrow (0xF1,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0xF1,9); StaticArrow (0xF1,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0xF8,0)
[(0xF1,9)] ; StaticArrow (0xF1,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0xF8,0)
[(0xF8,0)] 

**** Decode instruction: rolw   %cl,0x1111
[(0xF8,0)] @{asm:=rolw   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0xF8,1)] ; StaticArrow (0xF8,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xF8,2); StaticArrow (0xF8,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xFF,0)
[(0xF8,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xF8,3)] ; StaticArrow (0xF8,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xF8,4); StaticArrow (0xF8,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xF8,7)
[(0xF8,4)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0xF8,5)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0xF8,6)] ; StaticArrow (0xF8,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xF8,3)
[(0xF8,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0xF8,8)] ; StaticArrow (0xF8,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0xF8,9); StaticArrow (0xF8,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0xFF,0)
[(0xF8,9)] ; StaticArrow (0xF8,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0xFF,0)
[(0xFF,0)] 

**** Decode instruction: rolw   $0x7,0x1111
[(0xFF,0)] @{asm:=rolw   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0xFF,1)] ; StaticArrow (0xFF,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xFF,2); StaticArrow (0xFF,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x107,0)
[(0xFF,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0xFF,3)] ; StaticArrow (0xFF,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0xFF,4); StaticArrow (0xFF,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0xFF,7)
[(0xFF,4)] ; %tmpr1_1{0;1} := [0x1111]{15;1}
[(0xFF,5)] ; [0x1111]{0;16} := (ADD (MUL_U [0x1111]{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0xFF,6)] ; StaticArrow (0xFF,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0xFF,3)
[(0xFF,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0xFF,8)] ; StaticArrow (0xFF,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0xFF,9); StaticArrow (0xFF,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x107,0)
[(0xFF,9)] ; StaticArrow (0xFF,9) %eflags{11;1} := (XOR [0x1111]{15;1} [0x1111]{14;1}){0;1}  --> (0x107,0)
[(0x107,0)] 

**** Decode instruction: roll   0x1111
[(0x107,0)] @{asm:=roll   0x1111}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x107,1)] ; StaticArrow (0x107,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x107,2); StaticArrow (0x107,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x10D,0)
[(0x107,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x107,3)] ; StaticArrow (0x107,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x107,4); StaticArrow (0x107,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x107,7)
[(0x107,4)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x107,5)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x107,6)] ; StaticArrow (0x107,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x107,3)
[(0x107,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0x107,8)] ; StaticArrow (0x107,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0x107,9); StaticArrow (0x107,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x10D,0)
[(0x107,9)] ; StaticArrow (0x107,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0x10D,0)
[(0x10D,0)] 

**** Decode instruction: roll   %cl,0x1111
[(0x10D,0)] @{asm:=roll   %cl,0x1111}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x10D,1)] ; StaticArrow (0x10D,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x10D,2); StaticArrow (0x10D,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x113,0)
[(0x10D,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x10D,3)] ; StaticArrow (0x10D,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x10D,4); StaticArrow (0x10D,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x10D,7)
[(0x10D,4)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x10D,5)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x10D,6)] ; StaticArrow (0x10D,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x10D,3)
[(0x10D,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0x10D,8)] ; StaticArrow (0x10D,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x10D,9); StaticArrow (0x10D,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x113,0)
[(0x10D,9)] ; StaticArrow (0x10D,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0x113,0)
[(0x113,0)] 

**** Decode instruction: roll   $0x7,0x1111
[(0x113,0)] @{asm:=roll   $0x7,0x1111}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x113,1)] ; StaticArrow (0x113,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x113,2); StaticArrow (0x113,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11A,0)
[(0x113,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x113,3)] ; StaticArrow (0x113,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x113,4); StaticArrow (0x113,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x113,7)
[(0x113,4)] ; %tmpr1_1{0;1} := [0x1111]{31;1}
[(0x113,5)] ; [0x1111] := (ADD (MUL_U [0x1111] 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x113,6)] ; StaticArrow (0x113,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x113,3)
[(0x113,7)] ; %eflags{0;1} := [0x1111]{0;1}
[(0x113,8)] ; StaticArrow (0x113,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0x113,9); StaticArrow (0x113,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x11A,0)
[(0x113,9)] ; StaticArrow (0x113,9) %eflags{11;1} := (XOR [0x1111]{31;1} [0x1111]{30;1}){0;1}  --> (0x11A,0)
[(0x11A,0)] 

**** Decode instruction: rol    %cl,%bh
[(0x11A,0)] @{asm:=rol    %cl,%bh}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x11A,1)] ; StaticArrow (0x11A,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11A,2); StaticArrow (0x11A,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11C,0)
[(0x11A,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0x11A,3)] ; StaticArrow (0x11A,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11A,4); StaticArrow (0x11A,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11A,7)
[(0x11A,4)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x11A,5)] ; %ebx{8;8} := (ADD (MUL_U %ebx{8;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8){0;8}){0;8}
[(0x11A,6)] ; StaticArrow (0x11A,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x11A,3)
[(0x11A,7)] ; %eflags{0;1} := %ebx{8;1}
[(0x11A,8)] ; StaticArrow (0x11A,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x11A,9); StaticArrow (0x11A,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x11C,0)
[(0x11A,9)] ; StaticArrow (0x11A,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0x11C,0)
[(0x11C,0)] 

**** Decode instruction: rol    $0x7,%bh
[(0x11C,0)] @{asm:=rol    $0x7,%bh}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x11C,1)] ; StaticArrow (0x11C,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11C,2); StaticArrow (0x11C,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11F,0)
[(0x11C,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x8{0;8})
[(0x11C,3)] ; StaticArrow (0x11C,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11C,4); StaticArrow (0x11C,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11C,7)
[(0x11C,4)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x11C,5)] ; %ebx{8;8} := (ADD (MUL_U %ebx{8;8} 0x2{0;8}){0;8} (EXTEND_U %tmpr1_1{0;1} 0x8){0;8}){0;8}
[(0x11C,6)] ; StaticArrow (0x11C,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x11C,3)
[(0x11C,7)] ; %eflags{0;1} := %ebx{8;1}
[(0x11C,8)] ; StaticArrow (0x11C,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0x11C,9); StaticArrow (0x11C,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x11F,0)
[(0x11C,9)] ; StaticArrow (0x11C,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0x11F,0)
[(0x11F,0)] 

**** Decode instruction: rol    %bx
[(0x11F,0)] @{asm:=rol    %bx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x11F,1)] ; StaticArrow (0x11F,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11F,2); StaticArrow (0x11F,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x122,0)
[(0x11F,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0x11F,3)] ; StaticArrow (0x11F,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x11F,4); StaticArrow (0x11F,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x11F,7)
[(0x11F,4)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x11F,5)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0x11F,6)] ; StaticArrow (0x11F,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x11F,3)
[(0x11F,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x11F,8)] ; StaticArrow (0x11F,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0x11F,9); StaticArrow (0x11F,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x122,0)
[(0x11F,9)] ; StaticArrow (0x11F,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0x122,0)
[(0x122,0)] 

**** Decode instruction: rol    %cl,%bx
[(0x122,0)] @{asm:=rol    %cl,%bx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x122,1)] ; StaticArrow (0x122,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x122,2); StaticArrow (0x122,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x125,0)
[(0x122,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0x122,3)] ; StaticArrow (0x122,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x122,4); StaticArrow (0x122,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x122,7)
[(0x122,4)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x122,5)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0x122,6)] ; StaticArrow (0x122,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x122,3)
[(0x122,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x122,8)] ; StaticArrow (0x122,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x122,9); StaticArrow (0x122,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x125,0)
[(0x122,9)] ; StaticArrow (0x122,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0x125,0)
[(0x125,0)] 

**** Decode instruction: rol    $0x7,%bx
[(0x125,0)] @{asm:=rol    $0x7,%bx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x125,1)] ; StaticArrow (0x125,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x125,2); StaticArrow (0x125,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x129,0)
[(0x125,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x10{0;8})
[(0x125,3)] ; StaticArrow (0x125,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x125,4); StaticArrow (0x125,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x125,7)
[(0x125,4)] ; %tmpr1_1{0;1} := %ebx{15;1}
[(0x125,5)] ; %ebx{0;16} := (ADD (MUL_U %ebx{0;16} 0x2{0;16}){0;16} (EXTEND_U %tmpr1_1{0;1} 0x10){0;16}){0;16}
[(0x125,6)] ; StaticArrow (0x125,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x125,3)
[(0x125,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x125,8)] ; StaticArrow (0x125,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0x125,9); StaticArrow (0x125,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x129,0)
[(0x125,9)] ; StaticArrow (0x125,9) %eflags{11;1} := (XOR %ebx{15;1} %ebx{14;1}){0;1}  --> (0x129,0)
[(0x129,0)] 

**** Decode instruction: rol    %ebx
[(0x129,0)] @{asm:=rol    %ebx}@ ; %tmpr0_8{0;8} := (AND 0x1{0;8} 0x1F{0;8})
[(0x129,1)] ; StaticArrow (0x129,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x129,2); StaticArrow (0x129,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12B,0)
[(0x129,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x129,3)] ; StaticArrow (0x129,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x129,4); StaticArrow (0x129,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x129,7)
[(0x129,4)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x129,5)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x129,6)] ; StaticArrow (0x129,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x129,3)
[(0x129,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x129,8)] ; StaticArrow (0x129,8) Skip << (EQ 0x1 0x1){0;1} >> --> (0x129,9); StaticArrow (0x129,8) Skip << (NOT (EQ 0x1 0x1){0;1}){0;1} >> --> (0x12B,0)
[(0x129,9)] ; StaticArrow (0x129,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0x12B,0)
[(0x12B,0)] 

**** Decode instruction: rol    %cl,%ebx
[(0x12B,0)] @{asm:=rol    %cl,%ebx}@ ; %tmpr0_8{0;8} := (AND %ecx{0;8} 0x1F{0;8})
[(0x12B,1)] ; StaticArrow (0x12B,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12B,2); StaticArrow (0x12B,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12D,0)
[(0x12B,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x12B,3)] ; StaticArrow (0x12B,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12B,4); StaticArrow (0x12B,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12B,7)
[(0x12B,4)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x12B,5)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x12B,6)] ; StaticArrow (0x12B,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x12B,3)
[(0x12B,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x12B,8)] ; StaticArrow (0x12B,8) Skip << (EQ %ecx{0;8} 0x1{0;8}){0;1} >> --> (0x12B,9); StaticArrow (0x12B,8) Skip << (NOT (EQ %ecx{0;8} 0x1{0;8}){0;1}){0;1} >> --> (0x12D,0)
[(0x12B,9)] ; StaticArrow (0x12B,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0x12D,0)
[(0x12D,0)] 

**** Decode instruction: rol    $0x7,%ebx
[(0x12D,0)] @{asm:=rol    $0x7,%ebx}@ ; %tmpr0_8{0;8} := (AND 0x7{0;8} 0x1F{0;8})
[(0x12D,1)] ; StaticArrow (0x12D,1) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12D,2); StaticArrow (0x12D,1) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x130,0)
[(0x12D,2)] ; %tmpr0_8{0;8} := (MODULO %tmpr0_8{0;8} 0x20{0;8})
[(0x12D,3)] ; StaticArrow (0x12D,3) Skip << (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1} >> --> (0x12D,4); StaticArrow (0x12D,3) Skip << (NOT (GT_U %tmpr0_8{0;8} 0x0{0;8}){0;1}){0;1} >> --> (0x12D,7)
[(0x12D,4)] ; %tmpr1_1{0;1} := %ebx{31;1}
[(0x12D,5)] ; %ebx := (ADD (MUL_U %ebx 0x2) (EXTEND_U %tmpr1_1{0;1} 0x20))
[(0x12D,6)] ; StaticArrow (0x12D,6) %tmpr0_8{0;8} := (SUB %tmpr0_8{0;8} 0x1{0;8}){0;8}  --> (0x12D,3)
[(0x12D,7)] ; %eflags{0;1} := %ebx{0;1}
[(0x12D,8)] ; StaticArrow (0x12D,8) Skip << (EQ 0x7 0x1){0;1} >> --> (0x12D,9); StaticArrow (0x12D,8) Skip << (NOT (EQ 0x7 0x1){0;1}){0;1} >> --> (0x130,0)
[(0x12D,9)] ; StaticArrow (0x12D,9) %eflags{11;1} := (XOR %ebx{31;1} %ebx{30;1}){0;1}  --> (0x130,0)
[(0x130,0)] 

