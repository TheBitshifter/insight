/*-
 * Copyright (C) 2010-2012, Centre National de la Recherche Scientifique,
 *                          Institut Polytechnique de Bordeaux,
 *                          Universite Bordeaux 1.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */


#include <kernel/Annotation.hh>
#include <utils/unordered11.hh>

/*
 * pp
 */
template<typename Node, typename Edge, typename NodeStore>
std::string ConcreteEdgePath<Node, Edge, NodeStore>::pp() const
{

  std::ostringstream oss;
  oss << " <";
  for (typename std::list<Edge *>::const_iterator arr = this->begin(); arr != this->end(); ++arr)
    {
      if (arr != this->begin()) oss << "::";
      oss << (*arr)->pp();
    }
  oss << "> ";
  return oss.str();

}

template<typename Node, typename Edge, typename NodeStore>
std::string ConcreteNodePath<Node, Edge, NodeStore>::pp() const
{

  std::ostringstream oss;
  oss << " <";
  for (typename std::list<Node *>::const_iterator arr = this->begin(); arr != this->end(); ++arr)
    {
      if (arr != this->begin()) oss << "::";
      oss << (*arr)->pp();
    }
  oss << "> ";
  return oss.str();

}


template<typename Node, typename Edge, typename NodeStore>
std::string EmptyPath<Node, Edge, NodeStore>::pp() const
{
  return std::string("~");
}



template<typename Node, typename Edge, typename NodeStore>
std::string ConcatenationPath<Node, Edge, NodeStore>::pp()  const
{
  std::ostringstream oss;
  oss << " (";
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::const_iterator arr = this->begin(); arr != this->end(); ++arr)
    {
      if (arr != this->begin()) oss << " + ";
      oss << (*arr)->pp();
    }
  oss << ") ";
  return oss.str();

}

template<typename Node, typename Edge, typename NodeStore>
std::string UnionPath<Node, Edge, NodeStore>::pp() const
{

  std::ostringstream oss;
  oss << " (";
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::const_iterator arr = this->begin(); arr != this->end(); ++arr)
    {
      if (arr != this->begin()) oss << " U ";
      oss << (*arr)->pp();
    }
  oss << ") ";
  return oss.str();

}

template<typename Node, typename Edge, typename NodeStore>
std::string StarPath<Node, Edge, NodeStore>::pp() const
{
  std::ostringstream oss;
  oss << " (";
  oss << path->pp() << "^{*}";
  oss << ") ";
  return oss.str();
}

template<typename Node, typename Edge, typename NodeStore>
std::string VariablePath<Node, Edge, NodeStore>::pp() const
{
  std::ostringstream oss;
  oss << "$" << this->id;
  return oss.str();
}

/*
 * replace_variable_in_place
 */
template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* EmptyPath<Node, Edge, NodeStore>::replace_variable_in_place(std::string, GraphPath<Node, Edge, NodeStore>*)
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteEdgePath<Node, Edge, NodeStore>::replace_variable_in_place(std::string, GraphPath<Node, Edge, NodeStore>*)
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteNodePath<Node, Edge, NodeStore>::replace_variable_in_place(std::string, GraphPath<Node, Edge, NodeStore>*)
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcatenationPath<Node, Edge, NodeStore>::replace_variable_in_place(std::string v_id, GraphPath<Node, Edge, NodeStore>* value)
{
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->replace_variable_in_place(v_id, value);
      nvo.push_back(rep);
      if (rep != *it)
        {
          delete(*it);
        }
    }
  this->clear();
  this->insert(this->begin(), nvo.begin(), nvo.end());
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* UnionPath<Node, Edge, NodeStore>::replace_variable_in_place(std::string v_id, GraphPath<Node, Edge, NodeStore>* value)
{
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->replace_variable_in_place(v_id, value);
      nvo.push_back(rep);
      if (rep != *it)
        {
          delete(*it);
        }
    }
  this->clear();
  this->insert(this->begin(), nvo.begin(), nvo.end());
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* StarPath<Node, Edge, NodeStore>::replace_variable_in_place(std::string v_id, GraphPath<Node, Edge, NodeStore>* value)
{
  GraphPath<Node, Edge, NodeStore>* rep = this->path->replace_variable_in_place(v_id, value);
  if (rep != this->path)
    {
      delete this->path;
    }
  this->path = rep;
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* VariablePath<Node, Edge, NodeStore>::replace_variable_in_place(std::string v_id, GraphPath<Node, Edge, NodeStore>* value)
{
  if (this->id == v_id)
    {
      return value->clone();
    }
  else
    {
      return this;
    }
}


/*
 * Simplify
 */
template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteEdgePath<Node, Edge, NodeStore>::simplify()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteNodePath<Node, Edge, NodeStore>::simplify()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* EmptyPath<Node, Edge, NodeStore>::simplify()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcatenationPath<Node, Edge, NodeStore>::simplify()
{
  if (this->size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->simplify();
      if (rep != *it)
        {
          delete(*it);
        }
      //Ignore empty paths
      if (!rep->is_empty())
        {
          /*if(nvo.size()!=0 && rep->is_concrete_edge()
          		&& nvo.back()->is_concrete_edge()) {
          	//Concatenate two adjacent concrete paths: x :: y = xy
          	ConcreteEdgePath<Node,Edge, NodeStore>* last=(ConcreteEdgePath<Node,Edge, NodeStore>*)nvo.back();
          	ConcreteEdgePath<Node,Edge, NodeStore>* cur=(ConcreteEdgePath<Node,Edge, NodeStore>*)rep;
          	last->insert(last->end(),cur->begin(),cur->end());
          	delete cur;
          }
          else if(nvo.size()!=0 && rep->is_concrete_node()
          		&& nvo.back()->is_concrete_node()) {
          	//Concatenate two adjacent concrete paths: x :: y = xy
          	ConcreteNodePath<Node,Edge, NodeStore>* last=(ConcreteNodePath<Node,Edge, NodeStore>*)nvo.back();
          	ConcreteNodePath<Node,Edge, NodeStore>* cur=(ConcreteNodePath<Node,Edge, NodeStore>*)rep;
          	last->insert(last->end(),cur->begin(),cur->end());
          	delete cur;
          }*/
          if (rep->is_concatenation())
            {
              //A :: (B :: C) = A :: B :: C
              ConcatenationPath<Node, Edge, NodeStore>* cc = (ConcatenationPath<Node, Edge, NodeStore>*) rep;
              nvo.insert(nvo.end(), cc->begin(), cc->end());
              //Moche mais evite un clone()
              cc->clear();
              //delete cc;
            }
          else
            {
              nvo.push_back(rep);
            }
        }
      else
        {
          //A :: epsilon = A
          delete rep;
        }
    }

  this->clear();
  if (nvo.size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  this->insert(this->begin(), nvo.begin(), nvo.end());

  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* UnionPath<Node, Edge, NodeStore>::simplify()
{
  if (this->size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->simplify();
      if (rep != *it)
        {
          delete(*it);
        }
      if (rep->is_union())
        {
          //A U (B U C) = A U B U C
          UnionPath<Node, Edge, NodeStore>* un = (UnionPath<Node, Edge, NodeStore>*) rep;
          nvo.insert(nvo.end(), un->begin(), un->end());
          //Moche mais evite un clone()
          un->clear();
          //delete cc;
        }
      else
        {
          nvo.push_back(rep);
        }
    }
  this->clear();
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  else
    {
      this->insert(this->begin(), nvo.begin(), nvo.end());
      return this;
    }
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* StarPath<Node, Edge, NodeStore>::simplify()
{
  GraphPath<Node, Edge, NodeStore>* rep = this->path->simplify();
  if (rep != path)
    {
      delete this->path;
      this->path = rep;
    }
  if (this->path->is_empty())
    {
      return this->path->clone();
    }
  else
    {
      return this;
    }
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* VariablePath<Node, Edge, NodeStore>::simplify()
{
  return this;
}

/*
 * normalize
 */
template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteEdgePath<Node, Edge, NodeStore>::normalize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteNodePath<Node, Edge, NodeStore>::normalize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* EmptyPath<Node, Edge, NodeStore>::normalize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcatenationPath<Node, Edge, NodeStore>::normalize()
{
  if (this->size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->normalize();
      if (rep != *it)
        {
          delete(*it);
        }
      //Ignore empty paths
      if (!rep->is_empty())
        {
          nvo.push_back(rep);
        }
      else
        {
          //A :: epsilon = A
          delete rep;
        }
    }

  this->clear();
  if (nvo.size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  this->insert(this->begin(), nvo.begin(), nvo.end());

  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* UnionPath<Node, Edge, NodeStore>::normalize()
{
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->normalize();
      if (rep != *it)
        {
          delete(*it);
        }
      nvo.push_back(rep);
    }
  //Determine si forme gauche ou droite
  bool left = true, right = true, none = true;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = nvo.begin(); it != nvo.end(); ++it)
    {
      assert((*it)->is_concatenation());
      ConcatenationPath<Node, Edge, NodeStore>* cc = (ConcatenationPath<Node, Edge, NodeStore>*) * it;
      for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it2 = cc->begin(); it2 != cc->end(); ++it2)
        {
          //assert(!(*it2)->is_concatenation() && !(*it2)->is_union());
          if (cc->size() <= 1)
            {
              continue;
            }
          if ((*it2)->is_variable())
            {
              none = false;
              if ((*it2) != cc->front())
                {
                  left = false;
                }
              if ((*it2) != cc->back())
                {
                  right = false;
                }
            }
        }
    }
  //Calcul du polynome
  assert((left ^ right) || none);
  std::unordered_map<std::string, GraphPath<Node, Edge, NodeStore>*> polynome;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = nvo.begin(); it != nvo.end(); ++it)
    {
      ConcatenationPath<Node, Edge, NodeStore>* cc = (ConcatenationPath<Node, Edge, NodeStore>*) * it;
      std::string var_id;
      if (cc->contains_variable())
        {
          VariablePath<Node, Edge, NodeStore>* var;
          if (left)
            {
              var = (VariablePath<Node, Edge, NodeStore>*)cc->front();
              cc->pop_front();
              var_id = var->get_id();
              //delete var;
            }
          else if (right)
            {
              var = (VariablePath<Node, Edge, NodeStore>*)cc->back();
              cc->pop_back();
              var_id = var->get_id();
              //delete var;
            }
          else assert(false);
        }
      else
        {
          var_id = "None";
        }
      if (polynome.find(var_id) == polynome.end())
        {
          polynome[var_id] = cc;
        }
      else
        {
          GraphPath<Node, Edge, NodeStore>* present = polynome[var_id];
          if (!present->is_union())
            {
              UnionPath<Node, Edge, NodeStore>* un = new UnionPath<Node, Edge, NodeStore>(present->get_graph());
              un->push_back(present);
              polynome[var_id] = un;
              present = un;
            }
          UnionPath<Node, Edge, NodeStore>* un = (UnionPath<Node, Edge, NodeStore>*)present;
          un->push_back(cc);
        }
    }

  this->clear();
  for (typename std::unordered_map<std::string, GraphPath<Node, Edge, NodeStore>*>::iterator it = polynome.begin(); it != polynome.end(); ++it)
    {
      VariablePath<Node, Edge, NodeStore>* var = NULL;
      if (it->first != "None")
        {
          var = new VariablePath<Node, Edge, NodeStore>(this->get_graph(), it->first);
        }
      ConcatenationPath<Node, Edge, NodeStore>* cc = new ConcatenationPath<Node, Edge, NodeStore>(this->get_graph());
      cc->push_back(it->second);
      if (var != NULL)
        {
          if (left)
            {
              cc->push_front(var);
            }
          else if (right)
            {
              cc->push_back(var);
            }
          else
            {
              assert(cc->size() == 0);
              cc->push_back(var);
            }
        }
      this->push_back(cc);
    }
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* StarPath<Node, Edge, NodeStore>::normalize()
{
  GraphPath<Node, Edge, NodeStore>* rep = this->path->normalize();
  if (rep != path)
    {
      delete this->path;
      this->path = rep;
    }
  if (this->path->is_empty())
    {
      return this->path->clone();
    }
  else
    {
      return this;
    }
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* VariablePath<Node, Edge, NodeStore>::normalize()
{
  return this;
}

/*
 * factorize
 */
template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteEdgePath<Node, Edge, NodeStore>::factorize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteNodePath<Node, Edge, NodeStore>::factorize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* EmptyPath<Node, Edge, NodeStore>::factorize()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcatenationPath<Node, Edge, NodeStore>::factorize()
{
  if (this->size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->factorize();
      if (rep != *it)
        {
          delete(*it);
        }
      nvo.push_back(rep);
    }

  this->clear();
  if (nvo.size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  this->insert(this->begin(), nvo.begin(), nvo.end());
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* UnionPath<Node, Edge, NodeStore>::factorize()
{
  if (this->size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->factorize();
      if (rep != *it)
        {
          delete(*it);
        }
      nvo.push_back(rep);
    }
  this->clear();
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  else
    {
      this->insert(this->begin(), nvo.begin(), nvo.end());
      return this;
    }
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* StarPath<Node, Edge, NodeStore>::factorize()
{
  GraphPath<Node, Edge, NodeStore>* rep = this->path->factorize();
  if (rep != path)
    {
      delete this->path;
      this->path = rep;
    }
  if (this->path->is_empty())
    {
      return this->path->clone();
    }
  else
    {
      return this;
    }
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* VariablePath<Node, Edge, NodeStore>::factorize()
{
  return this;
}

/*
 * distribute
 */
template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteEdgePath<Node, Edge, NodeStore>::distribute()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcreteNodePath<Node, Edge, NodeStore>::distribute()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* EmptyPath<Node, Edge, NodeStore>::distribute()
{
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* ConcatenationPath<Node, Edge, NodeStore>::distribute()
{
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  nvo.insert(nvo.begin(), this->begin(), this->end());
  bool distributed;
  do
    {
      this->clear();
      this->insert(this->begin(), nvo.begin(), nvo.end());
      distributed = false;

      for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end() && true && !distributed; ++it)
        {
          GraphPath<Node, Edge, NodeStore>* cur = *it;
          //Distributivité (A+(C | D)+X) -> ( (A+C) | (A+D) + X)
          if (cur->is_union() && it != this->begin())
            {
              distributed = true;
              UnionPath<Node, Edge, NodeStore>* uni = (UnionPath<Node, Edge, NodeStore>*)cur;
              //dis=((A+C) | (A+D))
              UnionPath<Node, Edge, NodeStore>* dis = new UnionPath<Node, Edge, NodeStore>(this->get_graph());
              bool first = true;
              for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator milieu = uni->begin(); milieu != uni->end(); ++milieu)
                {
                  //cp=(A+C) puis (A+D) puis ...
                  ConcatenationPath<Node, Edge, NodeStore>* cp = new ConcatenationPath<Node, Edge, NodeStore>(this->get_graph());
                  //Copie de A
                  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator avant = this->begin(); avant != it; ++avant)
                    {
                      if (first)
                        {
                          cp->push_back((*avant));
                        }
                      else
                        {
                          cp->push_back((*avant)->clone());
                        }
                    }
                  //Copie de C ou D
                  cp->push_back((*milieu)->clone());
                  first = false;
                  dis->push_back(cp);
                }
              //Ajoute (A+C) | (A+D)
              nvo.clear();
              nvo.push_back(dis);
              //Ajoute la fin (X)
              ++it;
              nvo.insert(nvo.end(), it, this->end());
              //Supprime (C|D)
              delete uni;
              break;
            }
          else
            {
              //que dalle
            }
        }
    }
  while (distributed); //point fixe
  this->clear();
  if (nvo.size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  this->insert(this->begin(), nvo.begin(), nvo.end());
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* UnionPath<Node, Edge, NodeStore>::distribute()
{
  std::list<GraphPath<Node, Edge, NodeStore>*> nvo;
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      GraphPath<Node, Edge, NodeStore>* rep = (*it)->distribute();
      if (rep != *it)
        {
          delete(*it);
        }
      if (!rep->is_empty())
        {
          if (!rep->is_concatenation())
            {
              ConcatenationPath<Node, Edge, NodeStore>* cc = new ConcatenationPath<Node, Edge, NodeStore>(this->get_graph());
              cc->push_back(rep);
              rep = cc;
            }
          nvo.push_back(rep);
        }
    }
  this->clear();
  if (nvo.size() == 0)
    {
      return new EmptyPath<Node, Edge, NodeStore>(this->get_graph());
    }
  if (nvo.size() == 1)
    {
      return nvo.back();
    }
  this->insert(this->begin(), nvo.begin(), nvo.end());
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* StarPath<Node, Edge, NodeStore>::distribute()
{
  GraphPath<Node, Edge, NodeStore>* rep = this->path->distribute();
  if (rep != path)
    {
      delete this->path;
      this->path = rep;
    }
  return this;
}

template<typename Node, typename Edge, typename NodeStore>
GraphPath<Node, Edge, NodeStore>* VariablePath<Node, Edge, NodeStore>::distribute()
{
  return this;
}


/*
 * contains_variable
 */
template<typename Node, typename Edge, typename NodeStore>
bool VariablePath<Node, Edge, NodeStore>::contains_variable(std::string v_id)
{
  return v_id == "" || this->id == v_id;
}

template<typename Node, typename Edge, typename NodeStore>
bool StarPath<Node, Edge, NodeStore>::contains_variable(std::string v_id)
{
  return path->contains_variable(v_id);
}

template<typename Node, typename Edge, typename NodeStore>
bool EmptyPath<Node, Edge, NodeStore>::contains_variable(std::string)
{
  return false;
}

template<typename Node, typename Edge, typename NodeStore>
bool ConcreteEdgePath<Node, Edge, NodeStore>::contains_variable(std::string)
{
  return false;
}

template<typename Node, typename Edge, typename NodeStore>
bool ConcreteNodePath<Node, Edge, NodeStore>::contains_variable(std::string)
{
  return false;
}

template<typename Node, typename Edge, typename NodeStore>
bool UnionPath<Node, Edge, NodeStore>::contains_variable(std::string v_id)
{
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      if ((*it)->contains_variable(v_id))
        {
          return true;
        }
    }
  return false;
}

template<typename Node, typename Edge, typename NodeStore>
bool ConcatenationPath<Node, Edge, NodeStore>::contains_variable(std::string v_id)
{
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      if ((*it)->contains_variable(v_id))
        {
          return true;
        }
    }
  return false;
}


/*
 * gather_variables
 */
template<typename Node, typename Edge, typename NodeStore>
void VariablePath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>* vars)
{
  vars->push_back(this);
}

template<typename Node, typename Edge, typename NodeStore>
void StarPath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>* vars)
{
  path->gather_variables(vars);
}

template<typename Node, typename Edge, typename NodeStore>
void EmptyPath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>*)
{
}

template<typename Node, typename Edge, typename NodeStore>
void ConcreteEdgePath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>*)
{
}

template<typename Node, typename Edge, typename NodeStore>
void ConcreteNodePath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>*)
{
}

template<typename Node, typename Edge, typename NodeStore>
void UnionPath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>* vars)
{
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      (*it)->gather_variables(vars);
    }
}

template<typename Node, typename Edge, typename NodeStore>
void ConcatenationPath<Node, Edge, NodeStore>::gather_variables(std::list<VariablePath<Node, Edge, NodeStore>*>* vars)
{
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::iterator it = this->begin(); it != this->end(); ++it)
    {
      (*it)->gather_variables(vars) ;
    }
}


/*
 * operator==
 */
template<typename Node, typename Edge, typename NodeStore>
bool ConcreteEdgePath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const ConcreteEdgePath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  ConcreteEdgePath<Node, Edge, NodeStore>* const o = (ConcreteEdgePath<Node, Edge, NodeStore>* const) &e;
  if (this->size() != o->size())
    {
      return false;
    }
  for (typename std::list<Edge *>::const_iterator it = this->begin(), it2 = o->begin(); it != this->end(); ++it, ++it2)
    {
      if (!(**it == **it2))
        {
          return false;
        }
    }
  return true;
}

template<typename Node, typename Edge, typename NodeStore>
bool ConcreteNodePath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const ConcreteNodePath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  ConcreteNodePath<Node, Edge, NodeStore>* const o = (ConcreteNodePath<Node, Edge, NodeStore>* const) &e;
  if (this->size() != o->size())
    {
      return false;
    }
  for (typename std::list<Node *>::const_iterator it = this->begin(), it2 = o->begin(); it != this->end(); ++it, ++it2)
    {
      if (!(**it == **it2))
        {
          return false;
        }
    }
  return true;
}

template<typename Node, typename Edge, typename NodeStore>
bool EmptyPath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const EmptyPath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  return true;
}

template<typename Node, typename Edge, typename NodeStore>
bool ConcatenationPath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const ConcatenationPath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  ConcatenationPath<Node, Edge, NodeStore>* const o = (ConcatenationPath<Node, Edge, NodeStore>* const) &e;
  if (this->size() != o->size())
    {
      return false;
    }
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::const_iterator it = this->begin(), it2 = o->begin(); it != this->end(); ++it, ++it2)
    {
      if (!(**it == **it2))
        {
          return false;
        }
    }
  return true;
}

template<typename Node, typename Edge, typename NodeStore>
bool UnionPath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const UnionPath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  UnionPath<Node, Edge, NodeStore>* const o = (UnionPath<Node, Edge, NodeStore>* const) &e;
  if (this->size() != o->size())
    {
      return false;
    }
  for (typename std::list<GraphPath<Node, Edge, NodeStore>*>::const_iterator it = this->begin(), it2 = o->begin(); it != this->end(); ++it, ++it2)
    {
      if (!(**it == **it2))
        {
          return false;
        }
    }
  return true;
}

template<typename Node, typename Edge, typename NodeStore>
bool StarPath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const StarPath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  StarPath<Node, Edge, NodeStore>* const o = (StarPath<Node, Edge, NodeStore>* const) &e;
  return *(this->path) == *(o->path);
}

template<typename Node, typename Edge, typename NodeStore>
bool VariablePath<Node, Edge, NodeStore>::operator==(const GraphPath<Node, Edge, NodeStore> & e) const
{
  if (dynamic_cast<const VariablePath<Node, Edge, NodeStore> *>(&e) == NULL)
    {
      return false;
    }
  VariablePath<Node, Edge, NodeStore>* const o = (VariablePath<Node, Edge, NodeStore>* const) &e;
  return this->id == o->id;
}
