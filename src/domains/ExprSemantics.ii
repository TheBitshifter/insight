/*-
 * Copyright (C) 2010-2012, Centre National de la Recherche Scientifique,
 *                          Institut Polytechnique de Bordeaux,
 *                          Universite Bordeaux 1.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#include <cassert>
#include <kernel/Architecture.hh>

template<typename Value, typename ExprSem>
Value
expr_semantics_embed_eval(Value v1, Value v2, int off) {
  Value res;

  if (v2.get_size () == BITS_PER_WORD)
    {
      assert (off == 0 && v1.get_size () == v2.get_size ());
      res = v2;
    }
  else
    {
      word_t mask = (((word_t)1) << v2.get_size()) - 1;
      int v1_size = v1.get_size();
      Value vmask(v1_size, mask << off);

      res = ExprSem::BV_OP_OR_eval(ExprSem::BV_OP_AND_eval(v1,
							   ExprSem::BV_OP_NOT_eval(vmask, 
										   0, v1_size),
							   0, v1_size),
				   ExprSem::BV_OP_LSH_eval(v2, Value(v1_size, 
								     off),
							   0, v1_size),
				   0, v1_size);
    }
  return res;
}

template<typename Value, typename ExprSem>
Value 
expr_semantics_extract_eval (Value v, int off, int size)
{
  assert (v.get_size () >= size);
  return ExprSem::BV_OP_RSH_U_eval (v, Value (v.get_size (), off), 0, size);
}
