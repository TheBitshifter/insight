/*-
 * Copyright (C) 2010-2014, Centre National de la Recherche Scientifique,
 *                          Institut Polytechnique de Bordeaux,
 *                          Universite de Bordeaux.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef ABSTRACTSTATE_II
# define ABSTRACTSTATE_II

# include <cassert>

template<typename PP, typename CTX>
AbstractState<PP,CTX>::AbstractState (ProgramPoint *pp, Context *ctx) 
  : Object (), program_point (pp), context (ctx), refcount (1)
{ 
}

template<typename PP, typename CTX>
AbstractState<PP,CTX>::~AbstractState () 
{ 
  program_point->deref ();
  context->deref ();
}

template<typename PP, typename CTX>
typename AbstractState<PP,CTX>::ProgramPoint *
AbstractState<PP,CTX>::get_ProgramPoint () const 
{
  return program_point;
}

template<typename PP, typename CTX>
typename AbstractState<PP,CTX>::Context *
AbstractState<PP,CTX>::get_Context () const 
{
  return context;
}

template<typename PP, typename CTX>
bool 
AbstractState<PP,CTX>::equals (const AbstractState<ProgramPoint, Context> *s) 
  const 
{
  return (program_point->equals (s->program_point) &&
	  context->equals (s->context));
}

template<typename PP, typename CTX>
std::size_t 
AbstractState<PP,CTX>::hashcode () const 
{
  return 13 * program_point->hashcode () + 141 * context->hashcode ();
}

template<typename PP, typename CTX>
void
AbstractState<PP,CTX>::output_text (std::ostream &out) const 
{
  out << "<" << *program_point << ", " << *context << ">";
}

template<typename PP, typename CTX>
AbstractState<PP,CTX> *
AbstractState<PP,CTX>::clone () const 
{
  program_point->ref ();
  context->ref ();
  
  return new AbstractState<PP,CTX> (program_point, context);
}

template<typename PP, typename CTX>
void
AbstractState<PP,CTX>::ref () const 
{
  refcount++;
}

template<typename PP, typename CTX>
void
AbstractState<PP,CTX>::deref () 
{
  assert (refcount > 0);
  refcount--;
  if (refcount == 0)
    delete this;
}

#endif /* ! ABSTRACTSTATE_II */
