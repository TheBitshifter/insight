/*-
 * Copyright (C) 2010-2012, Centre National de la Recherche Scientifique,
 *                          Institut Polytechnique de Bordeaux,
 *                          Universite Bordeaux 1.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef BINARY_OP
/* BINARY_OP(enumvalue, pp_string, is_commutative, is_associative) */

BINARY_OP(BV_OP_ADD, "ADD", true, true) /*! Addition */
BINARY_OP(BV_OP_SUB, "SUB", false, true) /*! Substraction */
BINARY_OP(BV_OP_MUL_S, "MUL_S", true, true) /*! Signed Multiplication */ 
BINARY_OP(BV_OP_MUL_U, "MUL_U", true, true) /*! Unsigned Multiplication */ 
BINARY_OP(BV_OP_DIV_S, "DIV_S", false, false) /*! Signed Division */
BINARY_OP(BV_OP_DIV_U, "DIV_U", false, false) /*! Unsigned Division */
BINARY_OP(BV_OP_MODULO, "MODULO", false, false) /*! Modulo */
BINARY_OP(BV_OP_CONCAT, "CC", false, true) /*! Concatenation */

  /* Binary */
BINARY_OP(BV_OP_AND, "AND", true, true) /*! Bitwise and */
BINARY_OP(BV_OP_OR, "OR", true, true) /*! Bitwise or */
BINARY_OP(BV_OP_XOR, "XOR", true, true) /*! Bitwise xor */
BINARY_OP(BV_OP_LSH, "LSH", false, false) /*! Left Shift equiv to << = SAL/SHL */
BINARY_OP(BV_OP_RSH_U, "RSH_U", false, false) /*! Right Shift equiv to >> = SAR */
BINARY_OP(BV_OP_RSH_S, "RSH_S", false, false) /*! Right Shift equiv to >> = SHR */
BINARY_OP(BV_OP_ROR, "ROR", false, false) /*! Right rol */
BINARY_OP(BV_OP_ROL, "ROL", false, false) /*! Left rol */

  /* Logic */
BINARY_OP(BV_OP_EQ, "EQ", true, true)  /*! Equality */
BINARY_OP(BV_OP_NEQ, "NEQ", true, true) /*! Inequality */

BINARY_OP(BV_OP_LT_S, "LT_S", false, false) /*! Less */
BINARY_OP(BV_OP_LT_U, "LT_U", false, false) /*! Less */

BINARY_OP(BV_OP_LEQ_S, "LEQ_S", false, false) /*! Less or equal */
BINARY_OP(BV_OP_LEQ_U, "LEQ_U", false, false) /*! Less or equal */

BINARY_OP(BV_OP_GT_S, "GT_S", false, false) /*! Greater */
BINARY_OP(BV_OP_GT_U, "GT_U", false, false) /*! Greater */

BINARY_OP(BV_OP_GEQ_S, "GEQ_S", false, false) /*! Greater or equal */
BINARY_OP(BV_OP_GEQ_U, "GEQ_U", false, false) /*! Greater or equal */

BINARY_OP(BV_OP_POW,  "POW", false, false) /*! power of */
BINARY_OP(BV_OP_EXTEND_S, "EXTEND_S", false, false) /*! signed extend */
BINARY_OP(BV_OP_EXTEND_U, "EXTEND_U", false, false) /*! unsigned extend */

#endif

#ifdef UNARY_OP
/* UNARY_OP(enumvalue, pp_string) */ 
UNARY_OP(BV_OP_NEG, "NEG") /*! arithmetic negative */
UNARY_OP(BV_OP_NOT, "NOT") /*! bitwise not */
#endif

#ifdef TERNARY_OP
TERNARY_OP(BV_OP_EXTRACT, "EXTRACT") /*! extract (ConcreteValue, offset, size) */
#endif

